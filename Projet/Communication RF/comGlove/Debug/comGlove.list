
comGlove.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a64  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08005ba4  08005ba4  00015ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005d7c  08005d7c  00015d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005d84  08005d84  00015d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005d88  08005d88  00015d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000008  08005d8c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000138  20000078  08005dfc  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001b0  08005dfc  000201b0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   000128af  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002ab2  00000000  00000000  00032957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001218  00000000  00000000  00035410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000010f0  00000000  00000000  00036628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0001e6b8  00000000  00000000  00037718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013197  00000000  00000000  00055dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000b5b4c  00000000  00000000  00068f67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0011eab3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005164  00000000  00000000  0011eb04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
 8000160:	08005b8c 	.word	0x08005b8c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000007c 	.word	0x2000007c
 800017c:	08005b8c 	.word	0x08005b8c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <receiver>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);



void receiver()
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	nrf24l01p_rx_init(2500, _1Mbps,pipe0);
 8000528:	2200      	movs	r2, #0
 800052a:	2100      	movs	r1, #0
 800052c:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000530:	f000 fc1c 	bl	8000d6c <nrf24l01p_rx_init>
	printf("***Debut de la reception***\r\n");
 8000534:	4811      	ldr	r0, [pc, #68]	; (800057c <receiver+0x58>)
 8000536:	f004 fbab 	bl	8004c90 <puts>

	while (1)
	    {

		for (i=0;i<8;i++)
 800053a:	4b11      	ldr	r3, [pc, #68]	; (8000580 <receiver+0x5c>)
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	e013      	b.n	800056a <receiver+0x46>
				{
					nrf24l01p_rx_receive(rx_data[i]); // read data when data ready flag is set
 8000542:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <receiver+0x5c>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a0f      	ldr	r2, [pc, #60]	; (8000584 <receiver+0x60>)
 8000548:	5cd3      	ldrb	r3, [r2, r3]
 800054a:	4618      	mov	r0, r3
 800054c:	f000 fc44 	bl	8000dd8 <nrf24l01p_rx_receive>
					printf("data received : %d\r\n",rx_data[i]);
 8000550:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <receiver+0x5c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a0b      	ldr	r2, [pc, #44]	; (8000584 <receiver+0x60>)
 8000556:	5cd3      	ldrb	r3, [r2, r3]
 8000558:	4619      	mov	r1, r3
 800055a:	480b      	ldr	r0, [pc, #44]	; (8000588 <receiver+0x64>)
 800055c:	f004 fb12 	bl	8004b84 <iprintf>
		for (i=0;i<8;i++)
 8000560:	4b07      	ldr	r3, [pc, #28]	; (8000580 <receiver+0x5c>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	3301      	adds	r3, #1
 8000566:	4a06      	ldr	r2, [pc, #24]	; (8000580 <receiver+0x5c>)
 8000568:	6013      	str	r3, [r2, #0]
 800056a:	4b05      	ldr	r3, [pc, #20]	; (8000580 <receiver+0x5c>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	2b07      	cmp	r3, #7
 8000570:	dde7      	ble.n	8000542 <receiver+0x1e>
				}
	        HAL_Delay(100);
 8000572:	2064      	movs	r0, #100	; 0x64
 8000574:	f000 ffae 	bl	80014d4 <HAL_Delay>
		for (i=0;i<8;i++)
 8000578:	e7df      	b.n	800053a <receiver+0x16>
 800057a:	bf00      	nop
 800057c:	08005ba4 	.word	0x08005ba4
 8000580:	2000009c 	.word	0x2000009c
 8000584:	20000094 	.word	0x20000094
 8000588:	08005bc4 	.word	0x08005bc4

0800058c <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER){
		// Nothing to do

	}
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005a2:	b480      	push	{r7}
 80005a4:	b085      	sub	sp, #20
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	4313      	orrs	r3, r2
 80005b8:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4013      	ands	r3, r2
 80005c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005c6:	68fb      	ldr	r3, [r7, #12]
}
 80005c8:	bf00      	nop
 80005ca:	3714      	adds	r7, #20
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e8:	2004      	movs	r0, #4
 80005ea:	f7ff ffda 	bl	80005a2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ee:	2002      	movs	r0, #2
 80005f0:	f7ff ffd7 	bl	80005a2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f4:	2001      	movs	r0, #1
 80005f6:	f7ff ffd4 	bl	80005a2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005fa:	2010      	movs	r0, #16
 80005fc:	f7ff ffd1 	bl	80005a2 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CE_nrf_Pin|CS_nrf_Pin|LD2_Pin|LD3_Pin
 8000600:	2200      	movs	r2, #0
 8000602:	f240 3123 	movw	r1, #803	; 0x323
 8000606:	4820      	ldr	r0, [pc, #128]	; (8000688 <MX_GPIO_Init+0xb4>)
 8000608:	f001 fa00 	bl	8001a0c <HAL_GPIO_WritePin>
                          |LD1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = CE_nrf_Pin|CS_nrf_Pin|LD2_Pin|LD3_Pin
 800060c:	f240 3323 	movw	r3, #803	; 0x323
 8000610:	607b      	str	r3, [r7, #4]
                          |LD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000612:	2301      	movs	r3, #1
 8000614:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061a:	2300      	movs	r3, #0
 800061c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	4619      	mov	r1, r3
 8000622:	4819      	ldr	r0, [pc, #100]	; (8000688 <MX_GPIO_Init+0xb4>)
 8000624:	f001 f88a 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8000628:	2308      	movs	r3, #8
 800062a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800062c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000630:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	4619      	mov	r1, r3
 800063a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063e:	f001 f87d 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000642:	2340      	movs	r3, #64	; 0x40
 8000644:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000646:	2300      	movs	r3, #0
 8000648:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	4619      	mov	r1, r3
 8000652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000656:	f001 f871 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B2_Pin;
 800065a:	2310      	movs	r3, #16
 800065c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065e:	2300      	movs	r3, #0
 8000660:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	4619      	mov	r1, r3
 800066a:	4808      	ldr	r0, [pc, #32]	; (800068c <MX_GPIO_Init+0xb8>)
 800066c:	f001 f866 	bl	800173c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000670:	2200      	movs	r2, #0
 8000672:	2100      	movs	r1, #0
 8000674:	2009      	movs	r0, #9
 8000676:	f001 f82c 	bl	80016d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800067a:	2009      	movs	r0, #9
 800067c:	f001 f843 	bl	8001706 <HAL_NVIC_EnableIRQ>

}
 8000680:	bf00      	nop
 8000682:	3718      	adds	r7, #24
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	48000400 	.word	0x48000400
 800068c:	48001000 	.word	0x48001000

08000690 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800069c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006a0:	f023 0218 	bic.w	r2, r3, #24
 80006a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4313      	orrs	r3, r2
 80006ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY); return ch;
 80006c4:	1d39      	adds	r1, r7, #4
 80006c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006ca:	2201      	movs	r2, #1
 80006cc:	4803      	ldr	r0, [pc, #12]	; (80006dc <__io_putchar+0x20>)
 80006ce:	f003 fcbd 	bl	800404c <HAL_UART_Transmit>
 80006d2:	687b      	ldr	r3, [r7, #4]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000108 	.word	0x20000108

080006e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e4:	f000 fe70 	bl	80013c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e8:	f000 f80f 	bl	800070a <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006ec:	f000 f863 	bl	80007b6 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f0:	f7ff ff70 	bl	80005d4 <MX_GPIO_Init>
  MX_RF_Init();
 80006f4:	f000 fb86 	bl	8000e04 <MX_RF_Init>
  MX_SPI1_Init();
 80006f8:	f000 fbbe 	bl	8000e78 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80006fc:	f000 fd98 	bl	8001230 <MX_USART1_UART_Init>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  //transmitter();
  receiver();
 8000700:	f7ff ff10 	bl	8000524 <receiver>
 8000704:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8000706:	4618      	mov	r0, r3
 8000708:	bd80      	pop	{r7, pc}

0800070a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	b098      	sub	sp, #96	; 0x60
 800070e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000710:	f107 031c 	add.w	r3, r7, #28
 8000714:	2244      	movs	r2, #68	; 0x44
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f004 fa2b 	bl	8004b74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071e:	463b      	mov	r3, r7
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
 800072c:	615a      	str	r2, [r3, #20]
 800072e:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000730:	f001 f9b6 	bl	8001aa0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000734:	2000      	movs	r0, #0
 8000736:	f7ff ffab 	bl	8000690 <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 800073a:	232f      	movs	r3, #47	; 0x2f
 800073c:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800073e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000742:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000744:	2301      	movs	r3, #1
 8000746:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000748:	f44f 7380 	mov.w	r3, #256	; 0x100
 800074c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800074e:	2301      	movs	r3, #1
 8000750:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000752:	2340      	movs	r3, #64	; 0x40
 8000754:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000756:	2300      	movs	r3, #0
 8000758:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 800075a:	23a0      	movs	r3, #160	; 0xa0
 800075c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800075e:	2305      	movs	r3, #5
 8000760:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000762:	2300      	movs	r3, #0
 8000764:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	4618      	mov	r0, r3
 800076c:	f001 fcea 	bl	8002144 <HAL_RCC_OscConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000776:	f000 f83e 	bl	80007f6 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800077a:	236f      	movs	r3, #111	; 0x6f
 800077c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000796:	463b      	mov	r3, r7
 8000798:	2101      	movs	r1, #1
 800079a:	4618      	mov	r0, r3
 800079c:	f002 f808 	bl	80027b0 <HAL_RCC_ClockConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80007a6:	f000 f826 	bl	80007f6 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007aa:	f002 fcc8 	bl	800313e <HAL_RCCEx_EnableMSIPLLMode>
}
 80007ae:	bf00      	nop
 80007b0:	3760      	adds	r7, #96	; 0x60
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b08c      	sub	sp, #48	; 0x30
 80007ba:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007bc:	463b      	mov	r3, r7
 80007be:	2230      	movs	r2, #48	; 0x30
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f004 f9d6 	bl	8004b74 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80007c8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80007cc:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSI;
 80007ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80007d4:	2300      	movs	r3, #0
 80007d6:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80007d8:	2310      	movs	r3, #16
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007dc:	463b      	mov	r3, r7
 80007de:	4618      	mov	r0, r3
 80007e0:	f002 fbb7 	bl	8002f52 <HAL_RCCEx_PeriphCLKConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80007ea:	f000 f804 	bl	80007f6 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80007ee:	bf00      	nop
 80007f0:	3730      	adds	r7, #48	; 0x30
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007fa:	b672      	cpsid	i
}
 80007fc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fe:	e7fe      	b.n	80007fe <Error_Handler+0x8>

08000800 <cs_high>:

//-----------*Fonctions des PINS et Registres*---------------

//SPI Chip select sans l'activation de Cs le module nrf ne répond pas
static void cs_high()
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT,NRF24L01P_SPI_CS_PIN_NUMBER,GPIO_PIN_SET);
 8000804:	2201      	movs	r2, #1
 8000806:	f44f 7100 	mov.w	r1, #512	; 0x200
 800080a:	4802      	ldr	r0, [pc, #8]	; (8000814 <cs_high+0x14>)
 800080c:	f001 f8fe 	bl	8001a0c <HAL_GPIO_WritePin>
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	48000400 	.word	0x48000400

08000818 <cs_low>:


static void cs_low()
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT,NRF24L01P_SPI_CS_PIN_NUMBER,GPIO_PIN_RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000822:	4802      	ldr	r0, [pc, #8]	; (800082c <cs_low+0x14>)
 8000824:	f001 f8f2 	bl	8001a0c <HAL_GPIO_WritePin>
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	48000400 	.word	0x48000400

08000830 <ce_high>:

//CE sert à activer le RX/TX mode
static void ce_high()
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(NRF24L01P_SPI_CE_PIN_PORT,NRF24L01P_SPI_CE_PIN_NUMBER,GPIO_PIN_SET);
 8000834:	2201      	movs	r2, #1
 8000836:	f44f 7180 	mov.w	r1, #256	; 0x100
 800083a:	4802      	ldr	r0, [pc, #8]	; (8000844 <ce_high+0x14>)
 800083c:	f001 f8e6 	bl	8001a0c <HAL_GPIO_WritePin>
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	48000400 	.word	0x48000400

08000848 <ce_low>:


static void ce_low()
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(NRF24L01P_SPI_CE_PIN_PORT,NRF24L01P_SPI_CE_PIN_NUMBER,GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000852:	4802      	ldr	r0, [pc, #8]	; (800085c <ce_low+0x14>)
 8000854:	f001 f8da 	bl	8001a0c <HAL_GPIO_WritePin>
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	48000400 	.word	0x48000400

08000860 <read_register>:

//fonction qui permet d'aller lire dans un registre
/* - reg : numero du registre à lire
 * - return value : valeur du registre*/
static uint8_t read_register (uint8_t reg)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af02      	add	r7, sp, #8
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]

	uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	73fb      	strb	r3, [r7, #15]
	uint8_t status, read_val;

	cs_low();
 800086e:	f7ff ffd3 	bl	8000818 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI,&command,&status,1,HAL_MAX_DELAY);
 8000872:	f107 020e 	add.w	r2, r7, #14
 8000876:	f107 010f 	add.w	r1, r7, #15
 800087a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800087e:	9300      	str	r3, [sp, #0]
 8000880:	2301      	movs	r3, #1
 8000882:	4809      	ldr	r0, [pc, #36]	; (80008a8 <read_register+0x48>)
 8000884:	f002 ffa2 	bl	80037cc <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(NRF24L01P_SPI,&read_val,1,2000);
 8000888:	f107 010d 	add.w	r1, r7, #13
 800088c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000890:	2201      	movs	r2, #1
 8000892:	4805      	ldr	r0, [pc, #20]	; (80008a8 <read_register+0x48>)
 8000894:	f002 fe6a 	bl	800356c <HAL_SPI_Receive>
	cs_high();
 8000898:	f7ff ffb2 	bl	8000800 <cs_high>

	return read_val;
 800089c:	7b7b      	ldrb	r3, [r7, #13]
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200000a0 	.word	0x200000a0

080008ac <write_register>:

//fonction qui permet d'écrire dans un registre
/* - reg : numero du registre où écrire
 * - val : valeur à écrire*/
static void write_register (uint8_t reg,uint8_t val)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af02      	add	r7, sp, #8
 80008b2:	4603      	mov	r3, r0
 80008b4:	460a      	mov	r2, r1
 80008b6:	71fb      	strb	r3, [r7, #7]
 80008b8:	4613      	mov	r3, r2
 80008ba:	71bb      	strb	r3, [r7, #6]

	uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	f043 0320 	orr.w	r3, r3, #32
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	73fb      	strb	r3, [r7, #15]
	uint8_t status;
	uint8_t write_val = val;
 80008c6:	79bb      	ldrb	r3, [r7, #6]
 80008c8:	737b      	strb	r3, [r7, #13]

	cs_low();
 80008ca:	f7ff ffa5 	bl	8000818 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI,&command,&status,1,HAL_MAX_DELAY);
 80008ce:	f107 020e 	add.w	r2, r7, #14
 80008d2:	f107 010f 	add.w	r1, r7, #15
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	2301      	movs	r3, #1
 80008de:	4808      	ldr	r0, [pc, #32]	; (8000900 <write_register+0x54>)
 80008e0:	f002 ff74 	bl	80037cc <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(NRF24L01P_SPI,&write_val,1,2000);
 80008e4:	f107 010d 	add.w	r1, r7, #13
 80008e8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80008ec:	2201      	movs	r2, #1
 80008ee:	4804      	ldr	r0, [pc, #16]	; (8000900 <write_register+0x54>)
 80008f0:	f002 fcce 	bl	8003290 <HAL_SPI_Transmit>
	cs_high();
 80008f4:	f7ff ff84 	bl	8000800 <cs_high>

	//return status;
}
 80008f8:	bf00      	nop
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	200000a0 	.word	0x200000a0

08000904 <write_MBRegister>:
//fonction qui permet de lire un multi-octet d'un registre
/* - reg : numero du registre où écrire
 * - pBuf : pointeur de la data à écrire
 * - count : nombre d'octets à écrire*/
static void write_MBRegister(uint8_t reg,uint8_t* pBuf, uint8_t count)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	6039      	str	r1, [r7, #0]
 800090e:	71fb      	strb	r3, [r7, #7]
 8000910:	4613      	mov	r3, r2
 8000912:	71bb      	strb	r3, [r7, #6]
	while(count--)
 8000914:	e008      	b.n	8000928 <write_MBRegister+0x24>
	{
		write_register(reg,*pBuf++);
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	1c5a      	adds	r2, r3, #1
 800091a:	603a      	str	r2, [r7, #0]
 800091c:	781a      	ldrb	r2, [r3, #0]
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	4611      	mov	r1, r2
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff ffc2 	bl	80008ac <write_register>
	while(count--)
 8000928:	79bb      	ldrb	r3, [r7, #6]
 800092a:	1e5a      	subs	r2, r3, #1
 800092c:	71ba      	strb	r2, [r7, #6]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d1f1      	bne.n	8000916 <write_MBRegister+0x12>
	}

}
 8000932:	bf00      	nop
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <nrf24l01p_prx_mode>:

//-----------*Sous-Fonctions des Registres, de Debug*---------------

//bit 0 (PRIM_RX) du registre CONFIG à mettre à 1 pour Rx control : PRX = 1
void nrf24l01p_prx_mode()
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
	uint8_t new_conf = read_register(NRF24L01P_REG_CONFIG);
 8000942:	2000      	movs	r0, #0
 8000944:	f7ff ff8c 	bl	8000860 <read_register>
 8000948:	4603      	mov	r3, r0
 800094a:	71fb      	strb	r3, [r7, #7]
	new_conf |= 1 << 0;        //la valeur du registre + 1 pour garder le contenu précédent
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	71fb      	strb	r3, [r7, #7]

	write_register(NRF24L01P_REG_CONFIG, new_conf);
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	4619      	mov	r1, r3
 8000958:	2000      	movs	r0, #0
 800095a:	f7ff ffa7 	bl	80008ac <write_register>
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <nrf24l01p_flush_rx_fifo>:
	write_register(NRF24L01P_REG_CONFIG, new_conf);
}


void nrf24l01p_flush_rx_fifo()
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af02      	add	r7, sp, #8
	uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 800096e:	23e2      	movs	r3, #226	; 0xe2
 8000970:	71fb      	strb	r3, [r7, #7]
	uint8_t status;

	cs_low();
 8000972:	f7ff ff51 	bl	8000818 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI,&command,&status,1,HAL_MAX_DELAY);
 8000976:	1dba      	adds	r2, r7, #6
 8000978:	1df9      	adds	r1, r7, #7
 800097a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	2301      	movs	r3, #1
 8000982:	4804      	ldr	r0, [pc, #16]	; (8000994 <nrf24l01p_flush_rx_fifo+0x2c>)
 8000984:	f002 ff22 	bl	80037cc <HAL_SPI_TransmitReceive>
	cs_high();
 8000988:	f7ff ff3a 	bl	8000800 <cs_high>
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	200000a0 	.word	0x200000a0

08000998 <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af02      	add	r7, sp, #8
	uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 800099e:	23e1      	movs	r3, #225	; 0xe1
 80009a0:	71fb      	strb	r3, [r7, #7]
	uint8_t status;

	cs_low();
 80009a2:	f7ff ff39 	bl	8000818 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI,&command,&status,1,HAL_MAX_DELAY);
 80009a6:	1dba      	adds	r2, r7, #6
 80009a8:	1df9      	adds	r1, r7, #7
 80009aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	2301      	movs	r3, #1
 80009b2:	4804      	ldr	r0, [pc, #16]	; (80009c4 <nrf24l01p_flush_tx_fifo+0x2c>)
 80009b4:	f002 ff0a 	bl	80037cc <HAL_SPI_TransmitReceive>
	cs_high();
 80009b8:	f7ff ff22 	bl	8000800 <cs_high>
}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	200000a0 	.word	0x200000a0

080009c8 <nrf24l01p_reset>:

//fonction de reset du module nrf24l01
void nrf24l01p_reset()
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
	uint8_t buffer[5] = {0xE7,0xE7,0xE7,0xE7,0xE7};
 80009ce:	4a3e      	ldr	r2, [pc, #248]	; (8000ac8 <nrf24l01p_reset+0x100>)
 80009d0:	f107 0308 	add.w	r3, r7, #8
 80009d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009d8:	6018      	str	r0, [r3, #0]
 80009da:	3304      	adds	r3, #4
 80009dc:	7019      	strb	r1, [r3, #0]
	uint8_t buf[5] = {0xC2,0xC2,0xC2,0xC2,0xC2};
 80009de:	4a3b      	ldr	r2, [pc, #236]	; (8000acc <nrf24l01p_reset+0x104>)
 80009e0:	463b      	mov	r3, r7
 80009e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009e6:	6018      	str	r0, [r3, #0]
 80009e8:	3304      	adds	r3, #4
 80009ea:	7019      	strb	r1, [r3, #0]
	//reset des pins
	cs_high();
 80009ec:	f7ff ff08 	bl	8000800 <cs_high>
	ce_low();
 80009f0:	f7ff ff2a 	bl	8000848 <ce_low>

	//reset des registres
	write_register(NRF24L01P_REG_CONFIG,0x08);
 80009f4:	2108      	movs	r1, #8
 80009f6:	2000      	movs	r0, #0
 80009f8:	f7ff ff58 	bl	80008ac <write_register>
	write_register(NRF24L01P_REG_EN_AA,0x6F);
 80009fc:	216f      	movs	r1, #111	; 0x6f
 80009fe:	2001      	movs	r0, #1
 8000a00:	f7ff ff54 	bl	80008ac <write_register>
	write_register(NRF24L01P_REG_EN_RXADDR,0x03);
 8000a04:	2103      	movs	r1, #3
 8000a06:	2002      	movs	r0, #2
 8000a08:	f7ff ff50 	bl	80008ac <write_register>
	write_register(NRF24L01P_REG_SETUP_AW,0x03);
 8000a0c:	2103      	movs	r1, #3
 8000a0e:	2003      	movs	r0, #3
 8000a10:	f7ff ff4c 	bl	80008ac <write_register>
	write_register(NRF24L01P_REG_SETUP_RETR,0x03);
 8000a14:	2103      	movs	r1, #3
 8000a16:	2004      	movs	r0, #4
 8000a18:	f7ff ff48 	bl	80008ac <write_register>
	write_register(NRF24L01P_REG_RF_CH,0x02);
 8000a1c:	2102      	movs	r1, #2
 8000a1e:	2005      	movs	r0, #5
 8000a20:	f7ff ff44 	bl	80008ac <write_register>
	write_register(NRF24L01P_REG_RF_SETUP,0x0E);
 8000a24:	210e      	movs	r1, #14
 8000a26:	2006      	movs	r0, #6
 8000a28:	f7ff ff40 	bl	80008ac <write_register>
	write_register(NRF24L01P_REG_STATUS,0x0E);
 8000a2c:	210e      	movs	r1, #14
 8000a2e:	2007      	movs	r0, #7
 8000a30:	f7ff ff3c 	bl	80008ac <write_register>
	write_MBRegister(NRF24L01P_REG_RX_ADDR_P0,buffer,5);
 8000a34:	f107 0308 	add.w	r3, r7, #8
 8000a38:	2205      	movs	r2, #5
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	200a      	movs	r0, #10
 8000a3e:	f7ff ff61 	bl	8000904 <write_MBRegister>
	write_MBRegister(NRF24L01P_REG_RX_ADDR_P1,buf,5);
 8000a42:	463b      	mov	r3, r7
 8000a44:	2205      	movs	r2, #5
 8000a46:	4619      	mov	r1, r3
 8000a48:	200b      	movs	r0, #11
 8000a4a:	f7ff ff5b 	bl	8000904 <write_MBRegister>
	write_register(NRF24L01P_REG_RX_ADDR_P2,0xC3);
 8000a4e:	21c3      	movs	r1, #195	; 0xc3
 8000a50:	200c      	movs	r0, #12
 8000a52:	f7ff ff2b 	bl	80008ac <write_register>
	write_register(NRF24L01P_REG_RX_ADDR_P3,0xC4);
 8000a56:	21c4      	movs	r1, #196	; 0xc4
 8000a58:	200d      	movs	r0, #13
 8000a5a:	f7ff ff27 	bl	80008ac <write_register>
	write_register(NRF24L01P_REG_RX_ADDR_P4,0xC5);
 8000a5e:	21c5      	movs	r1, #197	; 0xc5
 8000a60:	200e      	movs	r0, #14
 8000a62:	f7ff ff23 	bl	80008ac <write_register>
	write_register(NRF24L01P_REG_RX_ADDR_P5,0xC6);
 8000a66:	21c6      	movs	r1, #198	; 0xc6
 8000a68:	200f      	movs	r0, #15
 8000a6a:	f7ff ff1f 	bl	80008ac <write_register>
	write_register(NRF24L01P_REG_RX_PW_P0,0x00);
 8000a6e:	2100      	movs	r1, #0
 8000a70:	2011      	movs	r0, #17
 8000a72:	f7ff ff1b 	bl	80008ac <write_register>
	write_register(NRF24L01P_REG_RX_PW_P1,0x00);
 8000a76:	2100      	movs	r1, #0
 8000a78:	2012      	movs	r0, #18
 8000a7a:	f7ff ff17 	bl	80008ac <write_register>
	write_register(NRF24L01P_REG_RX_PW_P2,0x00);
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2013      	movs	r0, #19
 8000a82:	f7ff ff13 	bl	80008ac <write_register>
	write_register(NRF24L01P_REG_RX_PW_P3,0x00);
 8000a86:	2100      	movs	r1, #0
 8000a88:	2014      	movs	r0, #20
 8000a8a:	f7ff ff0f 	bl	80008ac <write_register>
	write_register(NRF24L01P_REG_RX_PW_P4,0x00);
 8000a8e:	2100      	movs	r1, #0
 8000a90:	2015      	movs	r0, #21
 8000a92:	f7ff ff0b 	bl	80008ac <write_register>
	write_register(NRF24L01P_REG_RX_PW_P5,0x00);
 8000a96:	2100      	movs	r1, #0
 8000a98:	2016      	movs	r0, #22
 8000a9a:	f7ff ff07 	bl	80008ac <write_register>
	write_register(NRF24L01P_REG_FIFO_STATUS,0x11);
 8000a9e:	2111      	movs	r1, #17
 8000aa0:	2017      	movs	r0, #23
 8000aa2:	f7ff ff03 	bl	80008ac <write_register>
	write_register(NRF24L01P_REG_DYNPD,0x00);
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	201c      	movs	r0, #28
 8000aaa:	f7ff feff 	bl	80008ac <write_register>
	write_register(NRF24L01P_REG_FEATURE,0x00);
 8000aae:	2100      	movs	r1, #0
 8000ab0:	201d      	movs	r0, #29
 8000ab2:	f7ff fefb 	bl	80008ac <write_register>

	//reset des FIFOs
	nrf24l01p_flush_tx_fifo();
 8000ab6:	f7ff ff6f 	bl	8000998 <nrf24l01p_flush_tx_fifo>
	nrf24l01p_flush_rx_fifo();
 8000aba:	f7ff ff55 	bl	8000968 <nrf24l01p_flush_rx_fifo>


}
 8000abe:	bf00      	nop
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	08005bdc 	.word	0x08005bdc
 8000acc:	08005be4 	.word	0x08005be4

08000ad0 <nrf24l01p_pwr_up>:



//On du module nrf : PWR_UP à 1 dans le registre CONFIG
void nrf24l01p_pwr_up()
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
	uint8_t new_conf = read_register(NRF24L01P_REG_CONFIG);
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f7ff fec2 	bl	8000860 <read_register>
 8000adc:	4603      	mov	r3, r0
 8000ade:	71fb      	strb	r3, [r7, #7]
	new_conf |= 1 << 1;
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	f043 0302 	orr.w	r3, r3, #2
 8000ae6:	71fb      	strb	r3, [r7, #7]
	write_register(NRF24L01P_REG_CONFIG,new_conf);
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	4619      	mov	r1, r3
 8000aec:	2000      	movs	r0, #0
 8000aee:	f7ff fedd 	bl	80008ac <write_register>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <nrf24l01p_read_rx_fifo>:
}


//Ecriture dans la FIFO :  en cas de réception d'un message
uint8_t nrf24l01p_read_rx_fifo (uint8_t rx_payload)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af02      	add	r7, sp, #8
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
	uint8_t command = NRF24L01P_CMD_R_RX_PAYLOAD;
 8000b06:	2361      	movs	r3, #97	; 0x61
 8000b08:	73fb      	strb	r3, [r7, #15]
	uint8_t status;

	cs_low();
 8000b0a:	f7ff fe85 	bl	8000818 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI,&command,&status,1,HAL_MAX_DELAY);
 8000b0e:	f107 020e 	add.w	r2, r7, #14
 8000b12:	f107 010f 	add.w	r1, r7, #15
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	4808      	ldr	r0, [pc, #32]	; (8000b40 <nrf24l01p_read_rx_fifo+0x44>)
 8000b20:	f002 fe54 	bl	80037cc <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(NRF24L01P_SPI,&rx_payload,NRF24L01P_PAYLOAD_LENGTH,HAL_MAX_DELAY);
 8000b24:	1df9      	adds	r1, r7, #7
 8000b26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b2a:	2208      	movs	r2, #8
 8000b2c:	4804      	ldr	r0, [pc, #16]	; (8000b40 <nrf24l01p_read_rx_fifo+0x44>)
 8000b2e:	f002 fd1d 	bl	800356c <HAL_SPI_Receive>
	cs_high();
 8000b32:	f7ff fe65 	bl	8000800 <cs_high>

	return status;
 8000b36:	7bbb      	ldrb	r3, [r7, #14]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	200000a0 	.word	0x200000a0

08000b44 <nrf24l01p_get_status>:

}

//Fonction permettant d'avoir le status du module nrf
uint8_t nrf24l01p_get_status()
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af02      	add	r7, sp, #8
	uint8_t command = NRF24L01P_CMD_NOP;
 8000b4a:	23ff      	movs	r3, #255	; 0xff
 8000b4c:	71fb      	strb	r3, [r7, #7]
	uint8_t status;

	cs_low();
 8000b4e:	f7ff fe63 	bl	8000818 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI,&command,&status,1,HAL_MAX_DELAY);
 8000b52:	1dba      	adds	r2, r7, #6
 8000b54:	1df9      	adds	r1, r7, #7
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b5a:	9300      	str	r3, [sp, #0]
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	4805      	ldr	r0, [pc, #20]	; (8000b74 <nrf24l01p_get_status+0x30>)
 8000b60:	f002 fe34 	bl	80037cc <HAL_SPI_TransmitReceive>
	cs_high();
 8000b64:	f7ff fe4c 	bl	8000800 <cs_high>

	return status;
 8000b68:	79bb      	ldrb	r3, [r7, #6]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200000a0 	.word	0x200000a0

08000b78 <nrf24l01p_rx_set_payload_widths>:
}



void nrf24l01p_rx_set_payload_widths(uint8_t reg_Pipe, widths bytes)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	460a      	mov	r2, r1
 8000b82:	71fb      	strb	r3, [r7, #7]
 8000b84:	4613      	mov	r3, r2
 8000b86:	71bb      	strb	r3, [r7, #6]
	write_register(reg_Pipe, bytes);
 8000b88:	79ba      	ldrb	r2, [r7, #6]
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff fe8c 	bl	80008ac <write_register>
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <nrf24l01p_clear_rx_dr>:


/*Data ready Rx FIFO interrupt :confirmation d'interruption quand une nouvelle donnée arrive.
Bit 6 du registre status à mettre à 1 pour l'initialiser*/
void nrf24l01p_clear_rx_dr()
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
	uint8_t new_status = nrf24l01p_get_status();
 8000ba2:	f7ff ffcf 	bl	8000b44 <nrf24l01p_get_status>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
	new_status |= 0x40;
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb0:	71fb      	strb	r3, [r7, #7]

	write_register(NRF24L01P_REG_STATUS, new_status);
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	2007      	movs	r0, #7
 8000bb8:	f7ff fe78 	bl	80008ac <write_register>
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <nrf24l01p_set_crc_length>:
}


//CRC encoding scheme. Bit 2 du registre config pour déterminer la taille d'octets à vérifier
void nrf24l01p_set_crc_length(length bytes)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
	uint8_t new_conf = read_register(NRF24L01P_REG_CONFIG);
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f7ff fe46 	bl	8000860 <read_register>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	73fb      	strb	r3, [r7, #15]

	switch (bytes)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d002      	beq.n	8000be4 <nrf24l01p_set_crc_length+0x20>
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d005      	beq.n	8000bee <nrf24l01p_set_crc_length+0x2a>
 8000be2:	e009      	b.n	8000bf8 <nrf24l01p_set_crc_length+0x34>
	{
	//CRCO à mettre à 0 quand la taille est d'un octet
	case 1 : new_conf &= 0xFB; break;
 8000be4:	7bfb      	ldrb	r3, [r7, #15]
 8000be6:	f023 0304 	bic.w	r3, r3, #4
 8000bea:	73fb      	strb	r3, [r7, #15]
 8000bec:	e004      	b.n	8000bf8 <nrf24l01p_set_crc_length+0x34>

	//CRCO à mettre à 1 quand la taille est de 2 octets
	case 2 : new_conf |= 1<<2; break;
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	f043 0304 	orr.w	r3, r3, #4
 8000bf4:	73fb      	strb	r3, [r7, #15]
 8000bf6:	bf00      	nop
	}

	write_register(NRF24L01P_REG_CONFIG,new_conf);
 8000bf8:	7bfb      	ldrb	r3, [r7, #15]
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f7ff fe55 	bl	80008ac <write_register>
}
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <nrf24l01p_set_adr_widths>:


//Registre SETUP_AW : setup of address widths. Les valeurs possibles : 3, 4 ou 5 octets
void nrf24l01p_set_adr_widths(widths bytes)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b082      	sub	sp, #8
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	4603      	mov	r3, r0
 8000c12:	71fb      	strb	r3, [r7, #7]
	write_register(NRF24L01P_REG_SETUP_AW,bytes - 2);
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	3b02      	subs	r3, #2
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f7ff fe45 	bl	80008ac <write_register>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <nrf24l01p_auto_retransmit_count>:


//Comptage du nombre de auto-retransmission en cas d'échec
void nrf24l01p_auto_retransmit_count(count cnt)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b084      	sub	sp, #16
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	4603      	mov	r3, r0
 8000c32:	71fb      	strb	r3, [r7, #7]
	uint8_t new_setup_rtr = read_register(NRF24L01P_REG_SETUP_RETR);
 8000c34:	2004      	movs	r0, #4
 8000c36:	f7ff fe13 	bl	8000860 <read_register>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	73fb      	strb	r3, [r7, #15]
	new_setup_rtr |= 0xF0;
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
 8000c40:	f063 030f 	orn	r3, r3, #15
 8000c44:	73fb      	strb	r3, [r7, #15]
	new_setup_rtr |= cnt;
 8000c46:	7bfa      	ldrb	r2, [r7, #15]
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	73fb      	strb	r3, [r7, #15]

	write_register(NRF24L01P_REG_SETUP_RETR,new_setup_rtr);
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
 8000c50:	4619      	mov	r1, r3
 8000c52:	2004      	movs	r0, #4
 8000c54:	f7ff fe2a 	bl	80008ac <write_register>

}
 8000c58:	bf00      	nop
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <nrf24l01p_auto_retransmit_delay>:

//delai d'auto-retransmission (sur 4 bits)
void nrf24l01p_auto_retransmit_delay(delay us)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	80fb      	strh	r3, [r7, #6]
	uint8_t new_setup_rtr = read_register(NRF24L01P_REG_SETUP_RETR);
 8000c6a:	2004      	movs	r0, #4
 8000c6c:	f7ff fdf8 	bl	8000860 <read_register>
 8000c70:	4603      	mov	r3, r0
 8000c72:	73fb      	strb	r3, [r7, #15]
	new_setup_rtr |= 0x0F;
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	f043 030f 	orr.w	r3, r3, #15
 8000c7a:	73fb      	strb	r3, [r7, #15]
	new_setup_rtr |= (us/250 - 1)<<4;
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
 8000c7e:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <nrf24l01p_auto_retransmit_delay+0x4c>)
 8000c80:	fba2 2303 	umull	r2, r3, r2, r3
 8000c84:	091b      	lsrs	r3, r3, #4
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	011b      	lsls	r3, r3, #4
 8000c8c:	b25a      	sxtb	r2, r3
 8000c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	b25b      	sxtb	r3, r3
 8000c96:	73fb      	strb	r3, [r7, #15]

	write_register(NRF24L01P_REG_SETUP_RETR,new_setup_rtr);
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	2004      	movs	r0, #4
 8000c9e:	f7ff fe05 	bl	80008ac <write_register>
}
 8000ca2:	bf00      	nop
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	10624dd3 	.word	0x10624dd3

08000cb0 <nrf24l01p_set_rf_channel>:

//Set frequency channel for nrf operations
void nrf24l01p_set_rf_channel(channel Mhz)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = Mhz - 2400; //F =2400 + rf_ch
 8000cba:	88fb      	ldrh	r3, [r7, #6]
 8000cbc:	f5a3 6316 	sub.w	r3, r3, #2400	; 0x960
 8000cc0:	81fb      	strh	r3, [r7, #14]

	write_register(NRF24L01P_REG_RF_CH,new_rf_ch);
 8000cc2:	89fb      	ldrh	r3, [r7, #14]
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	2005      	movs	r0, #5
 8000cca:	f7ff fdef 	bl	80008ac <write_register>
}
 8000cce:	bf00      	nop
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <nrf24l01p_set_rf_tx_output_pwr>:



//Set output power for Tx Mode
void nrf24l01p_set_rf_tx_output_pwr(output_power dBm)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b084      	sub	sp, #16
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	4603      	mov	r3, r0
 8000cde:	71fb      	strb	r3, [r7, #7]
	uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP);
 8000ce0:	2006      	movs	r0, #6
 8000ce2:	f7ff fdbd 	bl	8000860 <read_register>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	73fb      	strb	r3, [r7, #15]
	new_rf_setup &= 0xF9;
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	f023 0306 	bic.w	r3, r3, #6
 8000cf0:	73fb      	strb	r3, [r7, #15]
	new_rf_setup |= dBm<<1;
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	b25a      	sxtb	r2, r3
 8000cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	b25b      	sxtb	r3, r3
 8000d00:	73fb      	strb	r3, [r7, #15]

	write_register(NRF24L01P_REG_RF_SETUP,new_rf_setup);
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
 8000d04:	4619      	mov	r1, r3
 8000d06:	2006      	movs	r0, #6
 8000d08:	f7ff fdd0 	bl	80008ac <write_register>

}
 8000d0c:	bf00      	nop
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <nrf24l01p_set_rf_data_rate>:

//Set data transmission speed
void nrf24l01p_set_rf_data_rate(data_rate bps)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
	uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP);
 8000d1e:	2006      	movs	r0, #6
 8000d20:	f7ff fd9e 	bl	8000860 <read_register>
 8000d24:	4603      	mov	r3, r0
 8000d26:	73fb      	strb	r3, [r7, #15]
	new_rf_setup &= 0xD7;
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
 8000d2a:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000d2e:	73fb      	strb	r3, [r7, #15]

	switch(bps)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d00a      	beq.n	8000d4c <nrf24l01p_set_rf_data_rate+0x38>
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	dc0e      	bgt.n	8000d58 <nrf24l01p_set_rf_data_rate+0x44>
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d00b      	beq.n	8000d56 <nrf24l01p_set_rf_data_rate+0x42>
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d10a      	bne.n	8000d58 <nrf24l01p_set_rf_data_rate+0x44>
	{
	case _1Mbps : break;

	case _2Mbps : new_rf_setup |= 1 <<3; break;
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
 8000d44:	f043 0308 	orr.w	r3, r3, #8
 8000d48:	73fb      	strb	r3, [r7, #15]
 8000d4a:	e005      	b.n	8000d58 <nrf24l01p_set_rf_data_rate+0x44>

	case _250kbps : new_rf_setup |= 1 <<5; break;
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
 8000d4e:	f043 0320 	orr.w	r3, r3, #32
 8000d52:	73fb      	strb	r3, [r7, #15]
 8000d54:	e000      	b.n	8000d58 <nrf24l01p_set_rf_data_rate+0x44>
	case _1Mbps : break;
 8000d56:	bf00      	nop
	}

	write_register(NRF24L01P_REG_RF_SETUP,new_rf_setup);
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	2006      	movs	r0, #6
 8000d5e:	f7ff fda5 	bl	80008ac <write_register>
}
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <nrf24l01p_rx_init>:


//----------------------*Main Functions*-----------------------
//Initialisation de la réception
void nrf24l01p_rx_init(channel MHz, data_rate bps, uint8_t pipe)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	80fb      	strh	r3, [r7, #6]
 8000d76:	460b      	mov	r3, r1
 8000d78:	717b      	strb	r3, [r7, #5]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	713b      	strb	r3, [r7, #4]
	//Reset du module nrf
	nrf24l01p_reset();
 8000d7e:	f7ff fe23 	bl	80009c8 <nrf24l01p_reset>

	//Activation du mode réception
	nrf24l01p_prx_mode();
 8000d82:	f7ff fddb 	bl	800093c <nrf24l01p_prx_mode>
	nrf24l01p_pwr_up();
 8000d86:	f7ff fea3 	bl	8000ad0 <nrf24l01p_pwr_up>

	//taille du message
	nrf24l01p_rx_set_payload_widths(NRF24L01P_RX_PW_PIPE[pipe],NRF24L01P_PAYLOAD_LENGTH);
 8000d8a:	793b      	ldrb	r3, [r7, #4]
 8000d8c:	4a11      	ldr	r2, [pc, #68]	; (8000dd4 <nrf24l01p_rx_init+0x68>)
 8000d8e:	5cd3      	ldrb	r3, [r2, r3]
 8000d90:	2108      	movs	r1, #8
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff fef0 	bl	8000b78 <nrf24l01p_rx_set_payload_widths>

	//Configuration de RF Channel
	nrf24l01p_set_rf_channel(MHz);
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff ff88 	bl	8000cb0 <nrf24l01p_set_rf_channel>
	nrf24l01p_set_rf_data_rate(bps);
 8000da0:	797b      	ldrb	r3, [r7, #5]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff ffb6 	bl	8000d14 <nrf24l01p_set_rf_data_rate>
	nrf24l01p_set_rf_tx_output_pwr(_0dBm);
 8000da8:	2003      	movs	r0, #3
 8000daa:	f7ff ff94 	bl	8000cd6 <nrf24l01p_set_rf_tx_output_pwr>

	//Taille du message (en octet)
	nrf24l01p_set_crc_length(1);
 8000dae:	2001      	movs	r0, #1
 8000db0:	f7ff ff08 	bl	8000bc4 <nrf24l01p_set_crc_length>
	nrf24l01p_set_adr_widths(5);
 8000db4:	2005      	movs	r0, #5
 8000db6:	f7ff ff28 	bl	8000c0a <nrf24l01p_set_adr_widths>

	//délai et nombre de réception en cas d'échec
	nrf24l01p_auto_retransmit_count(3);
 8000dba:	2003      	movs	r0, #3
 8000dbc:	f7ff ff35 	bl	8000c2a <nrf24l01p_auto_retransmit_count>
	nrf24l01p_auto_retransmit_delay(250);
 8000dc0:	20fa      	movs	r0, #250	; 0xfa
 8000dc2:	f7ff ff4d 	bl	8000c60 <nrf24l01p_auto_retransmit_delay>

	//autorisation de fonctionnement
	ce_high();
 8000dc6:	f7ff fd33 	bl	8000830 <ce_high>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	08005c14 	.word	0x08005c14

08000dd8 <nrf24l01p_rx_receive>:
}


//réception
void nrf24l01p_rx_receive(uint8_t rx_payload)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
	nrf24l01p_read_rx_fifo(rx_payload);
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fe89 	bl	8000afc <nrf24l01p_read_rx_fifo>
	nrf24l01p_clear_rx_dr();
 8000dea:	f7ff fed7 	bl	8000b9c <nrf24l01p_clear_rx_dr>

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000dee:	2102      	movs	r1, #2
 8000df0:	4803      	ldr	r0, [pc, #12]	; (8000e00 <nrf24l01p_rx_receive+0x28>)
 8000df2:	f000 fe23 	bl	8001a3c <HAL_GPIO_TogglePin>
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	48000400 	.word	0x48000400

08000e04 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <LL_AHB2_GRP1_EnableClock>:
{
 8000e12:	b480      	push	{r7}
 8000e14:	b085      	sub	sp, #20
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4013      	ands	r3, r2
 8000e34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e36:	68fb      	ldr	r3, [r7, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4013      	ands	r3, r2
 8000e66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e68:	68fb      	ldr	r3, [r7, #12]
}
 8000e6a:	bf00      	nop
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
	...

08000e78 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <MX_SPI1_Init+0x74>)
 8000e7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ef0 <MX_SPI1_Init+0x78>)
 8000e80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e82:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <MX_SPI1_Init+0x74>)
 8000e84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <MX_SPI1_Init+0x74>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e90:	4b16      	ldr	r3, [pc, #88]	; (8000eec <MX_SPI1_Init+0x74>)
 8000e92:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e96:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e98:	4b14      	ldr	r3, [pc, #80]	; (8000eec <MX_SPI1_Init+0x74>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e9e:	4b13      	ldr	r3, [pc, #76]	; (8000eec <MX_SPI1_Init+0x74>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <MX_SPI1_Init+0x74>)
 8000ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eaa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000eac:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <MX_SPI1_Init+0x74>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <MX_SPI1_Init+0x74>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <MX_SPI1_Init+0x74>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <MX_SPI1_Init+0x74>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <MX_SPI1_Init+0x74>)
 8000ec6:	2207      	movs	r2, #7
 8000ec8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <MX_SPI1_Init+0x74>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <MX_SPI1_Init+0x74>)
 8000ed2:	2208      	movs	r2, #8
 8000ed4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <MX_SPI1_Init+0x74>)
 8000ed8:	f002 f937 	bl	800314a <HAL_SPI_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ee2:	f7ff fc88 	bl	80007f6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200000a0 	.word	0x200000a0
 8000ef0:	40013000 	.word	0x40013000

08000ef4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 030c 	add.w	r3, r7, #12
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a18      	ldr	r2, [pc, #96]	; (8000f74 <HAL_SPI_MspInit+0x80>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d129      	bne.n	8000f6a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f16:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000f1a:	f7ff ff93 	bl	8000e44 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f7ff ff77 	bl	8000e12 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA5     ------> SPI1_MOSI
    PA11     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11;
 8000f24:	f640 0302 	movw	r3, #2050	; 0x802
 8000f28:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f36:	2305      	movs	r3, #5
 8000f38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3a:	f107 030c 	add.w	r3, r7, #12
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f44:	f000 fbfa 	bl	800173c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f48:	2320      	movs	r3, #32
 8000f4a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI1;
 8000f58:	2304      	movs	r3, #4
 8000f5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	4619      	mov	r1, r3
 8000f62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f66:	f000 fbe9 	bl	800173c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	3720      	adds	r7, #32
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40013000 	.word	0x40013000

08000f78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <NMI_Handler+0x4>

08000f8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <HardFault_Handler+0x4>

08000f92 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <MemManage_Handler+0x4>

08000f98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <BusFault_Handler+0x4>

08000f9e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <UsageFault_Handler+0x4>

08000fa4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd2:	f000 fa53 	bl	800147c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 8000fde:	2008      	movs	r0, #8
 8000fe0:	f000 fd46 	bl	8001a70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	e00a      	b.n	8001010 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ffa:	f3af 8000 	nop.w
 8000ffe:	4601      	mov	r1, r0
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	1c5a      	adds	r2, r3, #1
 8001004:	60ba      	str	r2, [r7, #8]
 8001006:	b2ca      	uxtb	r2, r1
 8001008:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	3301      	adds	r3, #1
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	697a      	ldr	r2, [r7, #20]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	429a      	cmp	r2, r3
 8001016:	dbf0      	blt.n	8000ffa <_read+0x12>
  }

  return len;
 8001018:	687b      	ldr	r3, [r7, #4]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b086      	sub	sp, #24
 8001026:	af00      	add	r7, sp, #0
 8001028:	60f8      	str	r0, [r7, #12]
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
 8001032:	e009      	b.n	8001048 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	1c5a      	adds	r2, r3, #1
 8001038:	60ba      	str	r2, [r7, #8]
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fb3d 	bl	80006bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	3301      	adds	r3, #1
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	697a      	ldr	r2, [r7, #20]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	429a      	cmp	r2, r3
 800104e:	dbf1      	blt.n	8001034 <_write+0x12>
  }
  return len;
 8001050:	687b      	ldr	r3, [r7, #4]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <_close>:

int _close(int file)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001062:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001082:	605a      	str	r2, [r3, #4]
  return 0;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <_isatty>:

int _isatty(int file)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800109a:	2301      	movs	r3, #1
}
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010cc:	4a14      	ldr	r2, [pc, #80]	; (8001120 <_sbrk+0x5c>)
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <_sbrk+0x60>)
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d8:	4b13      	ldr	r3, [pc, #76]	; (8001128 <_sbrk+0x64>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d102      	bne.n	80010e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <_sbrk+0x64>)
 80010e2:	4a12      	ldr	r2, [pc, #72]	; (800112c <_sbrk+0x68>)
 80010e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <_sbrk+0x64>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d207      	bcs.n	8001104 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f4:	f003 fd14 	bl	8004b20 <__errno>
 80010f8:	4603      	mov	r3, r0
 80010fa:	220c      	movs	r2, #12
 80010fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001102:	e009      	b.n	8001118 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <_sbrk+0x64>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800110a:	4b07      	ldr	r3, [pc, #28]	; (8001128 <_sbrk+0x64>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	4a05      	ldr	r2, [pc, #20]	; (8001128 <_sbrk+0x64>)
 8001114:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001116:	68fb      	ldr	r3, [r7, #12]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20003000 	.word	0x20003000
 8001124:	00000400 	.word	0x00000400
 8001128:	20000104 	.word	0x20000104
 800112c:	200001b0 	.word	0x200001b0

08001130 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001134:	4b22      	ldr	r3, [pc, #136]	; (80011c0 <SystemInit+0x90>)
 8001136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800113a:	4a21      	ldr	r2, [pc, #132]	; (80011c0 <SystemInit+0x90>)
 800113c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001140:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001158:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800115c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800115e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001168:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <SystemInit+0x94>)
 800116a:	4013      	ands	r3, r2
 800116c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800116e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001176:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800117a:	f023 0305 	bic.w	r3, r3, #5
 800117e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001186:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800118a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800118e:	f023 0301 	bic.w	r3, r3, #1
 8001192:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800119a:	4a0b      	ldr	r2, [pc, #44]	; (80011c8 <SystemInit+0x98>)
 800119c:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800119e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b2:	2200      	movs	r2, #0
 80011b4:	619a      	str	r2, [r3, #24]
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00
 80011c4:	faf6fefb 	.word	0xfaf6fefb
 80011c8:	22041000 	.word	0x22041000

080011cc <LL_AHB2_GRP1_EnableClock>:
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4013      	ands	r3, r2
 80011ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011f0:	68fb      	ldr	r3, [r7, #12]
}
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <LL_APB2_GRP1_EnableClock>:
{
 80011fe:	b480      	push	{r7}
 8001200:	b085      	sub	sp, #20
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800120a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800120c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4313      	orrs	r3, r2
 8001214:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800121a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4013      	ands	r3, r2
 8001220:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001222:	68fb      	ldr	r3, [r7, #12]
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001234:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <MX_USART1_UART_Init+0x90>)
 8001236:	4a23      	ldr	r2, [pc, #140]	; (80012c4 <MX_USART1_UART_Init+0x94>)
 8001238:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800123a:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <MX_USART1_UART_Init+0x90>)
 800123c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001240:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001242:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <MX_USART1_UART_Init+0x90>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001248:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <MX_USART1_UART_Init+0x90>)
 800124a:	2200      	movs	r2, #0
 800124c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800124e:	4b1c      	ldr	r3, [pc, #112]	; (80012c0 <MX_USART1_UART_Init+0x90>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001254:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <MX_USART1_UART_Init+0x90>)
 8001256:	220c      	movs	r2, #12
 8001258:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125a:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <MX_USART1_UART_Init+0x90>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001260:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <MX_USART1_UART_Init+0x90>)
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <MX_USART1_UART_Init+0x90>)
 8001268:	2200      	movs	r2, #0
 800126a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800126c:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <MX_USART1_UART_Init+0x90>)
 800126e:	2200      	movs	r2, #0
 8001270:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001272:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <MX_USART1_UART_Init+0x90>)
 8001274:	2200      	movs	r2, #0
 8001276:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001278:	4811      	ldr	r0, [pc, #68]	; (80012c0 <MX_USART1_UART_Init+0x90>)
 800127a:	f002 fe97 	bl	8003fac <HAL_UART_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001284:	f7ff fab7 	bl	80007f6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001288:	2100      	movs	r1, #0
 800128a:	480d      	ldr	r0, [pc, #52]	; (80012c0 <MX_USART1_UART_Init+0x90>)
 800128c:	f003 fb7d 	bl	800498a <HAL_UARTEx_SetTxFifoThreshold>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001296:	f7ff faae 	bl	80007f6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800129a:	2100      	movs	r1, #0
 800129c:	4808      	ldr	r0, [pc, #32]	; (80012c0 <MX_USART1_UART_Init+0x90>)
 800129e:	f003 fbb2 	bl	8004a06 <HAL_UARTEx_SetRxFifoThreshold>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80012a8:	f7ff faa5 	bl	80007f6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80012ac:	4804      	ldr	r0, [pc, #16]	; (80012c0 <MX_USART1_UART_Init+0x90>)
 80012ae:	f003 fb33 	bl	8004918 <HAL_UARTEx_DisableFifoMode>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80012b8:	f7ff fa9d 	bl	80007f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000108 	.word	0x20000108
 80012c4:	40013800 	.word	0x40013800

080012c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b094      	sub	sp, #80	; 0x50
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	2230      	movs	r2, #48	; 0x30
 80012e6:	2100      	movs	r1, #0
 80012e8:	4618      	mov	r0, r3
 80012ea:	f003 fc43 	bl	8004b74 <memset>
  if(uartHandle->Instance==USART1)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a17      	ldr	r2, [pc, #92]	; (8001350 <HAL_UART_MspInit+0x88>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d126      	bne.n	8001346 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012f8:	2301      	movs	r3, #1
 80012fa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001300:	f107 030c 	add.w	r3, r7, #12
 8001304:	4618      	mov	r0, r3
 8001306:	f001 fe24 	bl	8002f52 <HAL_RCCEx_PeriphCLKConfig>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001310:	f7ff fa71 	bl	80007f6 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001314:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001318:	f7ff ff71 	bl	80011fe <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131c:	2001      	movs	r0, #1
 800131e:	f7ff ff55 	bl	80011cc <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001322:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001326:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001334:	2307      	movs	r3, #7
 8001336:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001338:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800133c:	4619      	mov	r1, r3
 800133e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001342:	f000 f9fb 	bl	800173c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001346:	bf00      	nop
 8001348:	3750      	adds	r7, #80	; 0x50
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40013800 	.word	0x40013800

08001354 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001354:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001356:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001358:	3304      	adds	r3, #4

0800135a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800135a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800135e:	d3f9      	bcc.n	8001354 <CopyDataInit>
  bx lr
 8001360:	4770      	bx	lr

08001362 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001362:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001364:	3004      	adds	r0, #4

08001366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001366:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001368:	d3fb      	bcc.n	8001362 <FillZerobss>
  bx lr
 800136a:	4770      	bx	lr

0800136c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800136c:	480c      	ldr	r0, [pc, #48]	; (80013a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800136e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001370:	f7ff fede 	bl	8001130 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001374:	480b      	ldr	r0, [pc, #44]	; (80013a4 <LoopForever+0x6>)
 8001376:	490c      	ldr	r1, [pc, #48]	; (80013a8 <LoopForever+0xa>)
 8001378:	4a0c      	ldr	r2, [pc, #48]	; (80013ac <LoopForever+0xe>)
 800137a:	2300      	movs	r3, #0
 800137c:	f7ff ffed 	bl	800135a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001380:	480b      	ldr	r0, [pc, #44]	; (80013b0 <LoopForever+0x12>)
 8001382:	490c      	ldr	r1, [pc, #48]	; (80013b4 <LoopForever+0x16>)
 8001384:	4a0c      	ldr	r2, [pc, #48]	; (80013b8 <LoopForever+0x1a>)
 8001386:	2300      	movs	r3, #0
 8001388:	f7ff ffe7 	bl	800135a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800138c:	480b      	ldr	r0, [pc, #44]	; (80013bc <LoopForever+0x1e>)
 800138e:	490c      	ldr	r1, [pc, #48]	; (80013c0 <LoopForever+0x22>)
 8001390:	2300      	movs	r3, #0
 8001392:	f7ff ffe8 	bl	8001366 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001396:	f003 fbc9 	bl	8004b2c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800139a:	f7ff f9a1 	bl	80006e0 <main>

0800139e <LoopForever>:

LoopForever:
  b LoopForever
 800139e:	e7fe      	b.n	800139e <LoopForever>
  ldr   r0, =_estack
 80013a0:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 80013a4:	20000008 	.word	0x20000008
 80013a8:	20000078 	.word	0x20000078
 80013ac:	08005d8c 	.word	0x08005d8c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80013b0:	20030000 	.word	0x20030000
 80013b4:	20030000 	.word	0x20030000
 80013b8:	08005dfc 	.word	0x08005dfc
  INIT_BSS _sbss, _ebss
 80013bc:	20000078 	.word	0x20000078
 80013c0:	200001b0 	.word	0x200001b0

080013c4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013c4:	e7fe      	b.n	80013c4 <ADC1_IRQHandler>
	...

080013c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d2:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <HAL_Init+0x3c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <HAL_Init+0x3c>)
 80013d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013dc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013de:	2003      	movs	r0, #3
 80013e0:	f000 f96c 	bl	80016bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013e4:	2000      	movs	r0, #0
 80013e6:	f000 f80f 	bl	8001408 <HAL_InitTick>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d002      	beq.n	80013f6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	71fb      	strb	r3, [r7, #7]
 80013f4:	e001      	b.n	80013fa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013f6:	f7ff fdbf 	bl	8000f78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013fa:	79fb      	ldrb	r3, [r7, #7]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	58004000 	.word	0x58004000

08001408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001410:	2300      	movs	r3, #0
 8001412:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001414:	4b17      	ldr	r3, [pc, #92]	; (8001474 <HAL_InitTick+0x6c>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d024      	beq.n	8001466 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800141c:	f001 fb74 	bl	8002b08 <HAL_RCC_GetHCLKFreq>
 8001420:	4602      	mov	r2, r0
 8001422:	4b14      	ldr	r3, [pc, #80]	; (8001474 <HAL_InitTick+0x6c>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	4619      	mov	r1, r3
 8001428:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001430:	fbb2 f3f3 	udiv	r3, r2, r3
 8001434:	4618      	mov	r0, r3
 8001436:	f000 f974 	bl	8001722 <HAL_SYSTICK_Config>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d10f      	bne.n	8001460 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b0f      	cmp	r3, #15
 8001444:	d809      	bhi.n	800145a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001446:	2200      	movs	r2, #0
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800144e:	f000 f940 	bl	80016d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001452:	4a09      	ldr	r2, [pc, #36]	; (8001478 <HAL_InitTick+0x70>)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	e007      	b.n	800146a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	73fb      	strb	r3, [r7, #15]
 800145e:	e004      	b.n	800146a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	73fb      	strb	r3, [r7, #15]
 8001464:	e001      	b.n	800146a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800146a:	7bfb      	ldrb	r3, [r7, #15]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000010 	.word	0x20000010
 8001478:	2000000c 	.word	0x2000000c

0800147c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_IncTick+0x20>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	461a      	mov	r2, r3
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_IncTick+0x24>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4413      	add	r3, r2
 800148c:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <HAL_IncTick+0x24>)
 800148e:	6013      	str	r3, [r2, #0]
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	20000010 	.word	0x20000010
 80014a0:	2000019c 	.word	0x2000019c

080014a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return uwTick;
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <HAL_GetTick+0x14>)
 80014aa:	681b      	ldr	r3, [r3, #0]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	2000019c 	.word	0x2000019c

080014bc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <HAL_GetTickPrio+0x14>)
 80014c2:	681b      	ldr	r3, [r3, #0]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	2000000c 	.word	0x2000000c

080014d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014dc:	f7ff ffe2 	bl	80014a4 <HAL_GetTick>
 80014e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014ec:	d005      	beq.n	80014fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ee:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <HAL_Delay+0x44>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4413      	add	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014fa:	bf00      	nop
 80014fc:	f7ff ffd2 	bl	80014a4 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	429a      	cmp	r2, r3
 800150a:	d8f7      	bhi.n	80014fc <HAL_Delay+0x28>
  {
  }
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000010 	.word	0x20000010

0800151c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001538:	4013      	ands	r3, r2
 800153a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001544:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800154c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154e:	4a04      	ldr	r2, [pc, #16]	; (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	60d3      	str	r3, [r2, #12]
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001568:	4b04      	ldr	r3, [pc, #16]	; (800157c <__NVIC_GetPriorityGrouping+0x18>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	f003 0307 	and.w	r3, r3, #7
}
 8001572:	4618      	mov	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	2b00      	cmp	r3, #0
 8001590:	db0b      	blt.n	80015aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	f003 021f 	and.w	r2, r3, #31
 8001598:	4907      	ldr	r1, [pc, #28]	; (80015b8 <__NVIC_EnableIRQ+0x38>)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	095b      	lsrs	r3, r3, #5
 80015a0:	2001      	movs	r0, #1
 80015a2:	fa00 f202 	lsl.w	r2, r0, r2
 80015a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000e100 	.word	0xe000e100

080015bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	6039      	str	r1, [r7, #0]
 80015c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	db0a      	blt.n	80015e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	490c      	ldr	r1, [pc, #48]	; (8001608 <__NVIC_SetPriority+0x4c>)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	0112      	lsls	r2, r2, #4
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	440b      	add	r3, r1
 80015e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e4:	e00a      	b.n	80015fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4908      	ldr	r1, [pc, #32]	; (800160c <__NVIC_SetPriority+0x50>)
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	3b04      	subs	r3, #4
 80015f4:	0112      	lsls	r2, r2, #4
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	440b      	add	r3, r1
 80015fa:	761a      	strb	r2, [r3, #24]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000e100 	.word	0xe000e100
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001610:	b480      	push	{r7}
 8001612:	b089      	sub	sp, #36	; 0x24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f1c3 0307 	rsb	r3, r3, #7
 800162a:	2b04      	cmp	r3, #4
 800162c:	bf28      	it	cs
 800162e:	2304      	movcs	r3, #4
 8001630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3304      	adds	r3, #4
 8001636:	2b06      	cmp	r3, #6
 8001638:	d902      	bls.n	8001640 <NVIC_EncodePriority+0x30>
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3b03      	subs	r3, #3
 800163e:	e000      	b.n	8001642 <NVIC_EncodePriority+0x32>
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43da      	mvns	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	401a      	ands	r2, r3
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001658:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	43d9      	mvns	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	4313      	orrs	r3, r2
         );
}
 800166a:	4618      	mov	r0, r3
 800166c:	3724      	adds	r7, #36	; 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001688:	d301      	bcc.n	800168e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800168a:	2301      	movs	r3, #1
 800168c:	e00f      	b.n	80016ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800168e:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <SysTick_Config+0x40>)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3b01      	subs	r3, #1
 8001694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001696:	210f      	movs	r1, #15
 8001698:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800169c:	f7ff ff8e 	bl	80015bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <SysTick_Config+0x40>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016a6:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <SysTick_Config+0x40>)
 80016a8:	2207      	movs	r2, #7
 80016aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	e000e010 	.word	0xe000e010

080016bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff ff29 	bl	800151c <__NVIC_SetPriorityGrouping>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b086      	sub	sp, #24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
 80016de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016e0:	f7ff ff40 	bl	8001564 <__NVIC_GetPriorityGrouping>
 80016e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	6978      	ldr	r0, [r7, #20]
 80016ec:	f7ff ff90 	bl	8001610 <NVIC_EncodePriority>
 80016f0:	4602      	mov	r2, r0
 80016f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff5f 	bl	80015bc <__NVIC_SetPriority>
}
 80016fe:	bf00      	nop
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	4603      	mov	r3, r0
 800170e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff33 	bl	8001580 <__NVIC_EnableIRQ>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff ffa4 	bl	8001678 <SysTick_Config>
 8001730:	4603      	mov	r3, r0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800173c:	b480      	push	{r7}
 800173e:	b087      	sub	sp, #28
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800174a:	e146      	b.n	80019da <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	2101      	movs	r1, #1
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	fa01 f303 	lsl.w	r3, r1, r3
 8001758:	4013      	ands	r3, r2
 800175a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 8138 	beq.w	80019d4 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	2b01      	cmp	r3, #1
 800176e:	d005      	beq.n	800177c <HAL_GPIO_Init+0x40>
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d130      	bne.n	80017de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	2203      	movs	r2, #3
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4013      	ands	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68da      	ldr	r2, [r3, #12]
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017b2:	2201      	movs	r2, #1
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	4013      	ands	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	091b      	lsrs	r3, r3, #4
 80017c8:	f003 0201 	and.w	r2, r3, #1
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d017      	beq.n	800181a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	2203      	movs	r2, #3
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4313      	orrs	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d123      	bne.n	800186e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	08da      	lsrs	r2, r3, #3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3208      	adds	r2, #8
 800182e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001832:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	220f      	movs	r2, #15
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4013      	ands	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	691a      	ldr	r2, [r3, #16]
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	08da      	lsrs	r2, r3, #3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3208      	adds	r2, #8
 8001868:	6939      	ldr	r1, [r7, #16]
 800186a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	2203      	movs	r2, #3
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f003 0203 	and.w	r2, r3, #3
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 8092 	beq.w	80019d4 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80018b0:	4a51      	ldr	r2, [pc, #324]	; (80019f8 <HAL_GPIO_Init+0x2bc>)
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	089b      	lsrs	r3, r3, #2
 80018b6:	3302      	adds	r3, #2
 80018b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	220f      	movs	r2, #15
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018da:	d013      	beq.n	8001904 <HAL_GPIO_Init+0x1c8>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a47      	ldr	r2, [pc, #284]	; (80019fc <HAL_GPIO_Init+0x2c0>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d00d      	beq.n	8001900 <HAL_GPIO_Init+0x1c4>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a46      	ldr	r2, [pc, #280]	; (8001a00 <HAL_GPIO_Init+0x2c4>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d007      	beq.n	80018fc <HAL_GPIO_Init+0x1c0>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a45      	ldr	r2, [pc, #276]	; (8001a04 <HAL_GPIO_Init+0x2c8>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d101      	bne.n	80018f8 <HAL_GPIO_Init+0x1bc>
 80018f4:	2304      	movs	r3, #4
 80018f6:	e006      	b.n	8001906 <HAL_GPIO_Init+0x1ca>
 80018f8:	2307      	movs	r3, #7
 80018fa:	e004      	b.n	8001906 <HAL_GPIO_Init+0x1ca>
 80018fc:	2302      	movs	r3, #2
 80018fe:	e002      	b.n	8001906 <HAL_GPIO_Init+0x1ca>
 8001900:	2301      	movs	r3, #1
 8001902:	e000      	b.n	8001906 <HAL_GPIO_Init+0x1ca>
 8001904:	2300      	movs	r3, #0
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	f002 0203 	and.w	r2, r2, #3
 800190c:	0092      	lsls	r2, r2, #2
 800190e:	4093      	lsls	r3, r2
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	4313      	orrs	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001916:	4938      	ldr	r1, [pc, #224]	; (80019f8 <HAL_GPIO_Init+0x2bc>)
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	089b      	lsrs	r3, r3, #2
 800191c:	3302      	adds	r3, #2
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001924:	4b38      	ldr	r3, [pc, #224]	; (8001a08 <HAL_GPIO_Init+0x2cc>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	43db      	mvns	r3, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	4313      	orrs	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001948:	4a2f      	ldr	r2, [pc, #188]	; (8001a08 <HAL_GPIO_Init+0x2cc>)
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800194e:	4b2e      	ldr	r3, [pc, #184]	; (8001a08 <HAL_GPIO_Init+0x2cc>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	43db      	mvns	r3, r3
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4013      	ands	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4313      	orrs	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001972:	4a25      	ldr	r2, [pc, #148]	; (8001a08 <HAL_GPIO_Init+0x2cc>)
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001978:	4b23      	ldr	r3, [pc, #140]	; (8001a08 <HAL_GPIO_Init+0x2cc>)
 800197a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800197e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	43db      	mvns	r3, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4013      	ands	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4313      	orrs	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800199e:	4a1a      	ldr	r2, [pc, #104]	; (8001a08 <HAL_GPIO_Init+0x2cc>)
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80019a6:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <HAL_GPIO_Init+0x2cc>)
 80019a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	43db      	mvns	r3, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019cc:	4a0e      	ldr	r2, [pc, #56]	; (8001a08 <HAL_GPIO_Init+0x2cc>)
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	3301      	adds	r3, #1
 80019d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	fa22 f303 	lsr.w	r3, r2, r3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f47f aeb1 	bne.w	800174c <HAL_GPIO_Init+0x10>
  }
}
 80019ea:	bf00      	nop
 80019ec:	bf00      	nop
 80019ee:	371c      	adds	r7, #28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	40010000 	.word	0x40010000
 80019fc:	48000400 	.word	0x48000400
 8001a00:	48000800 	.word	0x48000800
 8001a04:	48001000 	.word	0x48001000
 8001a08:	58000800 	.word	0x58000800

08001a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	807b      	strh	r3, [r7, #2]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a1c:	787b      	ldrb	r3, [r7, #1]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a22:	887a      	ldrh	r2, [r7, #2]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a28:	e002      	b.n	8001a30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a2a:	887a      	ldrh	r2, [r7, #2]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a4e:	887a      	ldrh	r2, [r7, #2]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4013      	ands	r3, r2
 8001a54:	041a      	lsls	r2, r3, #16
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	43d9      	mvns	r1, r3
 8001a5a:	887b      	ldrh	r3, [r7, #2]
 8001a5c:	400b      	ands	r3, r1
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	619a      	str	r2, [r3, #24]
}
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	88fb      	ldrh	r3, [r7, #6]
 8001a80:	4013      	ands	r3, r2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d006      	beq.n	8001a94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a86:	4a05      	ldr	r2, [pc, #20]	; (8001a9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a88:	88fb      	ldrh	r3, [r7, #6]
 8001a8a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a8c:	88fb      	ldrh	r3, [r7, #6]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fd7c 	bl	800058c <HAL_GPIO_EXTI_Callback>
  }
}
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	58000800 	.word	0x58000800

08001aa0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a04      	ldr	r2, [pc, #16]	; (8001abc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aae:	6013      	str	r3, [r2, #0]
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	58000400 	.word	0x58000400

08001ac0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ace:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ad2:	d101      	bne.n	8001ad8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e000      	b.n	8001ada <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <LL_RCC_HSE_Enable>:
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af6:	6013      	str	r3, [r2, #0]
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <LL_RCC_HSE_Disable>:
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b14:	6013      	str	r3, [r2, #0]
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <LL_RCC_HSE_IsReady>:
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b32:	d101      	bne.n	8001b38 <LL_RCC_HSE_IsReady+0x18>
 8001b34:	2301      	movs	r3, #1
 8001b36:	e000      	b.n	8001b3a <LL_RCC_HSE_IsReady+0x1a>
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_RCC_HSI_Enable>:
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b56:	6013      	str	r3, [r2, #0]
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <LL_RCC_HSI_Disable>:
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b74:	6013      	str	r3, [r2, #0]
}
 8001b76:	bf00      	nop
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <LL_RCC_HSI_IsReady>:
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b92:	d101      	bne.n	8001b98 <LL_RCC_HSI_IsReady+0x18>
 8001b94:	2301      	movs	r3, #1
 8001b96:	e000      	b.n	8001b9a <LL_RCC_HSI_IsReady+0x1a>
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	061b      	lsls	r3, r3, #24
 8001bba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	604b      	str	r3, [r1, #4]
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <LL_RCC_LSE_Enable>:
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001be6:	bf00      	nop
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <LL_RCC_LSE_Disable>:
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c00:	f023 0301 	bic.w	r3, r3, #1
 8001c04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <LL_RCC_LSE_EnableBypass>:
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c22:	f043 0304 	orr.w	r3, r3, #4
 8001c26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <LL_RCC_LSE_DisableBypass>:
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c44:	f023 0304 	bic.w	r3, r3, #4
 8001c48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d101      	bne.n	8001c6e <LL_RCC_LSE_IsReady+0x18>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <LL_RCC_LSE_IsReady+0x1a>
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ca8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d101      	bne.n	8001cd6 <LL_RCC_LSI1_IsReady+0x18>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <LL_RCC_LSI1_IsReady+0x1a>
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cf2:	f043 0304 	orr.w	r3, r3, #4
 8001cf6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d14:	f023 0304 	bic.w	r3, r3, #4
 8001d18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	d101      	bne.n	8001d3e <LL_RCC_LSI2_IsReady+0x18>
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <LL_RCC_LSI2_IsReady+0x1a>
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d5a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	021b      	lsls	r3, r3, #8
 8001d62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d66:	4313      	orrs	r3, r2
 8001d68:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	6013      	str	r3, [r2, #0]
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001da4:	f023 0301 	bic.w	r3, r3, #1
 8001da8:	6013      	str	r3, [r2, #0]
}
 8001daa:	bf00      	nop
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d101      	bne.n	8001dca <LL_RCC_MSI_IsReady+0x16>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <LL_RCC_MSI_IsReady+0x18>
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	600b      	str	r3, [r1, #0]
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e0e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2bb0      	cmp	r3, #176	; 0xb0
 8001e14:	d901      	bls.n	8001e1a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001e16:	23b0      	movs	r3, #176	; 0xb0
 8001e18:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001e1a:	687b      	ldr	r3, [r7, #4]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	021b      	lsls	r3, r3, #8
 8001e3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e42:	4313      	orrs	r3, r2
 8001e44:	604b      	str	r3, [r1, #4]
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f023 0203 	bic.w	r2, r3, #3
 8001e64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	608b      	str	r3, [r1, #8]
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 030c 	and.w	r3, r3, #12
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	608b      	str	r3, [r1, #8]
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001eca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ece:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ef6:	f023 020f 	bic.w	r2, r3, #15
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f02:	4313      	orrs	r3, r2
 8001f04:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	608b      	str	r3, [r1, #8]
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	608b      	str	r3, [r1, #8]
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f84:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f88:	011b      	lsls	r3, r3, #4
 8001f8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fda:	6013      	str	r3, [r2, #0]
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ff4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ff8:	6013      	str	r3, [r2, #0]
}
 8001ffa:	bf00      	nop
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002012:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002016:	d101      	bne.n	800201c <LL_RCC_PLL_IsReady+0x18>
 8002018:	2301      	movs	r3, #1
 800201a:	e000      	b.n	800201e <LL_RCC_PLL_IsReady+0x1a>
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800202c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	0a1b      	lsrs	r3, r3, #8
 8002034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002038:	4618      	mov	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002050:	4618      	mov	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800205e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f003 0303 	and.w	r3, r3, #3
}
 8002080:	4618      	mov	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800208a:	b480      	push	{r7}
 800208c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800208e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800209c:	d101      	bne.n	80020a2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80020ae:	b480      	push	{r7}
 80020b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80020b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80020ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020c2:	d101      	bne.n	80020c8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80020c4:	2301      	movs	r3, #1
 80020c6:	e000      	b.n	80020ca <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80020d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80020e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e8:	d101      	bne.n	80020ee <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80020fa:	b480      	push	{r7}
 80020fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80020fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002108:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800210c:	d101      	bne.n	8002112 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800212c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002130:	d101      	bne.n	8002136 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
	...

08002144 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002144:	b590      	push	{r4, r7, lr}
 8002146:	b08d      	sub	sp, #52	; 0x34
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e324      	b.n	80027a0 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0320 	and.w	r3, r3, #32
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 808d 	beq.w	800227e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002164:	f7ff fe89 	bl	8001e7a <LL_RCC_GetSysClkSource>
 8002168:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800216a:	f7ff ff82 	bl	8002072 <LL_RCC_PLL_GetMainSource>
 800216e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002172:	2b00      	cmp	r3, #0
 8002174:	d005      	beq.n	8002182 <HAL_RCC_OscConfig+0x3e>
 8002176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002178:	2b0c      	cmp	r3, #12
 800217a:	d147      	bne.n	800220c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800217c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800217e:	2b01      	cmp	r3, #1
 8002180:	d144      	bne.n	800220c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e308      	b.n	80027a0 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002192:	f7ff fe34 	bl	8001dfe <LL_RCC_MSI_GetRange>
 8002196:	4603      	mov	r3, r0
 8002198:	429c      	cmp	r4, r3
 800219a:	d914      	bls.n	80021c6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	4618      	mov	r0, r3
 80021a2:	f000 fcf1 	bl	8002b88 <RCC_SetFlashLatencyFromMSIRange>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e2f7      	b.n	80027a0 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff fe0e 	bl	8001dd6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff fe32 	bl	8001e28 <LL_RCC_MSI_SetCalibTrimming>
 80021c4:	e013      	b.n	80021ee <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff fe03 	bl	8001dd6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff fe27 	bl	8001e28 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 fcd2 	bl	8002b88 <RCC_SetFlashLatencyFromMSIRange>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e2d8      	b.n	80027a0 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80021ee:	f000 fc8b 	bl	8002b08 <HAL_RCC_GetHCLKFreq>
 80021f2:	4603      	mov	r3, r0
 80021f4:	4aa4      	ldr	r2, [pc, #656]	; (8002488 <HAL_RCC_OscConfig+0x344>)
 80021f6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80021f8:	4ba4      	ldr	r3, [pc, #656]	; (800248c <HAL_RCC_OscConfig+0x348>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff f903 	bl	8001408 <HAL_InitTick>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d039      	beq.n	800227c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e2c9      	b.n	80027a0 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d01e      	beq.n	8002252 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002214:	f7ff fdb0 	bl	8001d78 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002218:	f7ff f944 	bl	80014a4 <HAL_GetTick>
 800221c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002220:	f7ff f940 	bl	80014a4 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e2b6      	b.n	80027a0 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002232:	f7ff fdbf 	bl	8001db4 <LL_RCC_MSI_IsReady>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f1      	beq.n	8002220 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff fdc8 	bl	8001dd6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff fdec 	bl	8001e28 <LL_RCC_MSI_SetCalibTrimming>
 8002250:	e015      	b.n	800227e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002252:	f7ff fda0 	bl	8001d96 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002256:	f7ff f925 	bl	80014a4 <HAL_GetTick>
 800225a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800225e:	f7ff f921 	bl	80014a4 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e297      	b.n	80027a0 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002270:	f7ff fda0 	bl	8001db4 <LL_RCC_MSI_IsReady>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f1      	bne.n	800225e <HAL_RCC_OscConfig+0x11a>
 800227a:	e000      	b.n	800227e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800227c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d047      	beq.n	800231a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800228a:	f7ff fdf6 	bl	8001e7a <LL_RCC_GetSysClkSource>
 800228e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002290:	f7ff feef 	bl	8002072 <LL_RCC_PLL_GetMainSource>
 8002294:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002296:	6a3b      	ldr	r3, [r7, #32]
 8002298:	2b08      	cmp	r3, #8
 800229a:	d005      	beq.n	80022a8 <HAL_RCC_OscConfig+0x164>
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	2b0c      	cmp	r3, #12
 80022a0:	d108      	bne.n	80022b4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	d105      	bne.n	80022b4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d134      	bne.n	800231a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e275      	b.n	80027a0 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022bc:	d102      	bne.n	80022c4 <HAL_RCC_OscConfig+0x180>
 80022be:	f7ff fc11 	bl	8001ae4 <LL_RCC_HSE_Enable>
 80022c2:	e001      	b.n	80022c8 <HAL_RCC_OscConfig+0x184>
 80022c4:	f7ff fc1d 	bl	8001b02 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d012      	beq.n	80022f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d0:	f7ff f8e8 	bl	80014a4 <HAL_GetTick>
 80022d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d8:	f7ff f8e4 	bl	80014a4 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b64      	cmp	r3, #100	; 0x64
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e25a      	b.n	80027a0 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 80022ea:	f7ff fc19 	bl	8001b20 <LL_RCC_HSE_IsReady>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0f1      	beq.n	80022d8 <HAL_RCC_OscConfig+0x194>
 80022f4:	e011      	b.n	800231a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f6:	f7ff f8d5 	bl	80014a4 <HAL_GetTick>
 80022fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022fe:	f7ff f8d1 	bl	80014a4 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b64      	cmp	r3, #100	; 0x64
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e247      	b.n	80027a0 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002310:	f7ff fc06 	bl	8001b20 <LL_RCC_HSE_IsReady>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f1      	bne.n	80022fe <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d04c      	beq.n	80023c0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002326:	f7ff fda8 	bl	8001e7a <LL_RCC_GetSysClkSource>
 800232a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800232c:	f7ff fea1 	bl	8002072 <LL_RCC_PLL_GetMainSource>
 8002330:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	2b04      	cmp	r3, #4
 8002336:	d005      	beq.n	8002344 <HAL_RCC_OscConfig+0x200>
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	2b0c      	cmp	r3, #12
 800233c:	d10e      	bne.n	800235c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	2b02      	cmp	r3, #2
 8002342:	d10b      	bne.n	800235c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e227      	b.n	80027a0 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fc25 	bl	8001ba4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800235a:	e031      	b.n	80023c0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d019      	beq.n	8002398 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002364:	f7ff fbee 	bl	8001b44 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002368:	f7ff f89c 	bl	80014a4 <HAL_GetTick>
 800236c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002370:	f7ff f898 	bl	80014a4 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e20e      	b.n	80027a0 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002382:	f7ff fbfd 	bl	8001b80 <LL_RCC_HSI_IsReady>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0f1      	beq.n	8002370 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fc07 	bl	8001ba4 <LL_RCC_HSI_SetCalibTrimming>
 8002396:	e013      	b.n	80023c0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002398:	f7ff fbe3 	bl	8001b62 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239c:	f7ff f882 	bl	80014a4 <HAL_GetTick>
 80023a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a4:	f7ff f87e 	bl	80014a4 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e1f4      	b.n	80027a0 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 80023b6:	f7ff fbe3 	bl	8001b80 <LL_RCC_HSI_IsReady>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1f1      	bne.n	80023a4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d106      	bne.n	80023da <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 80a3 	beq.w	8002520 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d076      	beq.n	80024d0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0310 	and.w	r3, r3, #16
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d046      	beq.n	800247c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80023ee:	f7ff fc66 	bl	8001cbe <LL_RCC_LSI1_IsReady>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d113      	bne.n	8002420 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80023f8:	f7ff fc3f 	bl	8001c7a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023fc:	f7ff f852 	bl	80014a4 <HAL_GetTick>
 8002400:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002404:	f7ff f84e 	bl	80014a4 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e1c4      	b.n	80027a0 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002416:	f7ff fc52 	bl	8001cbe <LL_RCC_LSI1_IsReady>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0f1      	beq.n	8002404 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002420:	f7ff fc5f 	bl	8001ce2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002424:	f7ff f83e 	bl	80014a4 <HAL_GetTick>
 8002428:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800242c:	f7ff f83a 	bl	80014a4 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b03      	cmp	r3, #3
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e1b0      	b.n	80027a0 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800243e:	f7ff fc72 	bl	8001d26 <LL_RCC_LSI2_IsReady>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0f1      	beq.n	800242c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff fc7c 	bl	8001d4a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002452:	f7ff fc23 	bl	8001c9c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002456:	f7ff f825 	bl	80014a4 <HAL_GetTick>
 800245a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800245e:	f7ff f821 	bl	80014a4 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e197      	b.n	80027a0 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002470:	f7ff fc25 	bl	8001cbe <LL_RCC_LSI1_IsReady>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f1      	bne.n	800245e <HAL_RCC_OscConfig+0x31a>
 800247a:	e051      	b.n	8002520 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800247c:	f7ff fbfd 	bl	8001c7a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002480:	f7ff f810 	bl	80014a4 <HAL_GetTick>
 8002484:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002486:	e00c      	b.n	80024a2 <HAL_RCC_OscConfig+0x35e>
 8002488:	20000008 	.word	0x20000008
 800248c:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002490:	f7ff f808 	bl	80014a4 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e17e      	b.n	80027a0 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80024a2:	f7ff fc0c 	bl	8001cbe <LL_RCC_LSI1_IsReady>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0f1      	beq.n	8002490 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80024ac:	f7ff fc2a 	bl	8001d04 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80024b2:	f7fe fff7 	bl	80014a4 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b03      	cmp	r3, #3
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e16d      	b.n	80027a0 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80024c4:	f7ff fc2f 	bl	8001d26 <LL_RCC_LSI2_IsReady>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f1      	bne.n	80024b2 <HAL_RCC_OscConfig+0x36e>
 80024ce:	e027      	b.n	8002520 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80024d0:	f7ff fc18 	bl	8001d04 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d4:	f7fe ffe6 	bl	80014a4 <HAL_GetTick>
 80024d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80024dc:	f7fe ffe2 	bl	80014a4 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b03      	cmp	r3, #3
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e158      	b.n	80027a0 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80024ee:	f7ff fc1a 	bl	8001d26 <LL_RCC_LSI2_IsReady>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f1      	bne.n	80024dc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80024f8:	f7ff fbd0 	bl	8001c9c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fc:	f7fe ffd2 	bl	80014a4 <HAL_GetTick>
 8002500:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002504:	f7fe ffce 	bl	80014a4 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e144      	b.n	80027a0 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002516:	f7ff fbd2 	bl	8001cbe <LL_RCC_LSI1_IsReady>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1f1      	bne.n	8002504 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b00      	cmp	r3, #0
 800252a:	d05b      	beq.n	80025e4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800252c:	4b9e      	ldr	r3, [pc, #632]	; (80027a8 <HAL_RCC_OscConfig+0x664>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002534:	2b00      	cmp	r3, #0
 8002536:	d114      	bne.n	8002562 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002538:	f7ff fab2 	bl	8001aa0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800253c:	f7fe ffb2 	bl	80014a4 <HAL_GetTick>
 8002540:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002544:	f7fe ffae 	bl	80014a4 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e124      	b.n	80027a0 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002556:	4b94      	ldr	r3, [pc, #592]	; (80027a8 <HAL_RCC_OscConfig+0x664>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f0      	beq.n	8002544 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d102      	bne.n	8002570 <HAL_RCC_OscConfig+0x42c>
 800256a:	f7ff fb30 	bl	8001bce <LL_RCC_LSE_Enable>
 800256e:	e00c      	b.n	800258a <HAL_RCC_OscConfig+0x446>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	2b05      	cmp	r3, #5
 8002576:	d104      	bne.n	8002582 <HAL_RCC_OscConfig+0x43e>
 8002578:	f7ff fb4b 	bl	8001c12 <LL_RCC_LSE_EnableBypass>
 800257c:	f7ff fb27 	bl	8001bce <LL_RCC_LSE_Enable>
 8002580:	e003      	b.n	800258a <HAL_RCC_OscConfig+0x446>
 8002582:	f7ff fb35 	bl	8001bf0 <LL_RCC_LSE_Disable>
 8002586:	f7ff fb55 	bl	8001c34 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d014      	beq.n	80025bc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002592:	f7fe ff87 	bl	80014a4 <HAL_GetTick>
 8002596:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002598:	e00a      	b.n	80025b0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800259a:	f7fe ff83 	bl	80014a4 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e0f7      	b.n	80027a0 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 80025b0:	f7ff fb51 	bl	8001c56 <LL_RCC_LSE_IsReady>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0ef      	beq.n	800259a <HAL_RCC_OscConfig+0x456>
 80025ba:	e013      	b.n	80025e4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025bc:	f7fe ff72 	bl	80014a4 <HAL_GetTick>
 80025c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80025c2:	e00a      	b.n	80025da <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c4:	f7fe ff6e 	bl	80014a4 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e0e2      	b.n	80027a0 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 80025da:	f7ff fb3c 	bl	8001c56 <LL_RCC_LSE_IsReady>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1ef      	bne.n	80025c4 <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80d8 	beq.w	800279e <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025ee:	f7ff fc44 	bl	8001e7a <LL_RCC_GetSysClkSource>
 80025f2:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80025f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002600:	2b02      	cmp	r3, #2
 8002602:	f040 80a6 	bne.w	8002752 <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f003 0203 	and.w	r2, r3, #3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002610:	429a      	cmp	r2, r3
 8002612:	d123      	bne.n	800265c <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261e:	429a      	cmp	r2, r3
 8002620:	d11c      	bne.n	800265c <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	0a1b      	lsrs	r3, r3, #8
 8002626:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800262e:	429a      	cmp	r2, r3
 8002630:	d114      	bne.n	800265c <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800263c:	429a      	cmp	r2, r3
 800263e:	d10d      	bne.n	800265c <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800264a:	429a      	cmp	r2, r3
 800264c:	d106      	bne.n	800265c <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002658:	429a      	cmp	r2, r3
 800265a:	d054      	beq.n	8002706 <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	2b0c      	cmp	r3, #12
 8002660:	d04f      	beq.n	8002702 <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002662:	f7ff fcc0 	bl	8001fe6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002666:	f7fe ff1d 	bl	80014a4 <HAL_GetTick>
 800266a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266e:	f7fe ff19 	bl	80014a4 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e08f      	b.n	80027a0 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1ef      	bne.n	800266e <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800268e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002692:	68da      	ldr	r2, [r3, #12]
 8002694:	4b45      	ldr	r3, [pc, #276]	; (80027ac <HAL_RCC_OscConfig+0x668>)
 8002696:	4013      	ands	r3, r2
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80026a0:	4311      	orrs	r1, r2
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026a6:	0212      	lsls	r2, r2, #8
 80026a8:	4311      	orrs	r1, r2
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026ae:	4311      	orrs	r1, r2
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026b4:	4311      	orrs	r1, r2
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026ba:	430a      	orrs	r2, r1
 80026bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026c0:	4313      	orrs	r3, r2
 80026c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026c4:	f7ff fc80 	bl	8001fc8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026d8:	f7fe fee4 	bl	80014a4 <HAL_GetTick>
 80026dc:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e0:	f7fe fee0 	bl	80014a4 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e056      	b.n	80027a0 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0ef      	beq.n	80026e0 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002700:	e04d      	b.n	800279e <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e04c      	b.n	80027a0 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d144      	bne.n	800279e <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002714:	f7ff fc58 	bl	8001fc8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002726:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002728:	f7fe febc 	bl	80014a4 <HAL_GetTick>
 800272c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002730:	f7fe feb8 	bl	80014a4 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e02e      	b.n	80027a0 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002742:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0ef      	beq.n	8002730 <HAL_RCC_OscConfig+0x5ec>
 8002750:	e025      	b.n	800279e <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	2b0c      	cmp	r3, #12
 8002756:	d020      	beq.n	800279a <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002758:	f7ff fc45 	bl	8001fe6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275c:	f7fe fea2 	bl	80014a4 <HAL_GetTick>
 8002760:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002764:	f7fe fe9e 	bl	80014a4 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e014      	b.n	80027a0 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1ef      	bne.n	8002764 <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8002784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800278e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002792:	f023 0303 	bic.w	r3, r3, #3
 8002796:	60d3      	str	r3, [r2, #12]
 8002798:	e001      	b.n	800279e <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e000      	b.n	80027a0 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3734      	adds	r7, #52	; 0x34
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd90      	pop	{r4, r7, pc}
 80027a8:	58000400 	.word	0x58000400
 80027ac:	11c1808c 	.word	0x11c1808c

080027b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e12d      	b.n	8002a20 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027c4:	4b98      	ldr	r3, [pc, #608]	; (8002a28 <HAL_RCC_ClockConfig+0x278>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d91b      	bls.n	800280a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d2:	4b95      	ldr	r3, [pc, #596]	; (8002a28 <HAL_RCC_ClockConfig+0x278>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 0207 	bic.w	r2, r3, #7
 80027da:	4993      	ldr	r1, [pc, #588]	; (8002a28 <HAL_RCC_ClockConfig+0x278>)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027e2:	f7fe fe5f 	bl	80014a4 <HAL_GetTick>
 80027e6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80027ea:	f7fe fe5b 	bl	80014a4 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e111      	b.n	8002a20 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fc:	4b8a      	ldr	r3, [pc, #552]	; (8002a28 <HAL_RCC_ClockConfig+0x278>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d1ef      	bne.n	80027ea <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d016      	beq.n	8002844 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff fb39 	bl	8001e92 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002820:	f7fe fe40 	bl	80014a4 <HAL_GetTick>
 8002824:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002826:	e008      	b.n	800283a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002828:	f7fe fe3c 	bl	80014a4 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e0f2      	b.n	8002a20 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800283a:	f7ff fc26 	bl	800208a <LL_RCC_IsActiveFlag_HPRE>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0f1      	beq.n	8002828 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0320 	and.w	r3, r3, #32
 800284c:	2b00      	cmp	r3, #0
 800284e:	d016      	beq.n	800287e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff fb30 	bl	8001eba <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800285a:	f7fe fe23 	bl	80014a4 <HAL_GetTick>
 800285e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002860:	e008      	b.n	8002874 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002862:	f7fe fe1f 	bl	80014a4 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e0d5      	b.n	8002a20 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002874:	f7ff fc1b 	bl	80020ae <LL_RCC_IsActiveFlag_C2HPRE>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f1      	beq.n	8002862 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002886:	2b00      	cmp	r3, #0
 8002888:	d016      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff fb29 	bl	8001ee6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002894:	f7fe fe06 	bl	80014a4 <HAL_GetTick>
 8002898:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800289a:	e008      	b.n	80028ae <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800289c:	f7fe fe02 	bl	80014a4 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e0b8      	b.n	8002a20 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80028ae:	f7ff fc11 	bl	80020d4 <LL_RCC_IsActiveFlag_SHDHPRE>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0f1      	beq.n	800289c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d016      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff fb23 	bl	8001f14 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80028ce:	f7fe fde9 	bl	80014a4 <HAL_GetTick>
 80028d2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028d6:	f7fe fde5 	bl	80014a4 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e09b      	b.n	8002a20 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80028e8:	f7ff fc07 	bl	80020fa <LL_RCC_IsActiveFlag_PPRE1>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0f1      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d017      	beq.n	800292e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fb19 	bl	8001f3c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800290a:	f7fe fdcb 	bl	80014a4 <HAL_GetTick>
 800290e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002910:	e008      	b.n	8002924 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002912:	f7fe fdc7 	bl	80014a4 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e07d      	b.n	8002a20 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002924:	f7ff fbfb 	bl	800211e <LL_RCC_IsActiveFlag_PPRE2>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0f1      	beq.n	8002912 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d043      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d106      	bne.n	8002950 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002942:	f7ff f8ed 	bl	8001b20 <LL_RCC_HSE_IsReady>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d11e      	bne.n	800298a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e067      	b.n	8002a20 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b03      	cmp	r3, #3
 8002956:	d106      	bne.n	8002966 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002958:	f7ff fb54 	bl	8002004 <LL_RCC_PLL_IsReady>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d113      	bne.n	800298a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e05c      	b.n	8002a20 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800296e:	f7ff fa21 	bl	8001db4 <LL_RCC_MSI_IsReady>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d108      	bne.n	800298a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e051      	b.n	8002a20 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800297c:	f7ff f900 	bl	8001b80 <LL_RCC_HSI_IsReady>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e04a      	b.n	8002a20 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff fa5f 	bl	8001e52 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002994:	f7fe fd86 	bl	80014a4 <HAL_GetTick>
 8002998:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299a:	e00a      	b.n	80029b2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800299c:	f7fe fd82 	bl	80014a4 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e036      	b.n	8002a20 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b2:	f7ff fa62 	bl	8001e7a <LL_RCC_GetSysClkSource>
 80029b6:	4602      	mov	r2, r0
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	429a      	cmp	r2, r3
 80029c0:	d1ec      	bne.n	800299c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029c2:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <HAL_RCC_ClockConfig+0x278>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d21b      	bcs.n	8002a08 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d0:	4b15      	ldr	r3, [pc, #84]	; (8002a28 <HAL_RCC_ClockConfig+0x278>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f023 0207 	bic.w	r2, r3, #7
 80029d8:	4913      	ldr	r1, [pc, #76]	; (8002a28 <HAL_RCC_ClockConfig+0x278>)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	4313      	orrs	r3, r2
 80029de:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029e0:	f7fe fd60 	bl	80014a4 <HAL_GetTick>
 80029e4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80029e8:	f7fe fd5c 	bl	80014a4 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e012      	b.n	8002a20 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fa:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <HAL_RCC_ClockConfig+0x278>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d1ef      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002a08:	f000 f87e 	bl	8002b08 <HAL_RCC_GetHCLKFreq>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	4a07      	ldr	r2, [pc, #28]	; (8002a2c <HAL_RCC_ClockConfig+0x27c>)
 8002a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002a12:	f7fe fd53 	bl	80014bc <HAL_GetTickPrio>
 8002a16:	4603      	mov	r3, r0
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fe fcf5 	bl	8001408 <HAL_InitTick>
 8002a1e:	4603      	mov	r3, r0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	58004000 	.word	0x58004000
 8002a2c:	20000008 	.word	0x20000008

08002a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a30:	b590      	push	{r4, r7, lr}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a36:	f7ff fa20 	bl	8001e7a <LL_RCC_GetSysClkSource>
 8002a3a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10a      	bne.n	8002a58 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002a42:	f7ff f9dc 	bl	8001dfe <LL_RCC_MSI_GetRange>
 8002a46:	4603      	mov	r3, r0
 8002a48:	091b      	lsrs	r3, r3, #4
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	4a2b      	ldr	r2, [pc, #172]	; (8002afc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	e04b      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d102      	bne.n	8002a64 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a5e:	4b28      	ldr	r3, [pc, #160]	; (8002b00 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	e045      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	d10a      	bne.n	8002a80 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002a6a:	f7ff f829 	bl	8001ac0 <LL_RCC_HSE_IsEnabledDiv2>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d102      	bne.n	8002a7a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002a74:	4b22      	ldr	r3, [pc, #136]	; (8002b00 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	e03a      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002a7a:	4b22      	ldr	r3, [pc, #136]	; (8002b04 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	e037      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002a80:	f7ff faf7 	bl	8002072 <LL_RCC_PLL_GetMainSource>
 8002a84:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d003      	beq.n	8002a94 <HAL_RCC_GetSysClockFreq+0x64>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	2b03      	cmp	r3, #3
 8002a90:	d003      	beq.n	8002a9a <HAL_RCC_GetSysClockFreq+0x6a>
 8002a92:	e00d      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002a94:	4b1a      	ldr	r3, [pc, #104]	; (8002b00 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a96:	60bb      	str	r3, [r7, #8]
        break;
 8002a98:	e015      	b.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002a9a:	f7ff f811 	bl	8001ac0 <LL_RCC_HSE_IsEnabledDiv2>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d102      	bne.n	8002aaa <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002aa4:	4b16      	ldr	r3, [pc, #88]	; (8002b00 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002aa6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002aa8:	e00d      	b.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002aaa:	4b16      	ldr	r3, [pc, #88]	; (8002b04 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002aac:	60bb      	str	r3, [r7, #8]
        break;
 8002aae:	e00a      	b.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002ab0:	f7ff f9a5 	bl	8001dfe <LL_RCC_MSI_GetRange>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	091b      	lsrs	r3, r3, #4
 8002ab8:	f003 030f 	and.w	r3, r3, #15
 8002abc:	4a0f      	ldr	r2, [pc, #60]	; (8002afc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac2:	60bb      	str	r3, [r7, #8]
        break;
 8002ac4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002ac6:	f7ff faaf 	bl	8002028 <LL_RCC_PLL_GetN>
 8002aca:	4602      	mov	r2, r0
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	fb03 f402 	mul.w	r4, r3, r2
 8002ad2:	f7ff fac2 	bl	800205a <LL_RCC_PLL_GetDivider>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	091b      	lsrs	r3, r3, #4
 8002ada:	3301      	adds	r3, #1
 8002adc:	fbb4 f4f3 	udiv	r4, r4, r3
 8002ae0:	f7ff faaf 	bl	8002042 <LL_RCC_PLL_GetR>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	0f5b      	lsrs	r3, r3, #29
 8002ae8:	3301      	adds	r3, #1
 8002aea:	fbb4 f3f3 	udiv	r3, r4, r3
 8002aee:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002af0:	68fb      	ldr	r3, [r7, #12]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd90      	pop	{r4, r7, pc}
 8002afa:	bf00      	nop
 8002afc:	08005c7c 	.word	0x08005c7c
 8002b00:	00f42400 	.word	0x00f42400
 8002b04:	01e84800 	.word	0x01e84800

08002b08 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b08:	b598      	push	{r3, r4, r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002b0c:	f7ff ff90 	bl	8002a30 <HAL_RCC_GetSysClockFreq>
 8002b10:	4604      	mov	r4, r0
 8002b12:	f7ff fa27 	bl	8001f64 <LL_RCC_GetAHBPrescaler>
 8002b16:	4603      	mov	r3, r0
 8002b18:	091b      	lsrs	r3, r3, #4
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	4a03      	ldr	r2, [pc, #12]	; (8002b2c <HAL_RCC_GetHCLKFreq+0x24>)
 8002b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b24:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	bd98      	pop	{r3, r4, r7, pc}
 8002b2c:	08005c1c 	.word	0x08005c1c

08002b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b30:	b598      	push	{r3, r4, r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002b34:	f7ff ffe8 	bl	8002b08 <HAL_RCC_GetHCLKFreq>
 8002b38:	4604      	mov	r4, r0
 8002b3a:	f7ff fa2d 	bl	8001f98 <LL_RCC_GetAPB1Prescaler>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	0a1b      	lsrs	r3, r3, #8
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	4a04      	ldr	r2, [pc, #16]	; (8002b58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b4c:	f003 031f 	and.w	r3, r3, #31
 8002b50:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	bd98      	pop	{r3, r4, r7, pc}
 8002b58:	08005c5c 	.word	0x08005c5c

08002b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b5c:	b598      	push	{r3, r4, r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002b60:	f7ff ffd2 	bl	8002b08 <HAL_RCC_GetHCLKFreq>
 8002b64:	4604      	mov	r4, r0
 8002b66:	f7ff fa23 	bl	8001fb0 <LL_RCC_GetAPB2Prescaler>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	0adb      	lsrs	r3, r3, #11
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	4a04      	ldr	r2, [pc, #16]	; (8002b84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b78:	f003 031f 	and.w	r3, r3, #31
 8002b7c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	bd98      	pop	{r3, r4, r7, pc}
 8002b84:	08005c5c 	.word	0x08005c5c

08002b88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2bb0      	cmp	r3, #176	; 0xb0
 8002b94:	d903      	bls.n	8002b9e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002b96:	4b14      	ldr	r3, [pc, #80]	; (8002be8 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8002b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	e007      	b.n	8002bae <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	091b      	lsrs	r3, r3, #4
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	4a10      	ldr	r2, [pc, #64]	; (8002be8 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8002ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bac:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002bae:	f7ff f9e5 	bl	8001f7c <LL_RCC_GetAHB4Prescaler>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	091b      	lsrs	r3, r3, #4
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	4a0c      	ldr	r2, [pc, #48]	; (8002bec <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	4a09      	ldr	r2, [pc, #36]	; (8002bf0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd0:	0c9b      	lsrs	r3, r3, #18
 8002bd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 f80c 	bl	8002bf4 <RCC_SetFlashLatency>
 8002bdc:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	08005c7c 	.word	0x08005c7c
 8002bec:	08005c1c 	.word	0x08005c1c
 8002bf0:	431bde83 	.word	0x431bde83

08002bf4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002bf4:	b590      	push	{r4, r7, lr}
 8002bf6:	b08f      	sub	sp, #60	; 0x3c
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002bfe:	4b24      	ldr	r3, [pc, #144]	; (8002c90 <RCC_SetFlashLatency+0x9c>)
 8002c00:	f107 041c 	add.w	r4, r7, #28
 8002c04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002c0a:	4b22      	ldr	r3, [pc, #136]	; (8002c94 <RCC_SetFlashLatency+0xa0>)
 8002c0c:	f107 040c 	add.w	r4, r7, #12
 8002c10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002c16:	2300      	movs	r3, #0
 8002c18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	633b      	str	r3, [r7, #48]	; 0x30
 8002c1e:	e013      	b.n	8002c48 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	3338      	adds	r3, #56	; 0x38
 8002c26:	443b      	add	r3, r7
 8002c28:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d807      	bhi.n	8002c42 <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8002c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	3338      	adds	r3, #56	; 0x38
 8002c38:	443b      	add	r3, r7
 8002c3a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002c3e:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8002c40:	e005      	b.n	8002c4e <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c44:	3301      	adds	r3, #1
 8002c46:	633b      	str	r3, [r7, #48]	; 0x30
 8002c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4a:	2b03      	cmp	r3, #3
 8002c4c:	d9e8      	bls.n	8002c20 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002c4e:	4b12      	ldr	r3, [pc, #72]	; (8002c98 <RCC_SetFlashLatency+0xa4>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f023 0207 	bic.w	r2, r3, #7
 8002c56:	4910      	ldr	r1, [pc, #64]	; (8002c98 <RCC_SetFlashLatency+0xa4>)
 8002c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002c5e:	f7fe fc21 	bl	80014a4 <HAL_GetTick>
 8002c62:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002c64:	e008      	b.n	8002c78 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002c66:	f7fe fc1d 	bl	80014a4 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e007      	b.n	8002c88 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002c78:	4b07      	ldr	r3, [pc, #28]	; (8002c98 <RCC_SetFlashLatency+0xa4>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d1ef      	bne.n	8002c66 <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	373c      	adds	r7, #60	; 0x3c
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd90      	pop	{r4, r7, pc}
 8002c90:	08005bf4 	.word	0x08005bf4
 8002c94:	08005c04 	.word	0x08005c04
 8002c98:	58004000 	.word	0x58004000

08002c9c <LL_RCC_LSE_IsEnabled>:
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <LL_RCC_LSE_IsEnabled+0x18>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <LL_RCC_LSE_IsEnabled+0x1a>
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <LL_RCC_LSE_IsReady>:
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d101      	bne.n	8002cd8 <LL_RCC_LSE_IsReady+0x18>
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e000      	b.n	8002cda <LL_RCC_LSE_IsReady+0x1a>
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <LL_RCC_MSI_EnablePLLMode>:
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cf2:	f043 0304 	orr.w	r3, r3, #4
 8002cf6:	6013      	str	r3, [r2, #0]
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <LL_RCC_SetRFWKPClockSource>:
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d12:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <LL_RCC_SetSMPSClockSource>:
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	f023 0203 	bic.w	r2, r3, #3
 8002d40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <LL_RCC_SetSMPSPrescaler>:
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <LL_RCC_SetUSARTClockSource>:
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8e:	f023 0203 	bic.w	r2, r3, #3
 8002d92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <LL_RCC_SetLPUARTClockSource>:
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002dbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <LL_RCC_SetI2CClockSource>:
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	091b      	lsrs	r3, r3, #4
 8002dea:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002dee:	43db      	mvns	r3, r3
 8002df0:	401a      	ands	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002dfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <LL_RCC_SetLPTIMClockSource>:
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e1c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	0c1b      	lsrs	r3, r3, #16
 8002e24:	041b      	lsls	r3, r3, #16
 8002e26:	43db      	mvns	r3, r3
 8002e28:	401a      	ands	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	041b      	lsls	r3, r3, #16
 8002e2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <LL_RCC_SetRNGClockSource>:
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e54:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002e58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <LL_RCC_SetCLK48ClockSource>:
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e80:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <LL_RCC_SetADCClockSource>:
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002eb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <LL_RCC_SetRTCClockSource>:
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002edc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <LL_RCC_GetRTCClockSource>:
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f00:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <LL_RCC_ForceBackupDomainReset>:
{
 8002f0e:	b480      	push	{r7}
 8002f10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f26:	bf00      	nop
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f48:	bf00      	nop
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b088      	sub	sp, #32
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002f5e:	2300      	movs	r3, #0
 8002f60:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d046      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002f6e:	f7ff ffc1 	bl	8002ef4 <LL_RCC_GetRTCClockSource>
 8002f72:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d03c      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002f7e:	f7fe fd8f 	bl	8001aa0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d105      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff ff9b 	bl	8002ec8 <LL_RCC_SetRTCClockSource>
 8002f92:	e02e      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f9c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002f9e:	f7ff ffb6 	bl	8002f0e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002fa2:	f7ff ffc5 	bl	8002f30 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002fb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002fbe:	f7ff fe6d 	bl	8002c9c <LL_RCC_LSE_IsEnabled>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d114      	bne.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fc8:	f7fe fa6c 	bl	80014a4 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002fce:	e00b      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd0:	f7fe fa68 	bl	80014a4 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d902      	bls.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	77fb      	strb	r3, [r7, #31]
              break;
 8002fe6:	e004      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002fe8:	f7ff fe6a 	bl	8002cc0 <LL_RCC_LSE_IsReady>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d1ee      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002ff2:	7ffb      	ldrb	r3, [r7, #31]
 8002ff4:	77bb      	strb	r3, [r7, #30]
 8002ff6:	e001      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff8:	7ffb      	ldrb	r3, [r7, #31]
 8002ffa:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b00      	cmp	r3, #0
 8003006:	d004      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff feb6 	bl	8002d7e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d004      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff fec1 	bl	8002daa <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0310 	and.w	r3, r3, #16
 8003030:	2b00      	cmp	r3, #0
 8003032:	d004      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff fee9 	bl	8002e10 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0320 	and.w	r3, r3, #32
 8003046:	2b00      	cmp	r3, #0
 8003048:	d004      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff fede 	bl	8002e10 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b00      	cmp	r3, #0
 800305e:	d004      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff feb6 	bl	8002dd6 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003072:	2b00      	cmp	r3, #0
 8003074:	d02b      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800307e:	d008      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003088:	d003      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d105      	bne.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff fed4 	bl	8002e44 <LL_RCC_SetRNGClockSource>
 800309c:	e00a      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x162>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	2000      	movs	r0, #0
 80030aa:	f7ff fecb 	bl	8002e44 <LL_RCC_SetRNGClockSource>
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f7ff fede 	bl	8002e70 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80030bc:	d107      	bne.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80030be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030cc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d011      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff fedc 	bl	8002e9c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030ec:	d107      	bne.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80030ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030fc:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d004      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff fdf7 	bl	8002d02 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d009      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff fe16 	bl	8002d56 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff fdfd 	bl	8002d2e <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003134:	7fbb      	ldrb	r3, [r7, #30]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3720      	adds	r7, #32
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003142:	f7ff fdcf 	bl	8002ce4 <LL_RCC_MSI_EnablePLLMode>
}
 8003146:	bf00      	nop
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b084      	sub	sp, #16
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e095      	b.n	8003288 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	2b00      	cmp	r3, #0
 8003162:	d108      	bne.n	8003176 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800316c:	d009      	beq.n	8003182 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	61da      	str	r2, [r3, #28]
 8003174:	e005      	b.n	8003182 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d106      	bne.n	80031a2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7fd fea9 	bl	8000ef4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2202      	movs	r2, #2
 80031a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031b8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031c2:	d902      	bls.n	80031ca <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80031c4:	2300      	movs	r3, #0
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	e002      	b.n	80031d0 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80031ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031ce:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80031d8:	d007      	beq.n	80031ea <HAL_SPI_Init+0xa0>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031e2:	d002      	beq.n	80031ea <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	431a      	orrs	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003218:	431a      	orrs	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322c:	ea42 0103 	orr.w	r1, r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003234:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	0c1b      	lsrs	r3, r3, #16
 8003246:	f003 0204 	and.w	r2, r3, #4
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	f003 0310 	and.w	r3, r3, #16
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003266:	ea42 0103 	orr.w	r1, r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b088      	sub	sp, #32
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	603b      	str	r3, [r7, #0]
 800329c:	4613      	mov	r3, r2
 800329e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032a0:	2300      	movs	r3, #0
 80032a2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d101      	bne.n	80032b2 <HAL_SPI_Transmit+0x22>
 80032ae:	2302      	movs	r3, #2
 80032b0:	e158      	b.n	8003564 <HAL_SPI_Transmit+0x2d4>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032ba:	f7fe f8f3 	bl	80014a4 <HAL_GetTick>
 80032be:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80032c0:	88fb      	ldrh	r3, [r7, #6]
 80032c2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d002      	beq.n	80032d6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80032d0:	2302      	movs	r3, #2
 80032d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032d4:	e13d      	b.n	8003552 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d002      	beq.n	80032e2 <HAL_SPI_Transmit+0x52>
 80032dc:	88fb      	ldrh	r3, [r7, #6]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d102      	bne.n	80032e8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032e6:	e134      	b.n	8003552 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2203      	movs	r2, #3
 80032ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	88fa      	ldrh	r2, [r7, #6]
 8003300:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	88fa      	ldrh	r2, [r7, #6]
 8003306:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003332:	d10f      	bne.n	8003354 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003342:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003352:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335e:	2b40      	cmp	r3, #64	; 0x40
 8003360:	d007      	beq.n	8003372 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003370:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800337a:	d94b      	bls.n	8003414 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d002      	beq.n	800338a <HAL_SPI_Transmit+0xfa>
 8003384:	8afb      	ldrh	r3, [r7, #22]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d13e      	bne.n	8003408 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338e:	881a      	ldrh	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339a:	1c9a      	adds	r2, r3, #2
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80033ae:	e02b      	b.n	8003408 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d112      	bne.n	80033e4 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c2:	881a      	ldrh	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ce:	1c9a      	adds	r2, r3, #2
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d8:	b29b      	uxth	r3, r3
 80033da:	3b01      	subs	r3, #1
 80033dc:	b29a      	uxth	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033e2:	e011      	b.n	8003408 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033e4:	f7fe f85e 	bl	80014a4 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d803      	bhi.n	80033fc <HAL_SPI_Transmit+0x16c>
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033fa:	d102      	bne.n	8003402 <HAL_SPI_Transmit+0x172>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d102      	bne.n	8003408 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003406:	e0a4      	b.n	8003552 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800340c:	b29b      	uxth	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1ce      	bne.n	80033b0 <HAL_SPI_Transmit+0x120>
 8003412:	e07c      	b.n	800350e <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d002      	beq.n	8003422 <HAL_SPI_Transmit+0x192>
 800341c:	8afb      	ldrh	r3, [r7, #22]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d170      	bne.n	8003504 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003426:	b29b      	uxth	r3, r3
 8003428:	2b01      	cmp	r3, #1
 800342a:	d912      	bls.n	8003452 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003430:	881a      	ldrh	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343c:	1c9a      	adds	r2, r3, #2
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003446:	b29b      	uxth	r3, r3
 8003448:	3b02      	subs	r3, #2
 800344a:	b29a      	uxth	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003450:	e058      	b.n	8003504 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	330c      	adds	r3, #12
 800345c:	7812      	ldrb	r2, [r2, #0]
 800345e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003464:	1c5a      	adds	r2, r3, #1
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800346e:	b29b      	uxth	r3, r3
 8003470:	3b01      	subs	r3, #1
 8003472:	b29a      	uxth	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003478:	e044      	b.n	8003504 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b02      	cmp	r3, #2
 8003486:	d12b      	bne.n	80034e0 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800348c:	b29b      	uxth	r3, r3
 800348e:	2b01      	cmp	r3, #1
 8003490:	d912      	bls.n	80034b8 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003496:	881a      	ldrh	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a2:	1c9a      	adds	r2, r3, #2
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	3b02      	subs	r3, #2
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034b6:	e025      	b.n	8003504 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	330c      	adds	r3, #12
 80034c2:	7812      	ldrb	r2, [r2, #0]
 80034c4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ca:	1c5a      	adds	r2, r3, #1
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	3b01      	subs	r3, #1
 80034d8:	b29a      	uxth	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034de:	e011      	b.n	8003504 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034e0:	f7fd ffe0 	bl	80014a4 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d803      	bhi.n	80034f8 <HAL_SPI_Transmit+0x268>
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034f6:	d102      	bne.n	80034fe <HAL_SPI_Transmit+0x26e>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d102      	bne.n	8003504 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003502:	e026      	b.n	8003552 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003508:	b29b      	uxth	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1b5      	bne.n	800347a <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	6839      	ldr	r1, [r7, #0]
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 fce4 	bl	8003ee0 <SPI_EndRxTxTransaction>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2220      	movs	r2, #32
 8003522:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10a      	bne.n	8003542 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800352c:	2300      	movs	r3, #0
 800352e:	613b      	str	r3, [r7, #16]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	613b      	str	r3, [r7, #16]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	613b      	str	r3, [r7, #16]
 8003540:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003546:	2b00      	cmp	r3, #0
 8003548:	d002      	beq.n	8003550 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	77fb      	strb	r3, [r7, #31]
 800354e:	e000      	b.n	8003552 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003550:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003562:	7ffb      	ldrb	r3, [r7, #31]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3720      	adds	r7, #32
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b088      	sub	sp, #32
 8003570:	af02      	add	r7, sp, #8
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	4613      	mov	r3, r2
 800357a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800357c:	2300      	movs	r3, #0
 800357e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003588:	d112      	bne.n	80035b0 <HAL_SPI_Receive+0x44>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10e      	bne.n	80035b0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2204      	movs	r2, #4
 8003596:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800359a:	88fa      	ldrh	r2, [r7, #6]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	4613      	mov	r3, r2
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	68b9      	ldr	r1, [r7, #8]
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 f910 	bl	80037cc <HAL_SPI_TransmitReceive>
 80035ac:	4603      	mov	r3, r0
 80035ae:	e109      	b.n	80037c4 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d101      	bne.n	80035be <HAL_SPI_Receive+0x52>
 80035ba:	2302      	movs	r3, #2
 80035bc:	e102      	b.n	80037c4 <HAL_SPI_Receive+0x258>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035c6:	f7fd ff6d 	bl	80014a4 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d002      	beq.n	80035de <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80035d8:	2302      	movs	r3, #2
 80035da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035dc:	e0e9      	b.n	80037b2 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d002      	beq.n	80035ea <HAL_SPI_Receive+0x7e>
 80035e4:	88fb      	ldrh	r3, [r7, #6]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d102      	bne.n	80035f0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035ee:	e0e0      	b.n	80037b2 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2204      	movs	r2, #4
 80035f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	88fa      	ldrh	r2, [r7, #6]
 8003608:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	88fa      	ldrh	r2, [r7, #6]
 8003610:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800363a:	d908      	bls.n	800364e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800364a:	605a      	str	r2, [r3, #4]
 800364c:	e007      	b.n	800365e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800365c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003666:	d10f      	bne.n	8003688 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003676:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003686:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003692:	2b40      	cmp	r3, #64	; 0x40
 8003694:	d007      	beq.n	80036a6 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036a4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036ae:	d867      	bhi.n	8003780 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80036b0:	e030      	b.n	8003714 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d117      	bne.n	80036f0 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f103 020c 	add.w	r2, r3, #12
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	7812      	ldrb	r2, [r2, #0]
 80036ce:	b2d2      	uxtb	r2, r2
 80036d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	1c5a      	adds	r2, r3, #1
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80036ee:	e011      	b.n	8003714 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036f0:	f7fd fed8 	bl	80014a4 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d803      	bhi.n	8003708 <HAL_SPI_Receive+0x19c>
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003706:	d102      	bne.n	800370e <HAL_SPI_Receive+0x1a2>
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d102      	bne.n	8003714 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003712:	e04e      	b.n	80037b2 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800371a:	b29b      	uxth	r3, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1c8      	bne.n	80036b2 <HAL_SPI_Receive+0x146>
 8003720:	e034      	b.n	800378c <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b01      	cmp	r3, #1
 800372e:	d115      	bne.n	800375c <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68da      	ldr	r2, [r3, #12]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	b292      	uxth	r2, r2
 800373c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	1c9a      	adds	r2, r3, #2
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800374e:	b29b      	uxth	r3, r3
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800375a:	e011      	b.n	8003780 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800375c:	f7fd fea2 	bl	80014a4 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d803      	bhi.n	8003774 <HAL_SPI_Receive+0x208>
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003772:	d102      	bne.n	800377a <HAL_SPI_Receive+0x20e>
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d102      	bne.n	8003780 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800377e:	e018      	b.n	80037b2 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003786:	b29b      	uxth	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1ca      	bne.n	8003722 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	6839      	ldr	r1, [r7, #0]
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 fb4d 	bl	8003e30 <SPI_EndRxTransaction>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2220      	movs	r2, #32
 80037a0:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d002      	beq.n	80037b0 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	75fb      	strb	r3, [r7, #23]
 80037ae:	e000      	b.n	80037b2 <HAL_SPI_Receive+0x246>
  }

error :
 80037b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80037c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08a      	sub	sp, #40	; 0x28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
 80037d8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80037da:	2301      	movs	r3, #1
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d101      	bne.n	80037f2 <HAL_SPI_TransmitReceive+0x26>
 80037ee:	2302      	movs	r3, #2
 80037f0:	e1fb      	b.n	8003bea <HAL_SPI_TransmitReceive+0x41e>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037fa:	f7fd fe53 	bl	80014a4 <HAL_GetTick>
 80037fe:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003806:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800380e:	887b      	ldrh	r3, [r7, #2]
 8003810:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003812:	887b      	ldrh	r3, [r7, #2]
 8003814:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003816:	7efb      	ldrb	r3, [r7, #27]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d00e      	beq.n	800383a <HAL_SPI_TransmitReceive+0x6e>
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003822:	d106      	bne.n	8003832 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d102      	bne.n	8003832 <HAL_SPI_TransmitReceive+0x66>
 800382c:	7efb      	ldrb	r3, [r7, #27]
 800382e:	2b04      	cmp	r3, #4
 8003830:	d003      	beq.n	800383a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003832:	2302      	movs	r3, #2
 8003834:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003838:	e1cd      	b.n	8003bd6 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_SPI_TransmitReceive+0x80>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d002      	beq.n	800384c <HAL_SPI_TransmitReceive+0x80>
 8003846:	887b      	ldrh	r3, [r7, #2]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d103      	bne.n	8003854 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003852:	e1c0      	b.n	8003bd6 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b04      	cmp	r3, #4
 800385e:	d003      	beq.n	8003868 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2205      	movs	r2, #5
 8003864:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	887a      	ldrh	r2, [r7, #2]
 8003878:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	887a      	ldrh	r2, [r7, #2]
 8003880:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	887a      	ldrh	r2, [r7, #2]
 800388e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	887a      	ldrh	r2, [r7, #2]
 8003894:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038aa:	d802      	bhi.n	80038b2 <HAL_SPI_TransmitReceive+0xe6>
 80038ac:	8a3b      	ldrh	r3, [r7, #16]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d908      	bls.n	80038c4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038c0:	605a      	str	r2, [r3, #4]
 80038c2:	e007      	b.n	80038d4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038d2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038de:	2b40      	cmp	r3, #64	; 0x40
 80038e0:	d007      	beq.n	80038f2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038fa:	d97c      	bls.n	80039f6 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <HAL_SPI_TransmitReceive+0x13e>
 8003904:	8a7b      	ldrh	r3, [r7, #18]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d169      	bne.n	80039de <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390e:	881a      	ldrh	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391a:	1c9a      	adds	r2, r3, #2
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003924:	b29b      	uxth	r3, r3
 8003926:	3b01      	subs	r3, #1
 8003928:	b29a      	uxth	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800392e:	e056      	b.n	80039de <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b02      	cmp	r3, #2
 800393c:	d11b      	bne.n	8003976 <HAL_SPI_TransmitReceive+0x1aa>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003942:	b29b      	uxth	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	d016      	beq.n	8003976 <HAL_SPI_TransmitReceive+0x1aa>
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	2b01      	cmp	r3, #1
 800394c:	d113      	bne.n	8003976 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003952:	881a      	ldrh	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395e:	1c9a      	adds	r2, r3, #2
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003968:	b29b      	uxth	r3, r3
 800396a:	3b01      	subs	r3, #1
 800396c:	b29a      	uxth	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003972:	2300      	movs	r3, #0
 8003974:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b01      	cmp	r3, #1
 8003982:	d11c      	bne.n	80039be <HAL_SPI_TransmitReceive+0x1f2>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800398a:	b29b      	uxth	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	d016      	beq.n	80039be <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	b292      	uxth	r2, r2
 800399c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	1c9a      	adds	r2, r3, #2
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039ba:	2301      	movs	r3, #1
 80039bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80039be:	f7fd fd71 	bl	80014a4 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d807      	bhi.n	80039de <HAL_SPI_TransmitReceive+0x212>
 80039ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039d4:	d003      	beq.n	80039de <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80039dc:	e0fb      	b.n	8003bd6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1a3      	bne.n	8003930 <HAL_SPI_TransmitReceive+0x164>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d19d      	bne.n	8003930 <HAL_SPI_TransmitReceive+0x164>
 80039f4:	e0df      	b.n	8003bb6 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_SPI_TransmitReceive+0x23a>
 80039fe:	8a7b      	ldrh	r3, [r7, #18]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	f040 80cb 	bne.w	8003b9c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d912      	bls.n	8003a36 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a14:	881a      	ldrh	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a20:	1c9a      	adds	r2, r3, #2
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b02      	subs	r3, #2
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a34:	e0b2      	b.n	8003b9c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	330c      	adds	r3, #12
 8003a40:	7812      	ldrb	r2, [r2, #0]
 8003a42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a48:	1c5a      	adds	r2, r3, #1
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a5c:	e09e      	b.n	8003b9c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d134      	bne.n	8003ad6 <HAL_SPI_TransmitReceive+0x30a>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d02f      	beq.n	8003ad6 <HAL_SPI_TransmitReceive+0x30a>
 8003a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d12c      	bne.n	8003ad6 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d912      	bls.n	8003aac <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8a:	881a      	ldrh	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a96:	1c9a      	adds	r2, r3, #2
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	3b02      	subs	r3, #2
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003aaa:	e012      	b.n	8003ad2 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	330c      	adds	r3, #12
 8003ab6:	7812      	ldrb	r2, [r2, #0]
 8003ab8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d148      	bne.n	8003b76 <HAL_SPI_TransmitReceive+0x3aa>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d042      	beq.n	8003b76 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d923      	bls.n	8003b44 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	b292      	uxth	r2, r2
 8003b08:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	1c9a      	adds	r2, r3, #2
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	3b02      	subs	r3, #2
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d81f      	bhi.n	8003b72 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b40:	605a      	str	r2, [r3, #4]
 8003b42:	e016      	b.n	8003b72 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f103 020c 	add.w	r2, r3, #12
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	7812      	ldrb	r2, [r2, #0]
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	1c5a      	adds	r2, r3, #1
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b72:	2301      	movs	r3, #1
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b76:	f7fd fc95 	bl	80014a4 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d803      	bhi.n	8003b8e <HAL_SPI_TransmitReceive+0x3c2>
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b8c:	d102      	bne.n	8003b94 <HAL_SPI_TransmitReceive+0x3c8>
 8003b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d103      	bne.n	8003b9c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003b9a:	e01c      	b.n	8003bd6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f47f af5b 	bne.w	8003a5e <HAL_SPI_TransmitReceive+0x292>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f47f af54 	bne.w	8003a5e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bb6:	69fa      	ldr	r2, [r7, #28]
 8003bb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 f990 	bl	8003ee0 <SPI_EndRxTxTransaction>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d006      	beq.n	8003bd4 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	661a      	str	r2, [r3, #96]	; 0x60
 8003bd2:	e000      	b.n	8003bd6 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003bd4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003be6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3728      	adds	r7, #40	; 0x28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b088      	sub	sp, #32
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	603b      	str	r3, [r7, #0]
 8003c00:	4613      	mov	r3, r2
 8003c02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c04:	f7fd fc4e 	bl	80014a4 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0c:	1a9b      	subs	r3, r3, r2
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	4413      	add	r3, r2
 8003c12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c14:	f7fd fc46 	bl	80014a4 <HAL_GetTick>
 8003c18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c1a:	4b39      	ldr	r3, [pc, #228]	; (8003d00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	015b      	lsls	r3, r3, #5
 8003c20:	0d1b      	lsrs	r3, r3, #20
 8003c22:	69fa      	ldr	r2, [r7, #28]
 8003c24:	fb02 f303 	mul.w	r3, r2, r3
 8003c28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c2a:	e054      	b.n	8003cd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c32:	d050      	beq.n	8003cd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c34:	f7fd fc36 	bl	80014a4 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	69fa      	ldr	r2, [r7, #28]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d902      	bls.n	8003c4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d13d      	bne.n	8003cc6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c62:	d111      	bne.n	8003c88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c6c:	d004      	beq.n	8003c78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c76:	d107      	bne.n	8003c88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c90:	d10f      	bne.n	8003cb2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e017      	b.n	8003cf6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d101      	bne.n	8003cd0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	bf0c      	ite	eq
 8003ce6:	2301      	moveq	r3, #1
 8003ce8:	2300      	movne	r3, #0
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	461a      	mov	r2, r3
 8003cee:	79fb      	ldrb	r3, [r7, #7]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d19b      	bne.n	8003c2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3720      	adds	r7, #32
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20000008 	.word	0x20000008

08003d04 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b08a      	sub	sp, #40	; 0x28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
 8003d10:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003d12:	2300      	movs	r3, #0
 8003d14:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003d16:	f7fd fbc5 	bl	80014a4 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1e:	1a9b      	subs	r3, r3, r2
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	4413      	add	r3, r2
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003d26:	f7fd fbbd 	bl	80014a4 <HAL_GetTick>
 8003d2a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	330c      	adds	r3, #12
 8003d32:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003d34:	4b3d      	ldr	r3, [pc, #244]	; (8003e2c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4413      	add	r3, r2
 8003d3e:	00da      	lsls	r2, r3, #3
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	0d1b      	lsrs	r3, r3, #20
 8003d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d46:	fb02 f303 	mul.w	r3, r2, r3
 8003d4a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003d4c:	e060      	b.n	8003e10 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003d54:	d107      	bne.n	8003d66 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d104      	bne.n	8003d66 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003d64:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d6c:	d050      	beq.n	8003e10 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d6e:	f7fd fb99 	bl	80014a4 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d902      	bls.n	8003d84 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d13d      	bne.n	8003e00 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d92:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d9c:	d111      	bne.n	8003dc2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003da6:	d004      	beq.n	8003db2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db0:	d107      	bne.n	8003dc2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dc0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dca:	d10f      	bne.n	8003dec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e010      	b.n	8003e22 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003e06:	2300      	movs	r3, #0
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d196      	bne.n	8003d4e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3728      	adds	r7, #40	; 0x28
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	20000008 	.word	0x20000008

08003e30 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af02      	add	r7, sp, #8
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e44:	d111      	bne.n	8003e6a <SPI_EndRxTransaction+0x3a>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e4e:	d004      	beq.n	8003e5a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e58:	d107      	bne.n	8003e6a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e68:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2200      	movs	r2, #0
 8003e72:	2180      	movs	r1, #128	; 0x80
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f7ff febd 	bl	8003bf4 <SPI_WaitFlagStateUntilTimeout>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d007      	beq.n	8003e90 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e84:	f043 0220 	orr.w	r2, r3, #32
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e023      	b.n	8003ed8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e98:	d11d      	bne.n	8003ed6 <SPI_EndRxTransaction+0xa6>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ea2:	d004      	beq.n	8003eae <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eac:	d113      	bne.n	8003ed6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f7ff ff22 	bl	8003d04 <SPI_WaitFifoStateUntilTimeout>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d007      	beq.n	8003ed6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eca:	f043 0220 	orr.w	r2, r3, #32
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e000      	b.n	8003ed8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af02      	add	r7, sp, #8
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f7ff ff03 	bl	8003d04 <SPI_WaitFifoStateUntilTimeout>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d007      	beq.n	8003f14 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f08:	f043 0220 	orr.w	r2, r3, #32
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e027      	b.n	8003f64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	2180      	movs	r1, #128	; 0x80
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f7ff fe68 	bl	8003bf4 <SPI_WaitFlagStateUntilTimeout>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d007      	beq.n	8003f3a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f2e:	f043 0220 	orr.w	r2, r3, #32
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e014      	b.n	8003f64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f7ff fedc 	bl	8003d04 <SPI_WaitFifoStateUntilTimeout>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d007      	beq.n	8003f62 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f56:	f043 0220 	orr.w	r2, r3, #32
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e000      	b.n	8003f64 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <LL_RCC_GetUSARTClockSource>:
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f78:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4013      	ands	r3, r2
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <LL_RCC_GetLPUARTClockSource>:
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f98:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4013      	ands	r3, r2
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e042      	b.n	8004044 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d106      	bne.n	8003fd6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7fd f979 	bl	80012c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2224      	movs	r2, #36	; 0x24
 8003fda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0201 	bic.w	r2, r2, #1
 8003fec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f8b2 	bl	8004158 <UART_SetConfig>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d101      	bne.n	8003ffe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e022      	b.n	8004044 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004002:	2b00      	cmp	r3, #0
 8004004:	d002      	beq.n	800400c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 face 	bl	80045a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800401a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689a      	ldr	r2, [r3, #8]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800402a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f042 0201 	orr.w	r2, r2, #1
 800403a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 fb55 	bl	80046ec <UART_CheckIdleState>
 8004042:	4603      	mov	r3, r0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b08a      	sub	sp, #40	; 0x28
 8004050:	af02      	add	r7, sp, #8
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	603b      	str	r3, [r7, #0]
 8004058:	4613      	mov	r3, r2
 800405a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004062:	2b20      	cmp	r3, #32
 8004064:	d173      	bne.n	800414e <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d002      	beq.n	8004072 <HAL_UART_Transmit+0x26>
 800406c:	88fb      	ldrh	r3, [r7, #6]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e06c      	b.n	8004150 <HAL_UART_Transmit+0x104>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2221      	movs	r2, #33	; 0x21
 8004082:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004086:	f7fd fa0d 	bl	80014a4 <HAL_GetTick>
 800408a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	88fa      	ldrh	r2, [r7, #6]
 8004090:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	88fa      	ldrh	r2, [r7, #6]
 8004098:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a4:	d108      	bne.n	80040b8 <HAL_UART_Transmit+0x6c>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d104      	bne.n	80040b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80040ae:	2300      	movs	r3, #0
 80040b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	61bb      	str	r3, [r7, #24]
 80040b6:	e003      	b.n	80040c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040bc:	2300      	movs	r3, #0
 80040be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040c0:	e02c      	b.n	800411c <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2200      	movs	r2, #0
 80040ca:	2180      	movs	r1, #128	; 0x80
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 fb5b 	bl	8004788 <UART_WaitOnFlagUntilTimeout>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e039      	b.n	8004150 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10b      	bne.n	80040fa <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	881b      	ldrh	r3, [r3, #0]
 80040e6:	461a      	mov	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	3302      	adds	r3, #2
 80040f6:	61bb      	str	r3, [r7, #24]
 80040f8:	e007      	b.n	800410a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	781a      	ldrb	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	3301      	adds	r3, #1
 8004108:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004110:	b29b      	uxth	r3, r3
 8004112:	3b01      	subs	r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004122:	b29b      	uxth	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1cc      	bne.n	80040c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	2200      	movs	r2, #0
 8004130:	2140      	movs	r1, #64	; 0x40
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 fb28 	bl	8004788 <UART_WaitOnFlagUntilTimeout>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e006      	b.n	8004150 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2220      	movs	r2, #32
 8004146:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800414a:	2300      	movs	r3, #0
 800414c:	e000      	b.n	8004150 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 800414e:	2302      	movs	r3, #2
  }
}
 8004150:	4618      	mov	r0, r3
 8004152:	3720      	adds	r7, #32
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800415c:	b08c      	sub	sp, #48	; 0x30
 800415e:	af00      	add	r7, sp, #0
 8004160:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	431a      	orrs	r2, r3
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	431a      	orrs	r2, r3
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	4313      	orrs	r3, r2
 800417e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	4baf      	ldr	r3, [pc, #700]	; (8004444 <UART_SetConfig+0x2ec>)
 8004188:	4013      	ands	r3, r2
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	6812      	ldr	r2, [r2, #0]
 800418e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004190:	430b      	orrs	r3, r1
 8004192:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4aa4      	ldr	r2, [pc, #656]	; (8004448 <UART_SetConfig+0x2f0>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d004      	beq.n	80041c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041c0:	4313      	orrs	r3, r2
 80041c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80041ce:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	6812      	ldr	r2, [r2, #0]
 80041d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041d8:	430b      	orrs	r3, r1
 80041da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e2:	f023 010f 	bic.w	r1, r3, #15
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a95      	ldr	r2, [pc, #596]	; (800444c <UART_SetConfig+0x2f4>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d125      	bne.n	8004248 <UART_SetConfig+0xf0>
 80041fc:	2003      	movs	r0, #3
 80041fe:	f7ff feb5 	bl	8003f6c <LL_RCC_GetUSARTClockSource>
 8004202:	4603      	mov	r3, r0
 8004204:	2b03      	cmp	r3, #3
 8004206:	d81b      	bhi.n	8004240 <UART_SetConfig+0xe8>
 8004208:	a201      	add	r2, pc, #4	; (adr r2, 8004210 <UART_SetConfig+0xb8>)
 800420a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420e:	bf00      	nop
 8004210:	08004221 	.word	0x08004221
 8004214:	08004231 	.word	0x08004231
 8004218:	08004229 	.word	0x08004229
 800421c:	08004239 	.word	0x08004239
 8004220:	2301      	movs	r3, #1
 8004222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004226:	e042      	b.n	80042ae <UART_SetConfig+0x156>
 8004228:	2302      	movs	r3, #2
 800422a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800422e:	e03e      	b.n	80042ae <UART_SetConfig+0x156>
 8004230:	2304      	movs	r3, #4
 8004232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004236:	e03a      	b.n	80042ae <UART_SetConfig+0x156>
 8004238:	2308      	movs	r3, #8
 800423a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800423e:	e036      	b.n	80042ae <UART_SetConfig+0x156>
 8004240:	2310      	movs	r3, #16
 8004242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004246:	e032      	b.n	80042ae <UART_SetConfig+0x156>
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a7e      	ldr	r2, [pc, #504]	; (8004448 <UART_SetConfig+0x2f0>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d12a      	bne.n	80042a8 <UART_SetConfig+0x150>
 8004252:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004256:	f7ff fe99 	bl	8003f8c <LL_RCC_GetLPUARTClockSource>
 800425a:	4603      	mov	r3, r0
 800425c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004260:	d01a      	beq.n	8004298 <UART_SetConfig+0x140>
 8004262:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004266:	d81b      	bhi.n	80042a0 <UART_SetConfig+0x148>
 8004268:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800426c:	d00c      	beq.n	8004288 <UART_SetConfig+0x130>
 800426e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004272:	d815      	bhi.n	80042a0 <UART_SetConfig+0x148>
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <UART_SetConfig+0x128>
 8004278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800427c:	d008      	beq.n	8004290 <UART_SetConfig+0x138>
 800427e:	e00f      	b.n	80042a0 <UART_SetConfig+0x148>
 8004280:	2300      	movs	r3, #0
 8004282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004286:	e012      	b.n	80042ae <UART_SetConfig+0x156>
 8004288:	2302      	movs	r3, #2
 800428a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800428e:	e00e      	b.n	80042ae <UART_SetConfig+0x156>
 8004290:	2304      	movs	r3, #4
 8004292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004296:	e00a      	b.n	80042ae <UART_SetConfig+0x156>
 8004298:	2308      	movs	r3, #8
 800429a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800429e:	e006      	b.n	80042ae <UART_SetConfig+0x156>
 80042a0:	2310      	movs	r3, #16
 80042a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042a6:	e002      	b.n	80042ae <UART_SetConfig+0x156>
 80042a8:	2310      	movs	r3, #16
 80042aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a65      	ldr	r2, [pc, #404]	; (8004448 <UART_SetConfig+0x2f0>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	f040 8097 	bne.w	80043e8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80042be:	2b08      	cmp	r3, #8
 80042c0:	d823      	bhi.n	800430a <UART_SetConfig+0x1b2>
 80042c2:	a201      	add	r2, pc, #4	; (adr r2, 80042c8 <UART_SetConfig+0x170>)
 80042c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c8:	080042ed 	.word	0x080042ed
 80042cc:	0800430b 	.word	0x0800430b
 80042d0:	080042f5 	.word	0x080042f5
 80042d4:	0800430b 	.word	0x0800430b
 80042d8:	080042fb 	.word	0x080042fb
 80042dc:	0800430b 	.word	0x0800430b
 80042e0:	0800430b 	.word	0x0800430b
 80042e4:	0800430b 	.word	0x0800430b
 80042e8:	08004303 	.word	0x08004303
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042ec:	f7fe fc20 	bl	8002b30 <HAL_RCC_GetPCLK1Freq>
 80042f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80042f2:	e010      	b.n	8004316 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042f4:	4b56      	ldr	r3, [pc, #344]	; (8004450 <UART_SetConfig+0x2f8>)
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80042f8:	e00d      	b.n	8004316 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042fa:	f7fe fb99 	bl	8002a30 <HAL_RCC_GetSysClockFreq>
 80042fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004300:	e009      	b.n	8004316 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004306:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004308:	e005      	b.n	8004316 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800430a:	2300      	movs	r3, #0
 800430c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004314:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 812b 	beq.w	8004574 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	4a4c      	ldr	r2, [pc, #304]	; (8004454 <UART_SetConfig+0x2fc>)
 8004324:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004328:	461a      	mov	r2, r3
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004330:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	4613      	mov	r3, r2
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	4413      	add	r3, r2
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	429a      	cmp	r2, r3
 8004340:	d305      	bcc.n	800434e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	429a      	cmp	r2, r3
 800434c:	d903      	bls.n	8004356 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004354:	e10e      	b.n	8004574 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	2200      	movs	r2, #0
 800435a:	60bb      	str	r3, [r7, #8]
 800435c:	60fa      	str	r2, [r7, #12]
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	4a3c      	ldr	r2, [pc, #240]	; (8004454 <UART_SetConfig+0x2fc>)
 8004364:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004368:	b29b      	uxth	r3, r3
 800436a:	2200      	movs	r2, #0
 800436c:	603b      	str	r3, [r7, #0]
 800436e:	607a      	str	r2, [r7, #4]
 8004370:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004374:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004378:	f7fb ff52 	bl	8000220 <__aeabi_uldivmod>
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	4610      	mov	r0, r2
 8004382:	4619      	mov	r1, r3
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	f04f 0300 	mov.w	r3, #0
 800438c:	020b      	lsls	r3, r1, #8
 800438e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004392:	0202      	lsls	r2, r0, #8
 8004394:	6979      	ldr	r1, [r7, #20]
 8004396:	6849      	ldr	r1, [r1, #4]
 8004398:	0849      	lsrs	r1, r1, #1
 800439a:	2000      	movs	r0, #0
 800439c:	460c      	mov	r4, r1
 800439e:	4605      	mov	r5, r0
 80043a0:	eb12 0804 	adds.w	r8, r2, r4
 80043a4:	eb43 0905 	adc.w	r9, r3, r5
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	469a      	mov	sl, r3
 80043b0:	4693      	mov	fp, r2
 80043b2:	4652      	mov	r2, sl
 80043b4:	465b      	mov	r3, fp
 80043b6:	4640      	mov	r0, r8
 80043b8:	4649      	mov	r1, r9
 80043ba:	f7fb ff31 	bl	8000220 <__aeabi_uldivmod>
 80043be:	4602      	mov	r2, r0
 80043c0:	460b      	mov	r3, r1
 80043c2:	4613      	mov	r3, r2
 80043c4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043cc:	d308      	bcc.n	80043e0 <UART_SetConfig+0x288>
 80043ce:	6a3b      	ldr	r3, [r7, #32]
 80043d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043d4:	d204      	bcs.n	80043e0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6a3a      	ldr	r2, [r7, #32]
 80043dc:	60da      	str	r2, [r3, #12]
 80043de:	e0c9      	b.n	8004574 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80043e6:	e0c5      	b.n	8004574 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	69db      	ldr	r3, [r3, #28]
 80043ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043f0:	d16d      	bne.n	80044ce <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80043f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80043f6:	3b01      	subs	r3, #1
 80043f8:	2b07      	cmp	r3, #7
 80043fa:	d82d      	bhi.n	8004458 <UART_SetConfig+0x300>
 80043fc:	a201      	add	r2, pc, #4	; (adr r2, 8004404 <UART_SetConfig+0x2ac>)
 80043fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004402:	bf00      	nop
 8004404:	08004425 	.word	0x08004425
 8004408:	0800442d 	.word	0x0800442d
 800440c:	08004459 	.word	0x08004459
 8004410:	08004433 	.word	0x08004433
 8004414:	08004459 	.word	0x08004459
 8004418:	08004459 	.word	0x08004459
 800441c:	08004459 	.word	0x08004459
 8004420:	0800443b 	.word	0x0800443b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004424:	f7fe fb9a 	bl	8002b5c <HAL_RCC_GetPCLK2Freq>
 8004428:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800442a:	e01b      	b.n	8004464 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800442c:	4b08      	ldr	r3, [pc, #32]	; (8004450 <UART_SetConfig+0x2f8>)
 800442e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004430:	e018      	b.n	8004464 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004432:	f7fe fafd 	bl	8002a30 <HAL_RCC_GetSysClockFreq>
 8004436:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004438:	e014      	b.n	8004464 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800443a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800443e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004440:	e010      	b.n	8004464 <UART_SetConfig+0x30c>
 8004442:	bf00      	nop
 8004444:	cfff69f3 	.word	0xcfff69f3
 8004448:	40008000 	.word	0x40008000
 800444c:	40013800 	.word	0x40013800
 8004450:	00f42400 	.word	0x00f42400
 8004454:	08005cbc 	.word	0x08005cbc
      default:
        pclk = 0U;
 8004458:	2300      	movs	r3, #0
 800445a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004462:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	2b00      	cmp	r3, #0
 8004468:	f000 8084 	beq.w	8004574 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	4a4b      	ldr	r2, [pc, #300]	; (80045a0 <UART_SetConfig+0x448>)
 8004472:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004476:	461a      	mov	r2, r3
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	fbb3 f3f2 	udiv	r3, r3, r2
 800447e:	005a      	lsls	r2, r3, #1
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	085b      	lsrs	r3, r3, #1
 8004486:	441a      	add	r2, r3
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004490:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	2b0f      	cmp	r3, #15
 8004496:	d916      	bls.n	80044c6 <UART_SetConfig+0x36e>
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800449e:	d212      	bcs.n	80044c6 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	f023 030f 	bic.w	r3, r3, #15
 80044a8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	085b      	lsrs	r3, r3, #1
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	f003 0307 	and.w	r3, r3, #7
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	8bfb      	ldrh	r3, [r7, #30]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	8bfa      	ldrh	r2, [r7, #30]
 80044c2:	60da      	str	r2, [r3, #12]
 80044c4:	e056      	b.n	8004574 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80044cc:	e052      	b.n	8004574 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80044d2:	3b01      	subs	r3, #1
 80044d4:	2b07      	cmp	r3, #7
 80044d6:	d822      	bhi.n	800451e <UART_SetConfig+0x3c6>
 80044d8:	a201      	add	r2, pc, #4	; (adr r2, 80044e0 <UART_SetConfig+0x388>)
 80044da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044de:	bf00      	nop
 80044e0:	08004501 	.word	0x08004501
 80044e4:	08004509 	.word	0x08004509
 80044e8:	0800451f 	.word	0x0800451f
 80044ec:	0800450f 	.word	0x0800450f
 80044f0:	0800451f 	.word	0x0800451f
 80044f4:	0800451f 	.word	0x0800451f
 80044f8:	0800451f 	.word	0x0800451f
 80044fc:	08004517 	.word	0x08004517
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004500:	f7fe fb2c 	bl	8002b5c <HAL_RCC_GetPCLK2Freq>
 8004504:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004506:	e010      	b.n	800452a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004508:	4b26      	ldr	r3, [pc, #152]	; (80045a4 <UART_SetConfig+0x44c>)
 800450a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800450c:	e00d      	b.n	800452a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800450e:	f7fe fa8f 	bl	8002a30 <HAL_RCC_GetSysClockFreq>
 8004512:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004514:	e009      	b.n	800452a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800451a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800451c:	e005      	b.n	800452a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800451e:	2300      	movs	r3, #0
 8004520:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004528:	bf00      	nop
    }

    if (pclk != 0U)
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	2b00      	cmp	r3, #0
 800452e:	d021      	beq.n	8004574 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	4a1a      	ldr	r2, [pc, #104]	; (80045a0 <UART_SetConfig+0x448>)
 8004536:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800453a:	461a      	mov	r2, r3
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	085b      	lsrs	r3, r3, #1
 8004548:	441a      	add	r2, r3
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004552:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004554:	6a3b      	ldr	r3, [r7, #32]
 8004556:	2b0f      	cmp	r3, #15
 8004558:	d909      	bls.n	800456e <UART_SetConfig+0x416>
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004560:	d205      	bcs.n	800456e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004562:	6a3b      	ldr	r3, [r7, #32]
 8004564:	b29a      	uxth	r2, r3
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	60da      	str	r2, [r3, #12]
 800456c:	e002      	b.n	8004574 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	2201      	movs	r2, #1
 8004578:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	2201      	movs	r2, #1
 8004580:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	2200      	movs	r2, #0
 8004588:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2200      	movs	r2, #0
 800458e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004590:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004594:	4618      	mov	r0, r3
 8004596:	3730      	adds	r7, #48	; 0x30
 8004598:	46bd      	mov	sp, r7
 800459a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800459e:	bf00      	nop
 80045a0:	08005cbc 	.word	0x08005cbc
 80045a4:	00f42400 	.word	0x00f42400

080045a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00a      	beq.n	80045d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00a      	beq.n	80045f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00a      	beq.n	8004616 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	430a      	orrs	r2, r1
 8004614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461a:	f003 0308 	and.w	r3, r3, #8
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00a      	beq.n	8004638 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463c:	f003 0310 	and.w	r3, r3, #16
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00a      	beq.n	800465a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465e:	f003 0320 	and.w	r3, r3, #32
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00a      	beq.n	800467c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	430a      	orrs	r2, r1
 800467a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004684:	2b00      	cmp	r3, #0
 8004686:	d01a      	beq.n	80046be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046a6:	d10a      	bne.n	80046be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	605a      	str	r2, [r3, #4]
  }
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af02      	add	r7, sp, #8
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046fc:	f7fc fed2 	bl	80014a4 <HAL_GetTick>
 8004700:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0308 	and.w	r3, r3, #8
 800470c:	2b08      	cmp	r3, #8
 800470e:	d10e      	bne.n	800472e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004710:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f832 	bl	8004788 <UART_WaitOnFlagUntilTimeout>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e028      	b.n	8004780 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	2b04      	cmp	r3, #4
 800473a:	d10e      	bne.n	800475a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800473c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f81c 	bl	8004788 <UART_WaitOnFlagUntilTimeout>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e012      	b.n	8004780 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2220      	movs	r2, #32
 800475e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2220      	movs	r2, #32
 8004766:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b09c      	sub	sp, #112	; 0x70
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	603b      	str	r3, [r7, #0]
 8004794:	4613      	mov	r3, r2
 8004796:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004798:	e0a9      	b.n	80048ee <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800479a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800479c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047a0:	f000 80a5 	beq.w	80048ee <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047a4:	f7fc fe7e 	bl	80014a4 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d302      	bcc.n	80047ba <UART_WaitOnFlagUntilTimeout+0x32>
 80047b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d140      	bne.n	800483c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047c2:	e853 3f00 	ldrex	r3, [r3]
 80047c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80047c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047ce:	667b      	str	r3, [r7, #100]	; 0x64
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	461a      	mov	r2, r3
 80047d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047da:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047dc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80047de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80047e0:	e841 2300 	strex	r3, r2, [r1]
 80047e4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80047e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1e6      	bne.n	80047ba <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3308      	adds	r3, #8
 80047f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047f6:	e853 3f00 	ldrex	r3, [r3]
 80047fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fe:	f023 0301 	bic.w	r3, r3, #1
 8004802:	663b      	str	r3, [r7, #96]	; 0x60
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	3308      	adds	r3, #8
 800480a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800480c:	64ba      	str	r2, [r7, #72]	; 0x48
 800480e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004810:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004812:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004814:	e841 2300 	strex	r3, r2, [r1]
 8004818:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800481a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1e5      	bne.n	80047ec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2220      	movs	r2, #32
 8004824:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2220      	movs	r2, #32
 800482c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e069      	b.n	8004910 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	2b00      	cmp	r3, #0
 8004848:	d051      	beq.n	80048ee <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004854:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004858:	d149      	bne.n	80048ee <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004862:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486c:	e853 3f00 	ldrex	r3, [r3]
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004878:	66fb      	str	r3, [r7, #108]	; 0x6c
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	461a      	mov	r2, r3
 8004880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004882:	637b      	str	r3, [r7, #52]	; 0x34
 8004884:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004886:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004888:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800488a:	e841 2300 	strex	r3, r2, [r1]
 800488e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1e6      	bne.n	8004864 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	3308      	adds	r3, #8
 800489c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	e853 3f00 	ldrex	r3, [r3]
 80048a4:	613b      	str	r3, [r7, #16]
   return(result);
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	f023 0301 	bic.w	r3, r3, #1
 80048ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3308      	adds	r3, #8
 80048b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80048b6:	623a      	str	r2, [r7, #32]
 80048b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ba:	69f9      	ldr	r1, [r7, #28]
 80048bc:	6a3a      	ldr	r2, [r7, #32]
 80048be:	e841 2300 	strex	r3, r2, [r1]
 80048c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1e5      	bne.n	8004896 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2220      	movs	r2, #32
 80048d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2220      	movs	r2, #32
 80048de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e010      	b.n	8004910 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	69da      	ldr	r2, [r3, #28]
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	4013      	ands	r3, r2
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	bf0c      	ite	eq
 80048fe:	2301      	moveq	r3, #1
 8004900:	2300      	movne	r3, #0
 8004902:	b2db      	uxtb	r3, r3
 8004904:	461a      	mov	r2, r3
 8004906:	79fb      	ldrb	r3, [r7, #7]
 8004908:	429a      	cmp	r2, r3
 800490a:	f43f af46 	beq.w	800479a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3770      	adds	r7, #112	; 0x70
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004926:	2b01      	cmp	r3, #1
 8004928:	d101      	bne.n	800492e <HAL_UARTEx_DisableFifoMode+0x16>
 800492a:	2302      	movs	r3, #2
 800492c:	e027      	b.n	800497e <HAL_UARTEx_DisableFifoMode+0x66>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2224      	movs	r2, #36	; 0x24
 800493a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0201 	bic.w	r2, r2, #1
 8004954:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800495c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2220      	movs	r2, #32
 8004970:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b084      	sub	sp, #16
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800499a:	2b01      	cmp	r3, #1
 800499c:	d101      	bne.n	80049a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800499e:	2302      	movs	r3, #2
 80049a0:	e02d      	b.n	80049fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2224      	movs	r2, #36	; 0x24
 80049ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0201 	bic.w	r2, r2, #1
 80049c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f850 	bl	8004a84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2220      	movs	r2, #32
 80049f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b084      	sub	sp, #16
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
 8004a0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d101      	bne.n	8004a1e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	e02d      	b.n	8004a7a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2224      	movs	r2, #36	; 0x24
 8004a2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 0201 	bic.w	r2, r2, #1
 8004a44:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f812 	bl	8004a84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
	...

08004a84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d108      	bne.n	8004aa6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004aa4:	e031      	b.n	8004b0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004aa6:	2308      	movs	r3, #8
 8004aa8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004aaa:	2308      	movs	r3, #8
 8004aac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	0e5b      	lsrs	r3, r3, #25
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	0f5b      	lsrs	r3, r3, #29
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ace:	7bbb      	ldrb	r3, [r7, #14]
 8004ad0:	7b3a      	ldrb	r2, [r7, #12]
 8004ad2:	4911      	ldr	r1, [pc, #68]	; (8004b18 <UARTEx_SetNbDataToProcess+0x94>)
 8004ad4:	5c8a      	ldrb	r2, [r1, r2]
 8004ad6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004ada:	7b3a      	ldrb	r2, [r7, #12]
 8004adc:	490f      	ldr	r1, [pc, #60]	; (8004b1c <UARTEx_SetNbDataToProcess+0x98>)
 8004ade:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ae0:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004aec:	7bfb      	ldrb	r3, [r7, #15]
 8004aee:	7b7a      	ldrb	r2, [r7, #13]
 8004af0:	4909      	ldr	r1, [pc, #36]	; (8004b18 <UARTEx_SetNbDataToProcess+0x94>)
 8004af2:	5c8a      	ldrb	r2, [r1, r2]
 8004af4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004af8:	7b7a      	ldrb	r2, [r7, #13]
 8004afa:	4908      	ldr	r1, [pc, #32]	; (8004b1c <UARTEx_SetNbDataToProcess+0x98>)
 8004afc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004afe:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004b0a:	bf00      	nop
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	08005cd4 	.word	0x08005cd4
 8004b1c:	08005cdc 	.word	0x08005cdc

08004b20 <__errno>:
 8004b20:	4b01      	ldr	r3, [pc, #4]	; (8004b28 <__errno+0x8>)
 8004b22:	6818      	ldr	r0, [r3, #0]
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	20000014 	.word	0x20000014

08004b2c <__libc_init_array>:
 8004b2c:	b570      	push	{r4, r5, r6, lr}
 8004b2e:	4d0d      	ldr	r5, [pc, #52]	; (8004b64 <__libc_init_array+0x38>)
 8004b30:	4c0d      	ldr	r4, [pc, #52]	; (8004b68 <__libc_init_array+0x3c>)
 8004b32:	1b64      	subs	r4, r4, r5
 8004b34:	10a4      	asrs	r4, r4, #2
 8004b36:	2600      	movs	r6, #0
 8004b38:	42a6      	cmp	r6, r4
 8004b3a:	d109      	bne.n	8004b50 <__libc_init_array+0x24>
 8004b3c:	4d0b      	ldr	r5, [pc, #44]	; (8004b6c <__libc_init_array+0x40>)
 8004b3e:	4c0c      	ldr	r4, [pc, #48]	; (8004b70 <__libc_init_array+0x44>)
 8004b40:	f001 f824 	bl	8005b8c <_init>
 8004b44:	1b64      	subs	r4, r4, r5
 8004b46:	10a4      	asrs	r4, r4, #2
 8004b48:	2600      	movs	r6, #0
 8004b4a:	42a6      	cmp	r6, r4
 8004b4c:	d105      	bne.n	8004b5a <__libc_init_array+0x2e>
 8004b4e:	bd70      	pop	{r4, r5, r6, pc}
 8004b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b54:	4798      	blx	r3
 8004b56:	3601      	adds	r6, #1
 8004b58:	e7ee      	b.n	8004b38 <__libc_init_array+0xc>
 8004b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b5e:	4798      	blx	r3
 8004b60:	3601      	adds	r6, #1
 8004b62:	e7f2      	b.n	8004b4a <__libc_init_array+0x1e>
 8004b64:	08005d84 	.word	0x08005d84
 8004b68:	08005d84 	.word	0x08005d84
 8004b6c:	08005d84 	.word	0x08005d84
 8004b70:	08005d88 	.word	0x08005d88

08004b74 <memset>:
 8004b74:	4402      	add	r2, r0
 8004b76:	4603      	mov	r3, r0
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d100      	bne.n	8004b7e <memset+0xa>
 8004b7c:	4770      	bx	lr
 8004b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8004b82:	e7f9      	b.n	8004b78 <memset+0x4>

08004b84 <iprintf>:
 8004b84:	b40f      	push	{r0, r1, r2, r3}
 8004b86:	4b0a      	ldr	r3, [pc, #40]	; (8004bb0 <iprintf+0x2c>)
 8004b88:	b513      	push	{r0, r1, r4, lr}
 8004b8a:	681c      	ldr	r4, [r3, #0]
 8004b8c:	b124      	cbz	r4, 8004b98 <iprintf+0x14>
 8004b8e:	69a3      	ldr	r3, [r4, #24]
 8004b90:	b913      	cbnz	r3, 8004b98 <iprintf+0x14>
 8004b92:	4620      	mov	r0, r4
 8004b94:	f000 fa5e 	bl	8005054 <__sinit>
 8004b98:	ab05      	add	r3, sp, #20
 8004b9a:	9a04      	ldr	r2, [sp, #16]
 8004b9c:	68a1      	ldr	r1, [r4, #8]
 8004b9e:	9301      	str	r3, [sp, #4]
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	f000 fc67 	bl	8005474 <_vfiprintf_r>
 8004ba6:	b002      	add	sp, #8
 8004ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bac:	b004      	add	sp, #16
 8004bae:	4770      	bx	lr
 8004bb0:	20000014 	.word	0x20000014

08004bb4 <_puts_r>:
 8004bb4:	b570      	push	{r4, r5, r6, lr}
 8004bb6:	460e      	mov	r6, r1
 8004bb8:	4605      	mov	r5, r0
 8004bba:	b118      	cbz	r0, 8004bc4 <_puts_r+0x10>
 8004bbc:	6983      	ldr	r3, [r0, #24]
 8004bbe:	b90b      	cbnz	r3, 8004bc4 <_puts_r+0x10>
 8004bc0:	f000 fa48 	bl	8005054 <__sinit>
 8004bc4:	69ab      	ldr	r3, [r5, #24]
 8004bc6:	68ac      	ldr	r4, [r5, #8]
 8004bc8:	b913      	cbnz	r3, 8004bd0 <_puts_r+0x1c>
 8004bca:	4628      	mov	r0, r5
 8004bcc:	f000 fa42 	bl	8005054 <__sinit>
 8004bd0:	4b2c      	ldr	r3, [pc, #176]	; (8004c84 <_puts_r+0xd0>)
 8004bd2:	429c      	cmp	r4, r3
 8004bd4:	d120      	bne.n	8004c18 <_puts_r+0x64>
 8004bd6:	686c      	ldr	r4, [r5, #4]
 8004bd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bda:	07db      	lsls	r3, r3, #31
 8004bdc:	d405      	bmi.n	8004bea <_puts_r+0x36>
 8004bde:	89a3      	ldrh	r3, [r4, #12]
 8004be0:	0598      	lsls	r0, r3, #22
 8004be2:	d402      	bmi.n	8004bea <_puts_r+0x36>
 8004be4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004be6:	f000 fad3 	bl	8005190 <__retarget_lock_acquire_recursive>
 8004bea:	89a3      	ldrh	r3, [r4, #12]
 8004bec:	0719      	lsls	r1, r3, #28
 8004bee:	d51d      	bpl.n	8004c2c <_puts_r+0x78>
 8004bf0:	6923      	ldr	r3, [r4, #16]
 8004bf2:	b1db      	cbz	r3, 8004c2c <_puts_r+0x78>
 8004bf4:	3e01      	subs	r6, #1
 8004bf6:	68a3      	ldr	r3, [r4, #8]
 8004bf8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	60a3      	str	r3, [r4, #8]
 8004c00:	bb39      	cbnz	r1, 8004c52 <_puts_r+0x9e>
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	da38      	bge.n	8004c78 <_puts_r+0xc4>
 8004c06:	4622      	mov	r2, r4
 8004c08:	210a      	movs	r1, #10
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	f000 f848 	bl	8004ca0 <__swbuf_r>
 8004c10:	3001      	adds	r0, #1
 8004c12:	d011      	beq.n	8004c38 <_puts_r+0x84>
 8004c14:	250a      	movs	r5, #10
 8004c16:	e011      	b.n	8004c3c <_puts_r+0x88>
 8004c18:	4b1b      	ldr	r3, [pc, #108]	; (8004c88 <_puts_r+0xd4>)
 8004c1a:	429c      	cmp	r4, r3
 8004c1c:	d101      	bne.n	8004c22 <_puts_r+0x6e>
 8004c1e:	68ac      	ldr	r4, [r5, #8]
 8004c20:	e7da      	b.n	8004bd8 <_puts_r+0x24>
 8004c22:	4b1a      	ldr	r3, [pc, #104]	; (8004c8c <_puts_r+0xd8>)
 8004c24:	429c      	cmp	r4, r3
 8004c26:	bf08      	it	eq
 8004c28:	68ec      	ldreq	r4, [r5, #12]
 8004c2a:	e7d5      	b.n	8004bd8 <_puts_r+0x24>
 8004c2c:	4621      	mov	r1, r4
 8004c2e:	4628      	mov	r0, r5
 8004c30:	f000 f888 	bl	8004d44 <__swsetup_r>
 8004c34:	2800      	cmp	r0, #0
 8004c36:	d0dd      	beq.n	8004bf4 <_puts_r+0x40>
 8004c38:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004c3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c3e:	07da      	lsls	r2, r3, #31
 8004c40:	d405      	bmi.n	8004c4e <_puts_r+0x9a>
 8004c42:	89a3      	ldrh	r3, [r4, #12]
 8004c44:	059b      	lsls	r3, r3, #22
 8004c46:	d402      	bmi.n	8004c4e <_puts_r+0x9a>
 8004c48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c4a:	f000 faa2 	bl	8005192 <__retarget_lock_release_recursive>
 8004c4e:	4628      	mov	r0, r5
 8004c50:	bd70      	pop	{r4, r5, r6, pc}
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	da04      	bge.n	8004c60 <_puts_r+0xac>
 8004c56:	69a2      	ldr	r2, [r4, #24]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	dc06      	bgt.n	8004c6a <_puts_r+0xb6>
 8004c5c:	290a      	cmp	r1, #10
 8004c5e:	d004      	beq.n	8004c6a <_puts_r+0xb6>
 8004c60:	6823      	ldr	r3, [r4, #0]
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	6022      	str	r2, [r4, #0]
 8004c66:	7019      	strb	r1, [r3, #0]
 8004c68:	e7c5      	b.n	8004bf6 <_puts_r+0x42>
 8004c6a:	4622      	mov	r2, r4
 8004c6c:	4628      	mov	r0, r5
 8004c6e:	f000 f817 	bl	8004ca0 <__swbuf_r>
 8004c72:	3001      	adds	r0, #1
 8004c74:	d1bf      	bne.n	8004bf6 <_puts_r+0x42>
 8004c76:	e7df      	b.n	8004c38 <_puts_r+0x84>
 8004c78:	6823      	ldr	r3, [r4, #0]
 8004c7a:	250a      	movs	r5, #10
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	6022      	str	r2, [r4, #0]
 8004c80:	701d      	strb	r5, [r3, #0]
 8004c82:	e7db      	b.n	8004c3c <_puts_r+0x88>
 8004c84:	08005d08 	.word	0x08005d08
 8004c88:	08005d28 	.word	0x08005d28
 8004c8c:	08005ce8 	.word	0x08005ce8

08004c90 <puts>:
 8004c90:	4b02      	ldr	r3, [pc, #8]	; (8004c9c <puts+0xc>)
 8004c92:	4601      	mov	r1, r0
 8004c94:	6818      	ldr	r0, [r3, #0]
 8004c96:	f7ff bf8d 	b.w	8004bb4 <_puts_r>
 8004c9a:	bf00      	nop
 8004c9c:	20000014 	.word	0x20000014

08004ca0 <__swbuf_r>:
 8004ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ca2:	460e      	mov	r6, r1
 8004ca4:	4614      	mov	r4, r2
 8004ca6:	4605      	mov	r5, r0
 8004ca8:	b118      	cbz	r0, 8004cb2 <__swbuf_r+0x12>
 8004caa:	6983      	ldr	r3, [r0, #24]
 8004cac:	b90b      	cbnz	r3, 8004cb2 <__swbuf_r+0x12>
 8004cae:	f000 f9d1 	bl	8005054 <__sinit>
 8004cb2:	4b21      	ldr	r3, [pc, #132]	; (8004d38 <__swbuf_r+0x98>)
 8004cb4:	429c      	cmp	r4, r3
 8004cb6:	d12b      	bne.n	8004d10 <__swbuf_r+0x70>
 8004cb8:	686c      	ldr	r4, [r5, #4]
 8004cba:	69a3      	ldr	r3, [r4, #24]
 8004cbc:	60a3      	str	r3, [r4, #8]
 8004cbe:	89a3      	ldrh	r3, [r4, #12]
 8004cc0:	071a      	lsls	r2, r3, #28
 8004cc2:	d52f      	bpl.n	8004d24 <__swbuf_r+0x84>
 8004cc4:	6923      	ldr	r3, [r4, #16]
 8004cc6:	b36b      	cbz	r3, 8004d24 <__swbuf_r+0x84>
 8004cc8:	6923      	ldr	r3, [r4, #16]
 8004cca:	6820      	ldr	r0, [r4, #0]
 8004ccc:	1ac0      	subs	r0, r0, r3
 8004cce:	6963      	ldr	r3, [r4, #20]
 8004cd0:	b2f6      	uxtb	r6, r6
 8004cd2:	4283      	cmp	r3, r0
 8004cd4:	4637      	mov	r7, r6
 8004cd6:	dc04      	bgt.n	8004ce2 <__swbuf_r+0x42>
 8004cd8:	4621      	mov	r1, r4
 8004cda:	4628      	mov	r0, r5
 8004cdc:	f000 f926 	bl	8004f2c <_fflush_r>
 8004ce0:	bb30      	cbnz	r0, 8004d30 <__swbuf_r+0x90>
 8004ce2:	68a3      	ldr	r3, [r4, #8]
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	60a3      	str	r3, [r4, #8]
 8004ce8:	6823      	ldr	r3, [r4, #0]
 8004cea:	1c5a      	adds	r2, r3, #1
 8004cec:	6022      	str	r2, [r4, #0]
 8004cee:	701e      	strb	r6, [r3, #0]
 8004cf0:	6963      	ldr	r3, [r4, #20]
 8004cf2:	3001      	adds	r0, #1
 8004cf4:	4283      	cmp	r3, r0
 8004cf6:	d004      	beq.n	8004d02 <__swbuf_r+0x62>
 8004cf8:	89a3      	ldrh	r3, [r4, #12]
 8004cfa:	07db      	lsls	r3, r3, #31
 8004cfc:	d506      	bpl.n	8004d0c <__swbuf_r+0x6c>
 8004cfe:	2e0a      	cmp	r6, #10
 8004d00:	d104      	bne.n	8004d0c <__swbuf_r+0x6c>
 8004d02:	4621      	mov	r1, r4
 8004d04:	4628      	mov	r0, r5
 8004d06:	f000 f911 	bl	8004f2c <_fflush_r>
 8004d0a:	b988      	cbnz	r0, 8004d30 <__swbuf_r+0x90>
 8004d0c:	4638      	mov	r0, r7
 8004d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d10:	4b0a      	ldr	r3, [pc, #40]	; (8004d3c <__swbuf_r+0x9c>)
 8004d12:	429c      	cmp	r4, r3
 8004d14:	d101      	bne.n	8004d1a <__swbuf_r+0x7a>
 8004d16:	68ac      	ldr	r4, [r5, #8]
 8004d18:	e7cf      	b.n	8004cba <__swbuf_r+0x1a>
 8004d1a:	4b09      	ldr	r3, [pc, #36]	; (8004d40 <__swbuf_r+0xa0>)
 8004d1c:	429c      	cmp	r4, r3
 8004d1e:	bf08      	it	eq
 8004d20:	68ec      	ldreq	r4, [r5, #12]
 8004d22:	e7ca      	b.n	8004cba <__swbuf_r+0x1a>
 8004d24:	4621      	mov	r1, r4
 8004d26:	4628      	mov	r0, r5
 8004d28:	f000 f80c 	bl	8004d44 <__swsetup_r>
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	d0cb      	beq.n	8004cc8 <__swbuf_r+0x28>
 8004d30:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004d34:	e7ea      	b.n	8004d0c <__swbuf_r+0x6c>
 8004d36:	bf00      	nop
 8004d38:	08005d08 	.word	0x08005d08
 8004d3c:	08005d28 	.word	0x08005d28
 8004d40:	08005ce8 	.word	0x08005ce8

08004d44 <__swsetup_r>:
 8004d44:	4b32      	ldr	r3, [pc, #200]	; (8004e10 <__swsetup_r+0xcc>)
 8004d46:	b570      	push	{r4, r5, r6, lr}
 8004d48:	681d      	ldr	r5, [r3, #0]
 8004d4a:	4606      	mov	r6, r0
 8004d4c:	460c      	mov	r4, r1
 8004d4e:	b125      	cbz	r5, 8004d5a <__swsetup_r+0x16>
 8004d50:	69ab      	ldr	r3, [r5, #24]
 8004d52:	b913      	cbnz	r3, 8004d5a <__swsetup_r+0x16>
 8004d54:	4628      	mov	r0, r5
 8004d56:	f000 f97d 	bl	8005054 <__sinit>
 8004d5a:	4b2e      	ldr	r3, [pc, #184]	; (8004e14 <__swsetup_r+0xd0>)
 8004d5c:	429c      	cmp	r4, r3
 8004d5e:	d10f      	bne.n	8004d80 <__swsetup_r+0x3c>
 8004d60:	686c      	ldr	r4, [r5, #4]
 8004d62:	89a3      	ldrh	r3, [r4, #12]
 8004d64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d68:	0719      	lsls	r1, r3, #28
 8004d6a:	d42c      	bmi.n	8004dc6 <__swsetup_r+0x82>
 8004d6c:	06dd      	lsls	r5, r3, #27
 8004d6e:	d411      	bmi.n	8004d94 <__swsetup_r+0x50>
 8004d70:	2309      	movs	r3, #9
 8004d72:	6033      	str	r3, [r6, #0]
 8004d74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004d78:	81a3      	strh	r3, [r4, #12]
 8004d7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d7e:	e03e      	b.n	8004dfe <__swsetup_r+0xba>
 8004d80:	4b25      	ldr	r3, [pc, #148]	; (8004e18 <__swsetup_r+0xd4>)
 8004d82:	429c      	cmp	r4, r3
 8004d84:	d101      	bne.n	8004d8a <__swsetup_r+0x46>
 8004d86:	68ac      	ldr	r4, [r5, #8]
 8004d88:	e7eb      	b.n	8004d62 <__swsetup_r+0x1e>
 8004d8a:	4b24      	ldr	r3, [pc, #144]	; (8004e1c <__swsetup_r+0xd8>)
 8004d8c:	429c      	cmp	r4, r3
 8004d8e:	bf08      	it	eq
 8004d90:	68ec      	ldreq	r4, [r5, #12]
 8004d92:	e7e6      	b.n	8004d62 <__swsetup_r+0x1e>
 8004d94:	0758      	lsls	r0, r3, #29
 8004d96:	d512      	bpl.n	8004dbe <__swsetup_r+0x7a>
 8004d98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d9a:	b141      	cbz	r1, 8004dae <__swsetup_r+0x6a>
 8004d9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004da0:	4299      	cmp	r1, r3
 8004da2:	d002      	beq.n	8004daa <__swsetup_r+0x66>
 8004da4:	4630      	mov	r0, r6
 8004da6:	f000 fa5b 	bl	8005260 <_free_r>
 8004daa:	2300      	movs	r3, #0
 8004dac:	6363      	str	r3, [r4, #52]	; 0x34
 8004dae:	89a3      	ldrh	r3, [r4, #12]
 8004db0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004db4:	81a3      	strh	r3, [r4, #12]
 8004db6:	2300      	movs	r3, #0
 8004db8:	6063      	str	r3, [r4, #4]
 8004dba:	6923      	ldr	r3, [r4, #16]
 8004dbc:	6023      	str	r3, [r4, #0]
 8004dbe:	89a3      	ldrh	r3, [r4, #12]
 8004dc0:	f043 0308 	orr.w	r3, r3, #8
 8004dc4:	81a3      	strh	r3, [r4, #12]
 8004dc6:	6923      	ldr	r3, [r4, #16]
 8004dc8:	b94b      	cbnz	r3, 8004dde <__swsetup_r+0x9a>
 8004dca:	89a3      	ldrh	r3, [r4, #12]
 8004dcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dd4:	d003      	beq.n	8004dde <__swsetup_r+0x9a>
 8004dd6:	4621      	mov	r1, r4
 8004dd8:	4630      	mov	r0, r6
 8004dda:	f000 fa01 	bl	80051e0 <__smakebuf_r>
 8004dde:	89a0      	ldrh	r0, [r4, #12]
 8004de0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004de4:	f010 0301 	ands.w	r3, r0, #1
 8004de8:	d00a      	beq.n	8004e00 <__swsetup_r+0xbc>
 8004dea:	2300      	movs	r3, #0
 8004dec:	60a3      	str	r3, [r4, #8]
 8004dee:	6963      	ldr	r3, [r4, #20]
 8004df0:	425b      	negs	r3, r3
 8004df2:	61a3      	str	r3, [r4, #24]
 8004df4:	6923      	ldr	r3, [r4, #16]
 8004df6:	b943      	cbnz	r3, 8004e0a <__swsetup_r+0xc6>
 8004df8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004dfc:	d1ba      	bne.n	8004d74 <__swsetup_r+0x30>
 8004dfe:	bd70      	pop	{r4, r5, r6, pc}
 8004e00:	0781      	lsls	r1, r0, #30
 8004e02:	bf58      	it	pl
 8004e04:	6963      	ldrpl	r3, [r4, #20]
 8004e06:	60a3      	str	r3, [r4, #8]
 8004e08:	e7f4      	b.n	8004df4 <__swsetup_r+0xb0>
 8004e0a:	2000      	movs	r0, #0
 8004e0c:	e7f7      	b.n	8004dfe <__swsetup_r+0xba>
 8004e0e:	bf00      	nop
 8004e10:	20000014 	.word	0x20000014
 8004e14:	08005d08 	.word	0x08005d08
 8004e18:	08005d28 	.word	0x08005d28
 8004e1c:	08005ce8 	.word	0x08005ce8

08004e20 <__sflush_r>:
 8004e20:	898a      	ldrh	r2, [r1, #12]
 8004e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e26:	4605      	mov	r5, r0
 8004e28:	0710      	lsls	r0, r2, #28
 8004e2a:	460c      	mov	r4, r1
 8004e2c:	d458      	bmi.n	8004ee0 <__sflush_r+0xc0>
 8004e2e:	684b      	ldr	r3, [r1, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	dc05      	bgt.n	8004e40 <__sflush_r+0x20>
 8004e34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	dc02      	bgt.n	8004e40 <__sflush_r+0x20>
 8004e3a:	2000      	movs	r0, #0
 8004e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e42:	2e00      	cmp	r6, #0
 8004e44:	d0f9      	beq.n	8004e3a <__sflush_r+0x1a>
 8004e46:	2300      	movs	r3, #0
 8004e48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e4c:	682f      	ldr	r7, [r5, #0]
 8004e4e:	602b      	str	r3, [r5, #0]
 8004e50:	d032      	beq.n	8004eb8 <__sflush_r+0x98>
 8004e52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e54:	89a3      	ldrh	r3, [r4, #12]
 8004e56:	075a      	lsls	r2, r3, #29
 8004e58:	d505      	bpl.n	8004e66 <__sflush_r+0x46>
 8004e5a:	6863      	ldr	r3, [r4, #4]
 8004e5c:	1ac0      	subs	r0, r0, r3
 8004e5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e60:	b10b      	cbz	r3, 8004e66 <__sflush_r+0x46>
 8004e62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e64:	1ac0      	subs	r0, r0, r3
 8004e66:	2300      	movs	r3, #0
 8004e68:	4602      	mov	r2, r0
 8004e6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e6c:	6a21      	ldr	r1, [r4, #32]
 8004e6e:	4628      	mov	r0, r5
 8004e70:	47b0      	blx	r6
 8004e72:	1c43      	adds	r3, r0, #1
 8004e74:	89a3      	ldrh	r3, [r4, #12]
 8004e76:	d106      	bne.n	8004e86 <__sflush_r+0x66>
 8004e78:	6829      	ldr	r1, [r5, #0]
 8004e7a:	291d      	cmp	r1, #29
 8004e7c:	d82c      	bhi.n	8004ed8 <__sflush_r+0xb8>
 8004e7e:	4a2a      	ldr	r2, [pc, #168]	; (8004f28 <__sflush_r+0x108>)
 8004e80:	40ca      	lsrs	r2, r1
 8004e82:	07d6      	lsls	r6, r2, #31
 8004e84:	d528      	bpl.n	8004ed8 <__sflush_r+0xb8>
 8004e86:	2200      	movs	r2, #0
 8004e88:	6062      	str	r2, [r4, #4]
 8004e8a:	04d9      	lsls	r1, r3, #19
 8004e8c:	6922      	ldr	r2, [r4, #16]
 8004e8e:	6022      	str	r2, [r4, #0]
 8004e90:	d504      	bpl.n	8004e9c <__sflush_r+0x7c>
 8004e92:	1c42      	adds	r2, r0, #1
 8004e94:	d101      	bne.n	8004e9a <__sflush_r+0x7a>
 8004e96:	682b      	ldr	r3, [r5, #0]
 8004e98:	b903      	cbnz	r3, 8004e9c <__sflush_r+0x7c>
 8004e9a:	6560      	str	r0, [r4, #84]	; 0x54
 8004e9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e9e:	602f      	str	r7, [r5, #0]
 8004ea0:	2900      	cmp	r1, #0
 8004ea2:	d0ca      	beq.n	8004e3a <__sflush_r+0x1a>
 8004ea4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ea8:	4299      	cmp	r1, r3
 8004eaa:	d002      	beq.n	8004eb2 <__sflush_r+0x92>
 8004eac:	4628      	mov	r0, r5
 8004eae:	f000 f9d7 	bl	8005260 <_free_r>
 8004eb2:	2000      	movs	r0, #0
 8004eb4:	6360      	str	r0, [r4, #52]	; 0x34
 8004eb6:	e7c1      	b.n	8004e3c <__sflush_r+0x1c>
 8004eb8:	6a21      	ldr	r1, [r4, #32]
 8004eba:	2301      	movs	r3, #1
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	47b0      	blx	r6
 8004ec0:	1c41      	adds	r1, r0, #1
 8004ec2:	d1c7      	bne.n	8004e54 <__sflush_r+0x34>
 8004ec4:	682b      	ldr	r3, [r5, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0c4      	beq.n	8004e54 <__sflush_r+0x34>
 8004eca:	2b1d      	cmp	r3, #29
 8004ecc:	d001      	beq.n	8004ed2 <__sflush_r+0xb2>
 8004ece:	2b16      	cmp	r3, #22
 8004ed0:	d101      	bne.n	8004ed6 <__sflush_r+0xb6>
 8004ed2:	602f      	str	r7, [r5, #0]
 8004ed4:	e7b1      	b.n	8004e3a <__sflush_r+0x1a>
 8004ed6:	89a3      	ldrh	r3, [r4, #12]
 8004ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004edc:	81a3      	strh	r3, [r4, #12]
 8004ede:	e7ad      	b.n	8004e3c <__sflush_r+0x1c>
 8004ee0:	690f      	ldr	r7, [r1, #16]
 8004ee2:	2f00      	cmp	r7, #0
 8004ee4:	d0a9      	beq.n	8004e3a <__sflush_r+0x1a>
 8004ee6:	0793      	lsls	r3, r2, #30
 8004ee8:	680e      	ldr	r6, [r1, #0]
 8004eea:	bf08      	it	eq
 8004eec:	694b      	ldreq	r3, [r1, #20]
 8004eee:	600f      	str	r7, [r1, #0]
 8004ef0:	bf18      	it	ne
 8004ef2:	2300      	movne	r3, #0
 8004ef4:	eba6 0807 	sub.w	r8, r6, r7
 8004ef8:	608b      	str	r3, [r1, #8]
 8004efa:	f1b8 0f00 	cmp.w	r8, #0
 8004efe:	dd9c      	ble.n	8004e3a <__sflush_r+0x1a>
 8004f00:	6a21      	ldr	r1, [r4, #32]
 8004f02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004f04:	4643      	mov	r3, r8
 8004f06:	463a      	mov	r2, r7
 8004f08:	4628      	mov	r0, r5
 8004f0a:	47b0      	blx	r6
 8004f0c:	2800      	cmp	r0, #0
 8004f0e:	dc06      	bgt.n	8004f1e <__sflush_r+0xfe>
 8004f10:	89a3      	ldrh	r3, [r4, #12]
 8004f12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f16:	81a3      	strh	r3, [r4, #12]
 8004f18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f1c:	e78e      	b.n	8004e3c <__sflush_r+0x1c>
 8004f1e:	4407      	add	r7, r0
 8004f20:	eba8 0800 	sub.w	r8, r8, r0
 8004f24:	e7e9      	b.n	8004efa <__sflush_r+0xda>
 8004f26:	bf00      	nop
 8004f28:	20400001 	.word	0x20400001

08004f2c <_fflush_r>:
 8004f2c:	b538      	push	{r3, r4, r5, lr}
 8004f2e:	690b      	ldr	r3, [r1, #16]
 8004f30:	4605      	mov	r5, r0
 8004f32:	460c      	mov	r4, r1
 8004f34:	b913      	cbnz	r3, 8004f3c <_fflush_r+0x10>
 8004f36:	2500      	movs	r5, #0
 8004f38:	4628      	mov	r0, r5
 8004f3a:	bd38      	pop	{r3, r4, r5, pc}
 8004f3c:	b118      	cbz	r0, 8004f46 <_fflush_r+0x1a>
 8004f3e:	6983      	ldr	r3, [r0, #24]
 8004f40:	b90b      	cbnz	r3, 8004f46 <_fflush_r+0x1a>
 8004f42:	f000 f887 	bl	8005054 <__sinit>
 8004f46:	4b14      	ldr	r3, [pc, #80]	; (8004f98 <_fflush_r+0x6c>)
 8004f48:	429c      	cmp	r4, r3
 8004f4a:	d11b      	bne.n	8004f84 <_fflush_r+0x58>
 8004f4c:	686c      	ldr	r4, [r5, #4]
 8004f4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d0ef      	beq.n	8004f36 <_fflush_r+0xa>
 8004f56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f58:	07d0      	lsls	r0, r2, #31
 8004f5a:	d404      	bmi.n	8004f66 <_fflush_r+0x3a>
 8004f5c:	0599      	lsls	r1, r3, #22
 8004f5e:	d402      	bmi.n	8004f66 <_fflush_r+0x3a>
 8004f60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f62:	f000 f915 	bl	8005190 <__retarget_lock_acquire_recursive>
 8004f66:	4628      	mov	r0, r5
 8004f68:	4621      	mov	r1, r4
 8004f6a:	f7ff ff59 	bl	8004e20 <__sflush_r>
 8004f6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f70:	07da      	lsls	r2, r3, #31
 8004f72:	4605      	mov	r5, r0
 8004f74:	d4e0      	bmi.n	8004f38 <_fflush_r+0xc>
 8004f76:	89a3      	ldrh	r3, [r4, #12]
 8004f78:	059b      	lsls	r3, r3, #22
 8004f7a:	d4dd      	bmi.n	8004f38 <_fflush_r+0xc>
 8004f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f7e:	f000 f908 	bl	8005192 <__retarget_lock_release_recursive>
 8004f82:	e7d9      	b.n	8004f38 <_fflush_r+0xc>
 8004f84:	4b05      	ldr	r3, [pc, #20]	; (8004f9c <_fflush_r+0x70>)
 8004f86:	429c      	cmp	r4, r3
 8004f88:	d101      	bne.n	8004f8e <_fflush_r+0x62>
 8004f8a:	68ac      	ldr	r4, [r5, #8]
 8004f8c:	e7df      	b.n	8004f4e <_fflush_r+0x22>
 8004f8e:	4b04      	ldr	r3, [pc, #16]	; (8004fa0 <_fflush_r+0x74>)
 8004f90:	429c      	cmp	r4, r3
 8004f92:	bf08      	it	eq
 8004f94:	68ec      	ldreq	r4, [r5, #12]
 8004f96:	e7da      	b.n	8004f4e <_fflush_r+0x22>
 8004f98:	08005d08 	.word	0x08005d08
 8004f9c:	08005d28 	.word	0x08005d28
 8004fa0:	08005ce8 	.word	0x08005ce8

08004fa4 <std>:
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	b510      	push	{r4, lr}
 8004fa8:	4604      	mov	r4, r0
 8004faa:	e9c0 3300 	strd	r3, r3, [r0]
 8004fae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004fb2:	6083      	str	r3, [r0, #8]
 8004fb4:	8181      	strh	r1, [r0, #12]
 8004fb6:	6643      	str	r3, [r0, #100]	; 0x64
 8004fb8:	81c2      	strh	r2, [r0, #14]
 8004fba:	6183      	str	r3, [r0, #24]
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	2208      	movs	r2, #8
 8004fc0:	305c      	adds	r0, #92	; 0x5c
 8004fc2:	f7ff fdd7 	bl	8004b74 <memset>
 8004fc6:	4b05      	ldr	r3, [pc, #20]	; (8004fdc <std+0x38>)
 8004fc8:	6263      	str	r3, [r4, #36]	; 0x24
 8004fca:	4b05      	ldr	r3, [pc, #20]	; (8004fe0 <std+0x3c>)
 8004fcc:	62a3      	str	r3, [r4, #40]	; 0x28
 8004fce:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <std+0x40>)
 8004fd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004fd2:	4b05      	ldr	r3, [pc, #20]	; (8004fe8 <std+0x44>)
 8004fd4:	6224      	str	r4, [r4, #32]
 8004fd6:	6323      	str	r3, [r4, #48]	; 0x30
 8004fd8:	bd10      	pop	{r4, pc}
 8004fda:	bf00      	nop
 8004fdc:	08005a1d 	.word	0x08005a1d
 8004fe0:	08005a3f 	.word	0x08005a3f
 8004fe4:	08005a77 	.word	0x08005a77
 8004fe8:	08005a9b 	.word	0x08005a9b

08004fec <_cleanup_r>:
 8004fec:	4901      	ldr	r1, [pc, #4]	; (8004ff4 <_cleanup_r+0x8>)
 8004fee:	f000 b8af 	b.w	8005150 <_fwalk_reent>
 8004ff2:	bf00      	nop
 8004ff4:	08004f2d 	.word	0x08004f2d

08004ff8 <__sfmoreglue>:
 8004ff8:	b570      	push	{r4, r5, r6, lr}
 8004ffa:	2268      	movs	r2, #104	; 0x68
 8004ffc:	1e4d      	subs	r5, r1, #1
 8004ffe:	4355      	muls	r5, r2
 8005000:	460e      	mov	r6, r1
 8005002:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005006:	f000 f997 	bl	8005338 <_malloc_r>
 800500a:	4604      	mov	r4, r0
 800500c:	b140      	cbz	r0, 8005020 <__sfmoreglue+0x28>
 800500e:	2100      	movs	r1, #0
 8005010:	e9c0 1600 	strd	r1, r6, [r0]
 8005014:	300c      	adds	r0, #12
 8005016:	60a0      	str	r0, [r4, #8]
 8005018:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800501c:	f7ff fdaa 	bl	8004b74 <memset>
 8005020:	4620      	mov	r0, r4
 8005022:	bd70      	pop	{r4, r5, r6, pc}

08005024 <__sfp_lock_acquire>:
 8005024:	4801      	ldr	r0, [pc, #4]	; (800502c <__sfp_lock_acquire+0x8>)
 8005026:	f000 b8b3 	b.w	8005190 <__retarget_lock_acquire_recursive>
 800502a:	bf00      	nop
 800502c:	200001a1 	.word	0x200001a1

08005030 <__sfp_lock_release>:
 8005030:	4801      	ldr	r0, [pc, #4]	; (8005038 <__sfp_lock_release+0x8>)
 8005032:	f000 b8ae 	b.w	8005192 <__retarget_lock_release_recursive>
 8005036:	bf00      	nop
 8005038:	200001a1 	.word	0x200001a1

0800503c <__sinit_lock_acquire>:
 800503c:	4801      	ldr	r0, [pc, #4]	; (8005044 <__sinit_lock_acquire+0x8>)
 800503e:	f000 b8a7 	b.w	8005190 <__retarget_lock_acquire_recursive>
 8005042:	bf00      	nop
 8005044:	200001a2 	.word	0x200001a2

08005048 <__sinit_lock_release>:
 8005048:	4801      	ldr	r0, [pc, #4]	; (8005050 <__sinit_lock_release+0x8>)
 800504a:	f000 b8a2 	b.w	8005192 <__retarget_lock_release_recursive>
 800504e:	bf00      	nop
 8005050:	200001a2 	.word	0x200001a2

08005054 <__sinit>:
 8005054:	b510      	push	{r4, lr}
 8005056:	4604      	mov	r4, r0
 8005058:	f7ff fff0 	bl	800503c <__sinit_lock_acquire>
 800505c:	69a3      	ldr	r3, [r4, #24]
 800505e:	b11b      	cbz	r3, 8005068 <__sinit+0x14>
 8005060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005064:	f7ff bff0 	b.w	8005048 <__sinit_lock_release>
 8005068:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800506c:	6523      	str	r3, [r4, #80]	; 0x50
 800506e:	4b13      	ldr	r3, [pc, #76]	; (80050bc <__sinit+0x68>)
 8005070:	4a13      	ldr	r2, [pc, #76]	; (80050c0 <__sinit+0x6c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	62a2      	str	r2, [r4, #40]	; 0x28
 8005076:	42a3      	cmp	r3, r4
 8005078:	bf04      	itt	eq
 800507a:	2301      	moveq	r3, #1
 800507c:	61a3      	streq	r3, [r4, #24]
 800507e:	4620      	mov	r0, r4
 8005080:	f000 f820 	bl	80050c4 <__sfp>
 8005084:	6060      	str	r0, [r4, #4]
 8005086:	4620      	mov	r0, r4
 8005088:	f000 f81c 	bl	80050c4 <__sfp>
 800508c:	60a0      	str	r0, [r4, #8]
 800508e:	4620      	mov	r0, r4
 8005090:	f000 f818 	bl	80050c4 <__sfp>
 8005094:	2200      	movs	r2, #0
 8005096:	60e0      	str	r0, [r4, #12]
 8005098:	2104      	movs	r1, #4
 800509a:	6860      	ldr	r0, [r4, #4]
 800509c:	f7ff ff82 	bl	8004fa4 <std>
 80050a0:	68a0      	ldr	r0, [r4, #8]
 80050a2:	2201      	movs	r2, #1
 80050a4:	2109      	movs	r1, #9
 80050a6:	f7ff ff7d 	bl	8004fa4 <std>
 80050aa:	68e0      	ldr	r0, [r4, #12]
 80050ac:	2202      	movs	r2, #2
 80050ae:	2112      	movs	r1, #18
 80050b0:	f7ff ff78 	bl	8004fa4 <std>
 80050b4:	2301      	movs	r3, #1
 80050b6:	61a3      	str	r3, [r4, #24]
 80050b8:	e7d2      	b.n	8005060 <__sinit+0xc>
 80050ba:	bf00      	nop
 80050bc:	08005ce4 	.word	0x08005ce4
 80050c0:	08004fed 	.word	0x08004fed

080050c4 <__sfp>:
 80050c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c6:	4607      	mov	r7, r0
 80050c8:	f7ff ffac 	bl	8005024 <__sfp_lock_acquire>
 80050cc:	4b1e      	ldr	r3, [pc, #120]	; (8005148 <__sfp+0x84>)
 80050ce:	681e      	ldr	r6, [r3, #0]
 80050d0:	69b3      	ldr	r3, [r6, #24]
 80050d2:	b913      	cbnz	r3, 80050da <__sfp+0x16>
 80050d4:	4630      	mov	r0, r6
 80050d6:	f7ff ffbd 	bl	8005054 <__sinit>
 80050da:	3648      	adds	r6, #72	; 0x48
 80050dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80050e0:	3b01      	subs	r3, #1
 80050e2:	d503      	bpl.n	80050ec <__sfp+0x28>
 80050e4:	6833      	ldr	r3, [r6, #0]
 80050e6:	b30b      	cbz	r3, 800512c <__sfp+0x68>
 80050e8:	6836      	ldr	r6, [r6, #0]
 80050ea:	e7f7      	b.n	80050dc <__sfp+0x18>
 80050ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80050f0:	b9d5      	cbnz	r5, 8005128 <__sfp+0x64>
 80050f2:	4b16      	ldr	r3, [pc, #88]	; (800514c <__sfp+0x88>)
 80050f4:	60e3      	str	r3, [r4, #12]
 80050f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80050fa:	6665      	str	r5, [r4, #100]	; 0x64
 80050fc:	f000 f847 	bl	800518e <__retarget_lock_init_recursive>
 8005100:	f7ff ff96 	bl	8005030 <__sfp_lock_release>
 8005104:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005108:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800510c:	6025      	str	r5, [r4, #0]
 800510e:	61a5      	str	r5, [r4, #24]
 8005110:	2208      	movs	r2, #8
 8005112:	4629      	mov	r1, r5
 8005114:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005118:	f7ff fd2c 	bl	8004b74 <memset>
 800511c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005120:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005124:	4620      	mov	r0, r4
 8005126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005128:	3468      	adds	r4, #104	; 0x68
 800512a:	e7d9      	b.n	80050e0 <__sfp+0x1c>
 800512c:	2104      	movs	r1, #4
 800512e:	4638      	mov	r0, r7
 8005130:	f7ff ff62 	bl	8004ff8 <__sfmoreglue>
 8005134:	4604      	mov	r4, r0
 8005136:	6030      	str	r0, [r6, #0]
 8005138:	2800      	cmp	r0, #0
 800513a:	d1d5      	bne.n	80050e8 <__sfp+0x24>
 800513c:	f7ff ff78 	bl	8005030 <__sfp_lock_release>
 8005140:	230c      	movs	r3, #12
 8005142:	603b      	str	r3, [r7, #0]
 8005144:	e7ee      	b.n	8005124 <__sfp+0x60>
 8005146:	bf00      	nop
 8005148:	08005ce4 	.word	0x08005ce4
 800514c:	ffff0001 	.word	0xffff0001

08005150 <_fwalk_reent>:
 8005150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005154:	4606      	mov	r6, r0
 8005156:	4688      	mov	r8, r1
 8005158:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800515c:	2700      	movs	r7, #0
 800515e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005162:	f1b9 0901 	subs.w	r9, r9, #1
 8005166:	d505      	bpl.n	8005174 <_fwalk_reent+0x24>
 8005168:	6824      	ldr	r4, [r4, #0]
 800516a:	2c00      	cmp	r4, #0
 800516c:	d1f7      	bne.n	800515e <_fwalk_reent+0xe>
 800516e:	4638      	mov	r0, r7
 8005170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005174:	89ab      	ldrh	r3, [r5, #12]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d907      	bls.n	800518a <_fwalk_reent+0x3a>
 800517a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800517e:	3301      	adds	r3, #1
 8005180:	d003      	beq.n	800518a <_fwalk_reent+0x3a>
 8005182:	4629      	mov	r1, r5
 8005184:	4630      	mov	r0, r6
 8005186:	47c0      	blx	r8
 8005188:	4307      	orrs	r7, r0
 800518a:	3568      	adds	r5, #104	; 0x68
 800518c:	e7e9      	b.n	8005162 <_fwalk_reent+0x12>

0800518e <__retarget_lock_init_recursive>:
 800518e:	4770      	bx	lr

08005190 <__retarget_lock_acquire_recursive>:
 8005190:	4770      	bx	lr

08005192 <__retarget_lock_release_recursive>:
 8005192:	4770      	bx	lr

08005194 <__swhatbuf_r>:
 8005194:	b570      	push	{r4, r5, r6, lr}
 8005196:	460e      	mov	r6, r1
 8005198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800519c:	2900      	cmp	r1, #0
 800519e:	b096      	sub	sp, #88	; 0x58
 80051a0:	4614      	mov	r4, r2
 80051a2:	461d      	mov	r5, r3
 80051a4:	da08      	bge.n	80051b8 <__swhatbuf_r+0x24>
 80051a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	602a      	str	r2, [r5, #0]
 80051ae:	061a      	lsls	r2, r3, #24
 80051b0:	d410      	bmi.n	80051d4 <__swhatbuf_r+0x40>
 80051b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051b6:	e00e      	b.n	80051d6 <__swhatbuf_r+0x42>
 80051b8:	466a      	mov	r2, sp
 80051ba:	f000 fc95 	bl	8005ae8 <_fstat_r>
 80051be:	2800      	cmp	r0, #0
 80051c0:	dbf1      	blt.n	80051a6 <__swhatbuf_r+0x12>
 80051c2:	9a01      	ldr	r2, [sp, #4]
 80051c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80051c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80051cc:	425a      	negs	r2, r3
 80051ce:	415a      	adcs	r2, r3
 80051d0:	602a      	str	r2, [r5, #0]
 80051d2:	e7ee      	b.n	80051b2 <__swhatbuf_r+0x1e>
 80051d4:	2340      	movs	r3, #64	; 0x40
 80051d6:	2000      	movs	r0, #0
 80051d8:	6023      	str	r3, [r4, #0]
 80051da:	b016      	add	sp, #88	; 0x58
 80051dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080051e0 <__smakebuf_r>:
 80051e0:	898b      	ldrh	r3, [r1, #12]
 80051e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80051e4:	079d      	lsls	r5, r3, #30
 80051e6:	4606      	mov	r6, r0
 80051e8:	460c      	mov	r4, r1
 80051ea:	d507      	bpl.n	80051fc <__smakebuf_r+0x1c>
 80051ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80051f0:	6023      	str	r3, [r4, #0]
 80051f2:	6123      	str	r3, [r4, #16]
 80051f4:	2301      	movs	r3, #1
 80051f6:	6163      	str	r3, [r4, #20]
 80051f8:	b002      	add	sp, #8
 80051fa:	bd70      	pop	{r4, r5, r6, pc}
 80051fc:	ab01      	add	r3, sp, #4
 80051fe:	466a      	mov	r2, sp
 8005200:	f7ff ffc8 	bl	8005194 <__swhatbuf_r>
 8005204:	9900      	ldr	r1, [sp, #0]
 8005206:	4605      	mov	r5, r0
 8005208:	4630      	mov	r0, r6
 800520a:	f000 f895 	bl	8005338 <_malloc_r>
 800520e:	b948      	cbnz	r0, 8005224 <__smakebuf_r+0x44>
 8005210:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005214:	059a      	lsls	r2, r3, #22
 8005216:	d4ef      	bmi.n	80051f8 <__smakebuf_r+0x18>
 8005218:	f023 0303 	bic.w	r3, r3, #3
 800521c:	f043 0302 	orr.w	r3, r3, #2
 8005220:	81a3      	strh	r3, [r4, #12]
 8005222:	e7e3      	b.n	80051ec <__smakebuf_r+0xc>
 8005224:	4b0d      	ldr	r3, [pc, #52]	; (800525c <__smakebuf_r+0x7c>)
 8005226:	62b3      	str	r3, [r6, #40]	; 0x28
 8005228:	89a3      	ldrh	r3, [r4, #12]
 800522a:	6020      	str	r0, [r4, #0]
 800522c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005230:	81a3      	strh	r3, [r4, #12]
 8005232:	9b00      	ldr	r3, [sp, #0]
 8005234:	6163      	str	r3, [r4, #20]
 8005236:	9b01      	ldr	r3, [sp, #4]
 8005238:	6120      	str	r0, [r4, #16]
 800523a:	b15b      	cbz	r3, 8005254 <__smakebuf_r+0x74>
 800523c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005240:	4630      	mov	r0, r6
 8005242:	f000 fc63 	bl	8005b0c <_isatty_r>
 8005246:	b128      	cbz	r0, 8005254 <__smakebuf_r+0x74>
 8005248:	89a3      	ldrh	r3, [r4, #12]
 800524a:	f023 0303 	bic.w	r3, r3, #3
 800524e:	f043 0301 	orr.w	r3, r3, #1
 8005252:	81a3      	strh	r3, [r4, #12]
 8005254:	89a0      	ldrh	r0, [r4, #12]
 8005256:	4305      	orrs	r5, r0
 8005258:	81a5      	strh	r5, [r4, #12]
 800525a:	e7cd      	b.n	80051f8 <__smakebuf_r+0x18>
 800525c:	08004fed 	.word	0x08004fed

08005260 <_free_r>:
 8005260:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005262:	2900      	cmp	r1, #0
 8005264:	d044      	beq.n	80052f0 <_free_r+0x90>
 8005266:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800526a:	9001      	str	r0, [sp, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	f1a1 0404 	sub.w	r4, r1, #4
 8005272:	bfb8      	it	lt
 8005274:	18e4      	addlt	r4, r4, r3
 8005276:	f000 fc6b 	bl	8005b50 <__malloc_lock>
 800527a:	4a1e      	ldr	r2, [pc, #120]	; (80052f4 <_free_r+0x94>)
 800527c:	9801      	ldr	r0, [sp, #4]
 800527e:	6813      	ldr	r3, [r2, #0]
 8005280:	b933      	cbnz	r3, 8005290 <_free_r+0x30>
 8005282:	6063      	str	r3, [r4, #4]
 8005284:	6014      	str	r4, [r2, #0]
 8005286:	b003      	add	sp, #12
 8005288:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800528c:	f000 bc66 	b.w	8005b5c <__malloc_unlock>
 8005290:	42a3      	cmp	r3, r4
 8005292:	d908      	bls.n	80052a6 <_free_r+0x46>
 8005294:	6825      	ldr	r5, [r4, #0]
 8005296:	1961      	adds	r1, r4, r5
 8005298:	428b      	cmp	r3, r1
 800529a:	bf01      	itttt	eq
 800529c:	6819      	ldreq	r1, [r3, #0]
 800529e:	685b      	ldreq	r3, [r3, #4]
 80052a0:	1949      	addeq	r1, r1, r5
 80052a2:	6021      	streq	r1, [r4, #0]
 80052a4:	e7ed      	b.n	8005282 <_free_r+0x22>
 80052a6:	461a      	mov	r2, r3
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	b10b      	cbz	r3, 80052b0 <_free_r+0x50>
 80052ac:	42a3      	cmp	r3, r4
 80052ae:	d9fa      	bls.n	80052a6 <_free_r+0x46>
 80052b0:	6811      	ldr	r1, [r2, #0]
 80052b2:	1855      	adds	r5, r2, r1
 80052b4:	42a5      	cmp	r5, r4
 80052b6:	d10b      	bne.n	80052d0 <_free_r+0x70>
 80052b8:	6824      	ldr	r4, [r4, #0]
 80052ba:	4421      	add	r1, r4
 80052bc:	1854      	adds	r4, r2, r1
 80052be:	42a3      	cmp	r3, r4
 80052c0:	6011      	str	r1, [r2, #0]
 80052c2:	d1e0      	bne.n	8005286 <_free_r+0x26>
 80052c4:	681c      	ldr	r4, [r3, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	6053      	str	r3, [r2, #4]
 80052ca:	4421      	add	r1, r4
 80052cc:	6011      	str	r1, [r2, #0]
 80052ce:	e7da      	b.n	8005286 <_free_r+0x26>
 80052d0:	d902      	bls.n	80052d8 <_free_r+0x78>
 80052d2:	230c      	movs	r3, #12
 80052d4:	6003      	str	r3, [r0, #0]
 80052d6:	e7d6      	b.n	8005286 <_free_r+0x26>
 80052d8:	6825      	ldr	r5, [r4, #0]
 80052da:	1961      	adds	r1, r4, r5
 80052dc:	428b      	cmp	r3, r1
 80052de:	bf04      	itt	eq
 80052e0:	6819      	ldreq	r1, [r3, #0]
 80052e2:	685b      	ldreq	r3, [r3, #4]
 80052e4:	6063      	str	r3, [r4, #4]
 80052e6:	bf04      	itt	eq
 80052e8:	1949      	addeq	r1, r1, r5
 80052ea:	6021      	streq	r1, [r4, #0]
 80052ec:	6054      	str	r4, [r2, #4]
 80052ee:	e7ca      	b.n	8005286 <_free_r+0x26>
 80052f0:	b003      	add	sp, #12
 80052f2:	bd30      	pop	{r4, r5, pc}
 80052f4:	200001a4 	.word	0x200001a4

080052f8 <sbrk_aligned>:
 80052f8:	b570      	push	{r4, r5, r6, lr}
 80052fa:	4e0e      	ldr	r6, [pc, #56]	; (8005334 <sbrk_aligned+0x3c>)
 80052fc:	460c      	mov	r4, r1
 80052fe:	6831      	ldr	r1, [r6, #0]
 8005300:	4605      	mov	r5, r0
 8005302:	b911      	cbnz	r1, 800530a <sbrk_aligned+0x12>
 8005304:	f000 fb7a 	bl	80059fc <_sbrk_r>
 8005308:	6030      	str	r0, [r6, #0]
 800530a:	4621      	mov	r1, r4
 800530c:	4628      	mov	r0, r5
 800530e:	f000 fb75 	bl	80059fc <_sbrk_r>
 8005312:	1c43      	adds	r3, r0, #1
 8005314:	d00a      	beq.n	800532c <sbrk_aligned+0x34>
 8005316:	1cc4      	adds	r4, r0, #3
 8005318:	f024 0403 	bic.w	r4, r4, #3
 800531c:	42a0      	cmp	r0, r4
 800531e:	d007      	beq.n	8005330 <sbrk_aligned+0x38>
 8005320:	1a21      	subs	r1, r4, r0
 8005322:	4628      	mov	r0, r5
 8005324:	f000 fb6a 	bl	80059fc <_sbrk_r>
 8005328:	3001      	adds	r0, #1
 800532a:	d101      	bne.n	8005330 <sbrk_aligned+0x38>
 800532c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005330:	4620      	mov	r0, r4
 8005332:	bd70      	pop	{r4, r5, r6, pc}
 8005334:	200001a8 	.word	0x200001a8

08005338 <_malloc_r>:
 8005338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800533c:	1ccd      	adds	r5, r1, #3
 800533e:	f025 0503 	bic.w	r5, r5, #3
 8005342:	3508      	adds	r5, #8
 8005344:	2d0c      	cmp	r5, #12
 8005346:	bf38      	it	cc
 8005348:	250c      	movcc	r5, #12
 800534a:	2d00      	cmp	r5, #0
 800534c:	4607      	mov	r7, r0
 800534e:	db01      	blt.n	8005354 <_malloc_r+0x1c>
 8005350:	42a9      	cmp	r1, r5
 8005352:	d905      	bls.n	8005360 <_malloc_r+0x28>
 8005354:	230c      	movs	r3, #12
 8005356:	603b      	str	r3, [r7, #0]
 8005358:	2600      	movs	r6, #0
 800535a:	4630      	mov	r0, r6
 800535c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005360:	4e2e      	ldr	r6, [pc, #184]	; (800541c <_malloc_r+0xe4>)
 8005362:	f000 fbf5 	bl	8005b50 <__malloc_lock>
 8005366:	6833      	ldr	r3, [r6, #0]
 8005368:	461c      	mov	r4, r3
 800536a:	bb34      	cbnz	r4, 80053ba <_malloc_r+0x82>
 800536c:	4629      	mov	r1, r5
 800536e:	4638      	mov	r0, r7
 8005370:	f7ff ffc2 	bl	80052f8 <sbrk_aligned>
 8005374:	1c43      	adds	r3, r0, #1
 8005376:	4604      	mov	r4, r0
 8005378:	d14d      	bne.n	8005416 <_malloc_r+0xde>
 800537a:	6834      	ldr	r4, [r6, #0]
 800537c:	4626      	mov	r6, r4
 800537e:	2e00      	cmp	r6, #0
 8005380:	d140      	bne.n	8005404 <_malloc_r+0xcc>
 8005382:	6823      	ldr	r3, [r4, #0]
 8005384:	4631      	mov	r1, r6
 8005386:	4638      	mov	r0, r7
 8005388:	eb04 0803 	add.w	r8, r4, r3
 800538c:	f000 fb36 	bl	80059fc <_sbrk_r>
 8005390:	4580      	cmp	r8, r0
 8005392:	d13a      	bne.n	800540a <_malloc_r+0xd2>
 8005394:	6821      	ldr	r1, [r4, #0]
 8005396:	3503      	adds	r5, #3
 8005398:	1a6d      	subs	r5, r5, r1
 800539a:	f025 0503 	bic.w	r5, r5, #3
 800539e:	3508      	adds	r5, #8
 80053a0:	2d0c      	cmp	r5, #12
 80053a2:	bf38      	it	cc
 80053a4:	250c      	movcc	r5, #12
 80053a6:	4629      	mov	r1, r5
 80053a8:	4638      	mov	r0, r7
 80053aa:	f7ff ffa5 	bl	80052f8 <sbrk_aligned>
 80053ae:	3001      	adds	r0, #1
 80053b0:	d02b      	beq.n	800540a <_malloc_r+0xd2>
 80053b2:	6823      	ldr	r3, [r4, #0]
 80053b4:	442b      	add	r3, r5
 80053b6:	6023      	str	r3, [r4, #0]
 80053b8:	e00e      	b.n	80053d8 <_malloc_r+0xa0>
 80053ba:	6822      	ldr	r2, [r4, #0]
 80053bc:	1b52      	subs	r2, r2, r5
 80053be:	d41e      	bmi.n	80053fe <_malloc_r+0xc6>
 80053c0:	2a0b      	cmp	r2, #11
 80053c2:	d916      	bls.n	80053f2 <_malloc_r+0xba>
 80053c4:	1961      	adds	r1, r4, r5
 80053c6:	42a3      	cmp	r3, r4
 80053c8:	6025      	str	r5, [r4, #0]
 80053ca:	bf18      	it	ne
 80053cc:	6059      	strne	r1, [r3, #4]
 80053ce:	6863      	ldr	r3, [r4, #4]
 80053d0:	bf08      	it	eq
 80053d2:	6031      	streq	r1, [r6, #0]
 80053d4:	5162      	str	r2, [r4, r5]
 80053d6:	604b      	str	r3, [r1, #4]
 80053d8:	4638      	mov	r0, r7
 80053da:	f104 060b 	add.w	r6, r4, #11
 80053de:	f000 fbbd 	bl	8005b5c <__malloc_unlock>
 80053e2:	f026 0607 	bic.w	r6, r6, #7
 80053e6:	1d23      	adds	r3, r4, #4
 80053e8:	1af2      	subs	r2, r6, r3
 80053ea:	d0b6      	beq.n	800535a <_malloc_r+0x22>
 80053ec:	1b9b      	subs	r3, r3, r6
 80053ee:	50a3      	str	r3, [r4, r2]
 80053f0:	e7b3      	b.n	800535a <_malloc_r+0x22>
 80053f2:	6862      	ldr	r2, [r4, #4]
 80053f4:	42a3      	cmp	r3, r4
 80053f6:	bf0c      	ite	eq
 80053f8:	6032      	streq	r2, [r6, #0]
 80053fa:	605a      	strne	r2, [r3, #4]
 80053fc:	e7ec      	b.n	80053d8 <_malloc_r+0xa0>
 80053fe:	4623      	mov	r3, r4
 8005400:	6864      	ldr	r4, [r4, #4]
 8005402:	e7b2      	b.n	800536a <_malloc_r+0x32>
 8005404:	4634      	mov	r4, r6
 8005406:	6876      	ldr	r6, [r6, #4]
 8005408:	e7b9      	b.n	800537e <_malloc_r+0x46>
 800540a:	230c      	movs	r3, #12
 800540c:	603b      	str	r3, [r7, #0]
 800540e:	4638      	mov	r0, r7
 8005410:	f000 fba4 	bl	8005b5c <__malloc_unlock>
 8005414:	e7a1      	b.n	800535a <_malloc_r+0x22>
 8005416:	6025      	str	r5, [r4, #0]
 8005418:	e7de      	b.n	80053d8 <_malloc_r+0xa0>
 800541a:	bf00      	nop
 800541c:	200001a4 	.word	0x200001a4

08005420 <__sfputc_r>:
 8005420:	6893      	ldr	r3, [r2, #8]
 8005422:	3b01      	subs	r3, #1
 8005424:	2b00      	cmp	r3, #0
 8005426:	b410      	push	{r4}
 8005428:	6093      	str	r3, [r2, #8]
 800542a:	da08      	bge.n	800543e <__sfputc_r+0x1e>
 800542c:	6994      	ldr	r4, [r2, #24]
 800542e:	42a3      	cmp	r3, r4
 8005430:	db01      	blt.n	8005436 <__sfputc_r+0x16>
 8005432:	290a      	cmp	r1, #10
 8005434:	d103      	bne.n	800543e <__sfputc_r+0x1e>
 8005436:	f85d 4b04 	ldr.w	r4, [sp], #4
 800543a:	f7ff bc31 	b.w	8004ca0 <__swbuf_r>
 800543e:	6813      	ldr	r3, [r2, #0]
 8005440:	1c58      	adds	r0, r3, #1
 8005442:	6010      	str	r0, [r2, #0]
 8005444:	7019      	strb	r1, [r3, #0]
 8005446:	4608      	mov	r0, r1
 8005448:	f85d 4b04 	ldr.w	r4, [sp], #4
 800544c:	4770      	bx	lr

0800544e <__sfputs_r>:
 800544e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005450:	4606      	mov	r6, r0
 8005452:	460f      	mov	r7, r1
 8005454:	4614      	mov	r4, r2
 8005456:	18d5      	adds	r5, r2, r3
 8005458:	42ac      	cmp	r4, r5
 800545a:	d101      	bne.n	8005460 <__sfputs_r+0x12>
 800545c:	2000      	movs	r0, #0
 800545e:	e007      	b.n	8005470 <__sfputs_r+0x22>
 8005460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005464:	463a      	mov	r2, r7
 8005466:	4630      	mov	r0, r6
 8005468:	f7ff ffda 	bl	8005420 <__sfputc_r>
 800546c:	1c43      	adds	r3, r0, #1
 800546e:	d1f3      	bne.n	8005458 <__sfputs_r+0xa>
 8005470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005474 <_vfiprintf_r>:
 8005474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005478:	460d      	mov	r5, r1
 800547a:	b09d      	sub	sp, #116	; 0x74
 800547c:	4614      	mov	r4, r2
 800547e:	4698      	mov	r8, r3
 8005480:	4606      	mov	r6, r0
 8005482:	b118      	cbz	r0, 800548c <_vfiprintf_r+0x18>
 8005484:	6983      	ldr	r3, [r0, #24]
 8005486:	b90b      	cbnz	r3, 800548c <_vfiprintf_r+0x18>
 8005488:	f7ff fde4 	bl	8005054 <__sinit>
 800548c:	4b89      	ldr	r3, [pc, #548]	; (80056b4 <_vfiprintf_r+0x240>)
 800548e:	429d      	cmp	r5, r3
 8005490:	d11b      	bne.n	80054ca <_vfiprintf_r+0x56>
 8005492:	6875      	ldr	r5, [r6, #4]
 8005494:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005496:	07d9      	lsls	r1, r3, #31
 8005498:	d405      	bmi.n	80054a6 <_vfiprintf_r+0x32>
 800549a:	89ab      	ldrh	r3, [r5, #12]
 800549c:	059a      	lsls	r2, r3, #22
 800549e:	d402      	bmi.n	80054a6 <_vfiprintf_r+0x32>
 80054a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054a2:	f7ff fe75 	bl	8005190 <__retarget_lock_acquire_recursive>
 80054a6:	89ab      	ldrh	r3, [r5, #12]
 80054a8:	071b      	lsls	r3, r3, #28
 80054aa:	d501      	bpl.n	80054b0 <_vfiprintf_r+0x3c>
 80054ac:	692b      	ldr	r3, [r5, #16]
 80054ae:	b9eb      	cbnz	r3, 80054ec <_vfiprintf_r+0x78>
 80054b0:	4629      	mov	r1, r5
 80054b2:	4630      	mov	r0, r6
 80054b4:	f7ff fc46 	bl	8004d44 <__swsetup_r>
 80054b8:	b1c0      	cbz	r0, 80054ec <_vfiprintf_r+0x78>
 80054ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054bc:	07dc      	lsls	r4, r3, #31
 80054be:	d50e      	bpl.n	80054de <_vfiprintf_r+0x6a>
 80054c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054c4:	b01d      	add	sp, #116	; 0x74
 80054c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ca:	4b7b      	ldr	r3, [pc, #492]	; (80056b8 <_vfiprintf_r+0x244>)
 80054cc:	429d      	cmp	r5, r3
 80054ce:	d101      	bne.n	80054d4 <_vfiprintf_r+0x60>
 80054d0:	68b5      	ldr	r5, [r6, #8]
 80054d2:	e7df      	b.n	8005494 <_vfiprintf_r+0x20>
 80054d4:	4b79      	ldr	r3, [pc, #484]	; (80056bc <_vfiprintf_r+0x248>)
 80054d6:	429d      	cmp	r5, r3
 80054d8:	bf08      	it	eq
 80054da:	68f5      	ldreq	r5, [r6, #12]
 80054dc:	e7da      	b.n	8005494 <_vfiprintf_r+0x20>
 80054de:	89ab      	ldrh	r3, [r5, #12]
 80054e0:	0598      	lsls	r0, r3, #22
 80054e2:	d4ed      	bmi.n	80054c0 <_vfiprintf_r+0x4c>
 80054e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054e6:	f7ff fe54 	bl	8005192 <__retarget_lock_release_recursive>
 80054ea:	e7e9      	b.n	80054c0 <_vfiprintf_r+0x4c>
 80054ec:	2300      	movs	r3, #0
 80054ee:	9309      	str	r3, [sp, #36]	; 0x24
 80054f0:	2320      	movs	r3, #32
 80054f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80054fa:	2330      	movs	r3, #48	; 0x30
 80054fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80056c0 <_vfiprintf_r+0x24c>
 8005500:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005504:	f04f 0901 	mov.w	r9, #1
 8005508:	4623      	mov	r3, r4
 800550a:	469a      	mov	sl, r3
 800550c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005510:	b10a      	cbz	r2, 8005516 <_vfiprintf_r+0xa2>
 8005512:	2a25      	cmp	r2, #37	; 0x25
 8005514:	d1f9      	bne.n	800550a <_vfiprintf_r+0x96>
 8005516:	ebba 0b04 	subs.w	fp, sl, r4
 800551a:	d00b      	beq.n	8005534 <_vfiprintf_r+0xc0>
 800551c:	465b      	mov	r3, fp
 800551e:	4622      	mov	r2, r4
 8005520:	4629      	mov	r1, r5
 8005522:	4630      	mov	r0, r6
 8005524:	f7ff ff93 	bl	800544e <__sfputs_r>
 8005528:	3001      	adds	r0, #1
 800552a:	f000 80aa 	beq.w	8005682 <_vfiprintf_r+0x20e>
 800552e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005530:	445a      	add	r2, fp
 8005532:	9209      	str	r2, [sp, #36]	; 0x24
 8005534:	f89a 3000 	ldrb.w	r3, [sl]
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 80a2 	beq.w	8005682 <_vfiprintf_r+0x20e>
 800553e:	2300      	movs	r3, #0
 8005540:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005544:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005548:	f10a 0a01 	add.w	sl, sl, #1
 800554c:	9304      	str	r3, [sp, #16]
 800554e:	9307      	str	r3, [sp, #28]
 8005550:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005554:	931a      	str	r3, [sp, #104]	; 0x68
 8005556:	4654      	mov	r4, sl
 8005558:	2205      	movs	r2, #5
 800555a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800555e:	4858      	ldr	r0, [pc, #352]	; (80056c0 <_vfiprintf_r+0x24c>)
 8005560:	f7fa fe0e 	bl	8000180 <memchr>
 8005564:	9a04      	ldr	r2, [sp, #16]
 8005566:	b9d8      	cbnz	r0, 80055a0 <_vfiprintf_r+0x12c>
 8005568:	06d1      	lsls	r1, r2, #27
 800556a:	bf44      	itt	mi
 800556c:	2320      	movmi	r3, #32
 800556e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005572:	0713      	lsls	r3, r2, #28
 8005574:	bf44      	itt	mi
 8005576:	232b      	movmi	r3, #43	; 0x2b
 8005578:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800557c:	f89a 3000 	ldrb.w	r3, [sl]
 8005580:	2b2a      	cmp	r3, #42	; 0x2a
 8005582:	d015      	beq.n	80055b0 <_vfiprintf_r+0x13c>
 8005584:	9a07      	ldr	r2, [sp, #28]
 8005586:	4654      	mov	r4, sl
 8005588:	2000      	movs	r0, #0
 800558a:	f04f 0c0a 	mov.w	ip, #10
 800558e:	4621      	mov	r1, r4
 8005590:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005594:	3b30      	subs	r3, #48	; 0x30
 8005596:	2b09      	cmp	r3, #9
 8005598:	d94e      	bls.n	8005638 <_vfiprintf_r+0x1c4>
 800559a:	b1b0      	cbz	r0, 80055ca <_vfiprintf_r+0x156>
 800559c:	9207      	str	r2, [sp, #28]
 800559e:	e014      	b.n	80055ca <_vfiprintf_r+0x156>
 80055a0:	eba0 0308 	sub.w	r3, r0, r8
 80055a4:	fa09 f303 	lsl.w	r3, r9, r3
 80055a8:	4313      	orrs	r3, r2
 80055aa:	9304      	str	r3, [sp, #16]
 80055ac:	46a2      	mov	sl, r4
 80055ae:	e7d2      	b.n	8005556 <_vfiprintf_r+0xe2>
 80055b0:	9b03      	ldr	r3, [sp, #12]
 80055b2:	1d19      	adds	r1, r3, #4
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	9103      	str	r1, [sp, #12]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	bfbb      	ittet	lt
 80055bc:	425b      	neglt	r3, r3
 80055be:	f042 0202 	orrlt.w	r2, r2, #2
 80055c2:	9307      	strge	r3, [sp, #28]
 80055c4:	9307      	strlt	r3, [sp, #28]
 80055c6:	bfb8      	it	lt
 80055c8:	9204      	strlt	r2, [sp, #16]
 80055ca:	7823      	ldrb	r3, [r4, #0]
 80055cc:	2b2e      	cmp	r3, #46	; 0x2e
 80055ce:	d10c      	bne.n	80055ea <_vfiprintf_r+0x176>
 80055d0:	7863      	ldrb	r3, [r4, #1]
 80055d2:	2b2a      	cmp	r3, #42	; 0x2a
 80055d4:	d135      	bne.n	8005642 <_vfiprintf_r+0x1ce>
 80055d6:	9b03      	ldr	r3, [sp, #12]
 80055d8:	1d1a      	adds	r2, r3, #4
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	9203      	str	r2, [sp, #12]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	bfb8      	it	lt
 80055e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80055e6:	3402      	adds	r4, #2
 80055e8:	9305      	str	r3, [sp, #20]
 80055ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80056d0 <_vfiprintf_r+0x25c>
 80055ee:	7821      	ldrb	r1, [r4, #0]
 80055f0:	2203      	movs	r2, #3
 80055f2:	4650      	mov	r0, sl
 80055f4:	f7fa fdc4 	bl	8000180 <memchr>
 80055f8:	b140      	cbz	r0, 800560c <_vfiprintf_r+0x198>
 80055fa:	2340      	movs	r3, #64	; 0x40
 80055fc:	eba0 000a 	sub.w	r0, r0, sl
 8005600:	fa03 f000 	lsl.w	r0, r3, r0
 8005604:	9b04      	ldr	r3, [sp, #16]
 8005606:	4303      	orrs	r3, r0
 8005608:	3401      	adds	r4, #1
 800560a:	9304      	str	r3, [sp, #16]
 800560c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005610:	482c      	ldr	r0, [pc, #176]	; (80056c4 <_vfiprintf_r+0x250>)
 8005612:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005616:	2206      	movs	r2, #6
 8005618:	f7fa fdb2 	bl	8000180 <memchr>
 800561c:	2800      	cmp	r0, #0
 800561e:	d03f      	beq.n	80056a0 <_vfiprintf_r+0x22c>
 8005620:	4b29      	ldr	r3, [pc, #164]	; (80056c8 <_vfiprintf_r+0x254>)
 8005622:	bb1b      	cbnz	r3, 800566c <_vfiprintf_r+0x1f8>
 8005624:	9b03      	ldr	r3, [sp, #12]
 8005626:	3307      	adds	r3, #7
 8005628:	f023 0307 	bic.w	r3, r3, #7
 800562c:	3308      	adds	r3, #8
 800562e:	9303      	str	r3, [sp, #12]
 8005630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005632:	443b      	add	r3, r7
 8005634:	9309      	str	r3, [sp, #36]	; 0x24
 8005636:	e767      	b.n	8005508 <_vfiprintf_r+0x94>
 8005638:	fb0c 3202 	mla	r2, ip, r2, r3
 800563c:	460c      	mov	r4, r1
 800563e:	2001      	movs	r0, #1
 8005640:	e7a5      	b.n	800558e <_vfiprintf_r+0x11a>
 8005642:	2300      	movs	r3, #0
 8005644:	3401      	adds	r4, #1
 8005646:	9305      	str	r3, [sp, #20]
 8005648:	4619      	mov	r1, r3
 800564a:	f04f 0c0a 	mov.w	ip, #10
 800564e:	4620      	mov	r0, r4
 8005650:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005654:	3a30      	subs	r2, #48	; 0x30
 8005656:	2a09      	cmp	r2, #9
 8005658:	d903      	bls.n	8005662 <_vfiprintf_r+0x1ee>
 800565a:	2b00      	cmp	r3, #0
 800565c:	d0c5      	beq.n	80055ea <_vfiprintf_r+0x176>
 800565e:	9105      	str	r1, [sp, #20]
 8005660:	e7c3      	b.n	80055ea <_vfiprintf_r+0x176>
 8005662:	fb0c 2101 	mla	r1, ip, r1, r2
 8005666:	4604      	mov	r4, r0
 8005668:	2301      	movs	r3, #1
 800566a:	e7f0      	b.n	800564e <_vfiprintf_r+0x1da>
 800566c:	ab03      	add	r3, sp, #12
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	462a      	mov	r2, r5
 8005672:	4b16      	ldr	r3, [pc, #88]	; (80056cc <_vfiprintf_r+0x258>)
 8005674:	a904      	add	r1, sp, #16
 8005676:	4630      	mov	r0, r6
 8005678:	f3af 8000 	nop.w
 800567c:	4607      	mov	r7, r0
 800567e:	1c78      	adds	r0, r7, #1
 8005680:	d1d6      	bne.n	8005630 <_vfiprintf_r+0x1bc>
 8005682:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005684:	07d9      	lsls	r1, r3, #31
 8005686:	d405      	bmi.n	8005694 <_vfiprintf_r+0x220>
 8005688:	89ab      	ldrh	r3, [r5, #12]
 800568a:	059a      	lsls	r2, r3, #22
 800568c:	d402      	bmi.n	8005694 <_vfiprintf_r+0x220>
 800568e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005690:	f7ff fd7f 	bl	8005192 <__retarget_lock_release_recursive>
 8005694:	89ab      	ldrh	r3, [r5, #12]
 8005696:	065b      	lsls	r3, r3, #25
 8005698:	f53f af12 	bmi.w	80054c0 <_vfiprintf_r+0x4c>
 800569c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800569e:	e711      	b.n	80054c4 <_vfiprintf_r+0x50>
 80056a0:	ab03      	add	r3, sp, #12
 80056a2:	9300      	str	r3, [sp, #0]
 80056a4:	462a      	mov	r2, r5
 80056a6:	4b09      	ldr	r3, [pc, #36]	; (80056cc <_vfiprintf_r+0x258>)
 80056a8:	a904      	add	r1, sp, #16
 80056aa:	4630      	mov	r0, r6
 80056ac:	f000 f880 	bl	80057b0 <_printf_i>
 80056b0:	e7e4      	b.n	800567c <_vfiprintf_r+0x208>
 80056b2:	bf00      	nop
 80056b4:	08005d08 	.word	0x08005d08
 80056b8:	08005d28 	.word	0x08005d28
 80056bc:	08005ce8 	.word	0x08005ce8
 80056c0:	08005d48 	.word	0x08005d48
 80056c4:	08005d52 	.word	0x08005d52
 80056c8:	00000000 	.word	0x00000000
 80056cc:	0800544f 	.word	0x0800544f
 80056d0:	08005d4e 	.word	0x08005d4e

080056d4 <_printf_common>:
 80056d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056d8:	4616      	mov	r6, r2
 80056da:	4699      	mov	r9, r3
 80056dc:	688a      	ldr	r2, [r1, #8]
 80056de:	690b      	ldr	r3, [r1, #16]
 80056e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056e4:	4293      	cmp	r3, r2
 80056e6:	bfb8      	it	lt
 80056e8:	4613      	movlt	r3, r2
 80056ea:	6033      	str	r3, [r6, #0]
 80056ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056f0:	4607      	mov	r7, r0
 80056f2:	460c      	mov	r4, r1
 80056f4:	b10a      	cbz	r2, 80056fa <_printf_common+0x26>
 80056f6:	3301      	adds	r3, #1
 80056f8:	6033      	str	r3, [r6, #0]
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	0699      	lsls	r1, r3, #26
 80056fe:	bf42      	ittt	mi
 8005700:	6833      	ldrmi	r3, [r6, #0]
 8005702:	3302      	addmi	r3, #2
 8005704:	6033      	strmi	r3, [r6, #0]
 8005706:	6825      	ldr	r5, [r4, #0]
 8005708:	f015 0506 	ands.w	r5, r5, #6
 800570c:	d106      	bne.n	800571c <_printf_common+0x48>
 800570e:	f104 0a19 	add.w	sl, r4, #25
 8005712:	68e3      	ldr	r3, [r4, #12]
 8005714:	6832      	ldr	r2, [r6, #0]
 8005716:	1a9b      	subs	r3, r3, r2
 8005718:	42ab      	cmp	r3, r5
 800571a:	dc26      	bgt.n	800576a <_printf_common+0x96>
 800571c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005720:	1e13      	subs	r3, r2, #0
 8005722:	6822      	ldr	r2, [r4, #0]
 8005724:	bf18      	it	ne
 8005726:	2301      	movne	r3, #1
 8005728:	0692      	lsls	r2, r2, #26
 800572a:	d42b      	bmi.n	8005784 <_printf_common+0xb0>
 800572c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005730:	4649      	mov	r1, r9
 8005732:	4638      	mov	r0, r7
 8005734:	47c0      	blx	r8
 8005736:	3001      	adds	r0, #1
 8005738:	d01e      	beq.n	8005778 <_printf_common+0xa4>
 800573a:	6823      	ldr	r3, [r4, #0]
 800573c:	68e5      	ldr	r5, [r4, #12]
 800573e:	6832      	ldr	r2, [r6, #0]
 8005740:	f003 0306 	and.w	r3, r3, #6
 8005744:	2b04      	cmp	r3, #4
 8005746:	bf08      	it	eq
 8005748:	1aad      	subeq	r5, r5, r2
 800574a:	68a3      	ldr	r3, [r4, #8]
 800574c:	6922      	ldr	r2, [r4, #16]
 800574e:	bf0c      	ite	eq
 8005750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005754:	2500      	movne	r5, #0
 8005756:	4293      	cmp	r3, r2
 8005758:	bfc4      	itt	gt
 800575a:	1a9b      	subgt	r3, r3, r2
 800575c:	18ed      	addgt	r5, r5, r3
 800575e:	2600      	movs	r6, #0
 8005760:	341a      	adds	r4, #26
 8005762:	42b5      	cmp	r5, r6
 8005764:	d11a      	bne.n	800579c <_printf_common+0xc8>
 8005766:	2000      	movs	r0, #0
 8005768:	e008      	b.n	800577c <_printf_common+0xa8>
 800576a:	2301      	movs	r3, #1
 800576c:	4652      	mov	r2, sl
 800576e:	4649      	mov	r1, r9
 8005770:	4638      	mov	r0, r7
 8005772:	47c0      	blx	r8
 8005774:	3001      	adds	r0, #1
 8005776:	d103      	bne.n	8005780 <_printf_common+0xac>
 8005778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800577c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005780:	3501      	adds	r5, #1
 8005782:	e7c6      	b.n	8005712 <_printf_common+0x3e>
 8005784:	18e1      	adds	r1, r4, r3
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	2030      	movs	r0, #48	; 0x30
 800578a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800578e:	4422      	add	r2, r4
 8005790:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005794:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005798:	3302      	adds	r3, #2
 800579a:	e7c7      	b.n	800572c <_printf_common+0x58>
 800579c:	2301      	movs	r3, #1
 800579e:	4622      	mov	r2, r4
 80057a0:	4649      	mov	r1, r9
 80057a2:	4638      	mov	r0, r7
 80057a4:	47c0      	blx	r8
 80057a6:	3001      	adds	r0, #1
 80057a8:	d0e6      	beq.n	8005778 <_printf_common+0xa4>
 80057aa:	3601      	adds	r6, #1
 80057ac:	e7d9      	b.n	8005762 <_printf_common+0x8e>
	...

080057b0 <_printf_i>:
 80057b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057b4:	7e0f      	ldrb	r7, [r1, #24]
 80057b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057b8:	2f78      	cmp	r7, #120	; 0x78
 80057ba:	4691      	mov	r9, r2
 80057bc:	4680      	mov	r8, r0
 80057be:	460c      	mov	r4, r1
 80057c0:	469a      	mov	sl, r3
 80057c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057c6:	d807      	bhi.n	80057d8 <_printf_i+0x28>
 80057c8:	2f62      	cmp	r7, #98	; 0x62
 80057ca:	d80a      	bhi.n	80057e2 <_printf_i+0x32>
 80057cc:	2f00      	cmp	r7, #0
 80057ce:	f000 80d8 	beq.w	8005982 <_printf_i+0x1d2>
 80057d2:	2f58      	cmp	r7, #88	; 0x58
 80057d4:	f000 80a3 	beq.w	800591e <_printf_i+0x16e>
 80057d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057e0:	e03a      	b.n	8005858 <_printf_i+0xa8>
 80057e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057e6:	2b15      	cmp	r3, #21
 80057e8:	d8f6      	bhi.n	80057d8 <_printf_i+0x28>
 80057ea:	a101      	add	r1, pc, #4	; (adr r1, 80057f0 <_printf_i+0x40>)
 80057ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057f0:	08005849 	.word	0x08005849
 80057f4:	0800585d 	.word	0x0800585d
 80057f8:	080057d9 	.word	0x080057d9
 80057fc:	080057d9 	.word	0x080057d9
 8005800:	080057d9 	.word	0x080057d9
 8005804:	080057d9 	.word	0x080057d9
 8005808:	0800585d 	.word	0x0800585d
 800580c:	080057d9 	.word	0x080057d9
 8005810:	080057d9 	.word	0x080057d9
 8005814:	080057d9 	.word	0x080057d9
 8005818:	080057d9 	.word	0x080057d9
 800581c:	08005969 	.word	0x08005969
 8005820:	0800588d 	.word	0x0800588d
 8005824:	0800594b 	.word	0x0800594b
 8005828:	080057d9 	.word	0x080057d9
 800582c:	080057d9 	.word	0x080057d9
 8005830:	0800598b 	.word	0x0800598b
 8005834:	080057d9 	.word	0x080057d9
 8005838:	0800588d 	.word	0x0800588d
 800583c:	080057d9 	.word	0x080057d9
 8005840:	080057d9 	.word	0x080057d9
 8005844:	08005953 	.word	0x08005953
 8005848:	682b      	ldr	r3, [r5, #0]
 800584a:	1d1a      	adds	r2, r3, #4
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	602a      	str	r2, [r5, #0]
 8005850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005858:	2301      	movs	r3, #1
 800585a:	e0a3      	b.n	80059a4 <_printf_i+0x1f4>
 800585c:	6820      	ldr	r0, [r4, #0]
 800585e:	6829      	ldr	r1, [r5, #0]
 8005860:	0606      	lsls	r6, r0, #24
 8005862:	f101 0304 	add.w	r3, r1, #4
 8005866:	d50a      	bpl.n	800587e <_printf_i+0xce>
 8005868:	680e      	ldr	r6, [r1, #0]
 800586a:	602b      	str	r3, [r5, #0]
 800586c:	2e00      	cmp	r6, #0
 800586e:	da03      	bge.n	8005878 <_printf_i+0xc8>
 8005870:	232d      	movs	r3, #45	; 0x2d
 8005872:	4276      	negs	r6, r6
 8005874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005878:	485e      	ldr	r0, [pc, #376]	; (80059f4 <_printf_i+0x244>)
 800587a:	230a      	movs	r3, #10
 800587c:	e019      	b.n	80058b2 <_printf_i+0x102>
 800587e:	680e      	ldr	r6, [r1, #0]
 8005880:	602b      	str	r3, [r5, #0]
 8005882:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005886:	bf18      	it	ne
 8005888:	b236      	sxthne	r6, r6
 800588a:	e7ef      	b.n	800586c <_printf_i+0xbc>
 800588c:	682b      	ldr	r3, [r5, #0]
 800588e:	6820      	ldr	r0, [r4, #0]
 8005890:	1d19      	adds	r1, r3, #4
 8005892:	6029      	str	r1, [r5, #0]
 8005894:	0601      	lsls	r1, r0, #24
 8005896:	d501      	bpl.n	800589c <_printf_i+0xec>
 8005898:	681e      	ldr	r6, [r3, #0]
 800589a:	e002      	b.n	80058a2 <_printf_i+0xf2>
 800589c:	0646      	lsls	r6, r0, #25
 800589e:	d5fb      	bpl.n	8005898 <_printf_i+0xe8>
 80058a0:	881e      	ldrh	r6, [r3, #0]
 80058a2:	4854      	ldr	r0, [pc, #336]	; (80059f4 <_printf_i+0x244>)
 80058a4:	2f6f      	cmp	r7, #111	; 0x6f
 80058a6:	bf0c      	ite	eq
 80058a8:	2308      	moveq	r3, #8
 80058aa:	230a      	movne	r3, #10
 80058ac:	2100      	movs	r1, #0
 80058ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058b2:	6865      	ldr	r5, [r4, #4]
 80058b4:	60a5      	str	r5, [r4, #8]
 80058b6:	2d00      	cmp	r5, #0
 80058b8:	bfa2      	ittt	ge
 80058ba:	6821      	ldrge	r1, [r4, #0]
 80058bc:	f021 0104 	bicge.w	r1, r1, #4
 80058c0:	6021      	strge	r1, [r4, #0]
 80058c2:	b90e      	cbnz	r6, 80058c8 <_printf_i+0x118>
 80058c4:	2d00      	cmp	r5, #0
 80058c6:	d04d      	beq.n	8005964 <_printf_i+0x1b4>
 80058c8:	4615      	mov	r5, r2
 80058ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80058ce:	fb03 6711 	mls	r7, r3, r1, r6
 80058d2:	5dc7      	ldrb	r7, [r0, r7]
 80058d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058d8:	4637      	mov	r7, r6
 80058da:	42bb      	cmp	r3, r7
 80058dc:	460e      	mov	r6, r1
 80058de:	d9f4      	bls.n	80058ca <_printf_i+0x11a>
 80058e0:	2b08      	cmp	r3, #8
 80058e2:	d10b      	bne.n	80058fc <_printf_i+0x14c>
 80058e4:	6823      	ldr	r3, [r4, #0]
 80058e6:	07de      	lsls	r6, r3, #31
 80058e8:	d508      	bpl.n	80058fc <_printf_i+0x14c>
 80058ea:	6923      	ldr	r3, [r4, #16]
 80058ec:	6861      	ldr	r1, [r4, #4]
 80058ee:	4299      	cmp	r1, r3
 80058f0:	bfde      	ittt	le
 80058f2:	2330      	movle	r3, #48	; 0x30
 80058f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058f8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80058fc:	1b52      	subs	r2, r2, r5
 80058fe:	6122      	str	r2, [r4, #16]
 8005900:	f8cd a000 	str.w	sl, [sp]
 8005904:	464b      	mov	r3, r9
 8005906:	aa03      	add	r2, sp, #12
 8005908:	4621      	mov	r1, r4
 800590a:	4640      	mov	r0, r8
 800590c:	f7ff fee2 	bl	80056d4 <_printf_common>
 8005910:	3001      	adds	r0, #1
 8005912:	d14c      	bne.n	80059ae <_printf_i+0x1fe>
 8005914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005918:	b004      	add	sp, #16
 800591a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800591e:	4835      	ldr	r0, [pc, #212]	; (80059f4 <_printf_i+0x244>)
 8005920:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005924:	6829      	ldr	r1, [r5, #0]
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	f851 6b04 	ldr.w	r6, [r1], #4
 800592c:	6029      	str	r1, [r5, #0]
 800592e:	061d      	lsls	r5, r3, #24
 8005930:	d514      	bpl.n	800595c <_printf_i+0x1ac>
 8005932:	07df      	lsls	r7, r3, #31
 8005934:	bf44      	itt	mi
 8005936:	f043 0320 	orrmi.w	r3, r3, #32
 800593a:	6023      	strmi	r3, [r4, #0]
 800593c:	b91e      	cbnz	r6, 8005946 <_printf_i+0x196>
 800593e:	6823      	ldr	r3, [r4, #0]
 8005940:	f023 0320 	bic.w	r3, r3, #32
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	2310      	movs	r3, #16
 8005948:	e7b0      	b.n	80058ac <_printf_i+0xfc>
 800594a:	6823      	ldr	r3, [r4, #0]
 800594c:	f043 0320 	orr.w	r3, r3, #32
 8005950:	6023      	str	r3, [r4, #0]
 8005952:	2378      	movs	r3, #120	; 0x78
 8005954:	4828      	ldr	r0, [pc, #160]	; (80059f8 <_printf_i+0x248>)
 8005956:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800595a:	e7e3      	b.n	8005924 <_printf_i+0x174>
 800595c:	0659      	lsls	r1, r3, #25
 800595e:	bf48      	it	mi
 8005960:	b2b6      	uxthmi	r6, r6
 8005962:	e7e6      	b.n	8005932 <_printf_i+0x182>
 8005964:	4615      	mov	r5, r2
 8005966:	e7bb      	b.n	80058e0 <_printf_i+0x130>
 8005968:	682b      	ldr	r3, [r5, #0]
 800596a:	6826      	ldr	r6, [r4, #0]
 800596c:	6961      	ldr	r1, [r4, #20]
 800596e:	1d18      	adds	r0, r3, #4
 8005970:	6028      	str	r0, [r5, #0]
 8005972:	0635      	lsls	r5, r6, #24
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	d501      	bpl.n	800597c <_printf_i+0x1cc>
 8005978:	6019      	str	r1, [r3, #0]
 800597a:	e002      	b.n	8005982 <_printf_i+0x1d2>
 800597c:	0670      	lsls	r0, r6, #25
 800597e:	d5fb      	bpl.n	8005978 <_printf_i+0x1c8>
 8005980:	8019      	strh	r1, [r3, #0]
 8005982:	2300      	movs	r3, #0
 8005984:	6123      	str	r3, [r4, #16]
 8005986:	4615      	mov	r5, r2
 8005988:	e7ba      	b.n	8005900 <_printf_i+0x150>
 800598a:	682b      	ldr	r3, [r5, #0]
 800598c:	1d1a      	adds	r2, r3, #4
 800598e:	602a      	str	r2, [r5, #0]
 8005990:	681d      	ldr	r5, [r3, #0]
 8005992:	6862      	ldr	r2, [r4, #4]
 8005994:	2100      	movs	r1, #0
 8005996:	4628      	mov	r0, r5
 8005998:	f7fa fbf2 	bl	8000180 <memchr>
 800599c:	b108      	cbz	r0, 80059a2 <_printf_i+0x1f2>
 800599e:	1b40      	subs	r0, r0, r5
 80059a0:	6060      	str	r0, [r4, #4]
 80059a2:	6863      	ldr	r3, [r4, #4]
 80059a4:	6123      	str	r3, [r4, #16]
 80059a6:	2300      	movs	r3, #0
 80059a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059ac:	e7a8      	b.n	8005900 <_printf_i+0x150>
 80059ae:	6923      	ldr	r3, [r4, #16]
 80059b0:	462a      	mov	r2, r5
 80059b2:	4649      	mov	r1, r9
 80059b4:	4640      	mov	r0, r8
 80059b6:	47d0      	blx	sl
 80059b8:	3001      	adds	r0, #1
 80059ba:	d0ab      	beq.n	8005914 <_printf_i+0x164>
 80059bc:	6823      	ldr	r3, [r4, #0]
 80059be:	079b      	lsls	r3, r3, #30
 80059c0:	d413      	bmi.n	80059ea <_printf_i+0x23a>
 80059c2:	68e0      	ldr	r0, [r4, #12]
 80059c4:	9b03      	ldr	r3, [sp, #12]
 80059c6:	4298      	cmp	r0, r3
 80059c8:	bfb8      	it	lt
 80059ca:	4618      	movlt	r0, r3
 80059cc:	e7a4      	b.n	8005918 <_printf_i+0x168>
 80059ce:	2301      	movs	r3, #1
 80059d0:	4632      	mov	r2, r6
 80059d2:	4649      	mov	r1, r9
 80059d4:	4640      	mov	r0, r8
 80059d6:	47d0      	blx	sl
 80059d8:	3001      	adds	r0, #1
 80059da:	d09b      	beq.n	8005914 <_printf_i+0x164>
 80059dc:	3501      	adds	r5, #1
 80059de:	68e3      	ldr	r3, [r4, #12]
 80059e0:	9903      	ldr	r1, [sp, #12]
 80059e2:	1a5b      	subs	r3, r3, r1
 80059e4:	42ab      	cmp	r3, r5
 80059e6:	dcf2      	bgt.n	80059ce <_printf_i+0x21e>
 80059e8:	e7eb      	b.n	80059c2 <_printf_i+0x212>
 80059ea:	2500      	movs	r5, #0
 80059ec:	f104 0619 	add.w	r6, r4, #25
 80059f0:	e7f5      	b.n	80059de <_printf_i+0x22e>
 80059f2:	bf00      	nop
 80059f4:	08005d59 	.word	0x08005d59
 80059f8:	08005d6a 	.word	0x08005d6a

080059fc <_sbrk_r>:
 80059fc:	b538      	push	{r3, r4, r5, lr}
 80059fe:	4d06      	ldr	r5, [pc, #24]	; (8005a18 <_sbrk_r+0x1c>)
 8005a00:	2300      	movs	r3, #0
 8005a02:	4604      	mov	r4, r0
 8005a04:	4608      	mov	r0, r1
 8005a06:	602b      	str	r3, [r5, #0]
 8005a08:	f7fb fb5c 	bl	80010c4 <_sbrk>
 8005a0c:	1c43      	adds	r3, r0, #1
 8005a0e:	d102      	bne.n	8005a16 <_sbrk_r+0x1a>
 8005a10:	682b      	ldr	r3, [r5, #0]
 8005a12:	b103      	cbz	r3, 8005a16 <_sbrk_r+0x1a>
 8005a14:	6023      	str	r3, [r4, #0]
 8005a16:	bd38      	pop	{r3, r4, r5, pc}
 8005a18:	200001ac 	.word	0x200001ac

08005a1c <__sread>:
 8005a1c:	b510      	push	{r4, lr}
 8005a1e:	460c      	mov	r4, r1
 8005a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a24:	f000 f8a0 	bl	8005b68 <_read_r>
 8005a28:	2800      	cmp	r0, #0
 8005a2a:	bfab      	itete	ge
 8005a2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a2e:	89a3      	ldrhlt	r3, [r4, #12]
 8005a30:	181b      	addge	r3, r3, r0
 8005a32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a36:	bfac      	ite	ge
 8005a38:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a3a:	81a3      	strhlt	r3, [r4, #12]
 8005a3c:	bd10      	pop	{r4, pc}

08005a3e <__swrite>:
 8005a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a42:	461f      	mov	r7, r3
 8005a44:	898b      	ldrh	r3, [r1, #12]
 8005a46:	05db      	lsls	r3, r3, #23
 8005a48:	4605      	mov	r5, r0
 8005a4a:	460c      	mov	r4, r1
 8005a4c:	4616      	mov	r6, r2
 8005a4e:	d505      	bpl.n	8005a5c <__swrite+0x1e>
 8005a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a54:	2302      	movs	r3, #2
 8005a56:	2200      	movs	r2, #0
 8005a58:	f000 f868 	bl	8005b2c <_lseek_r>
 8005a5c:	89a3      	ldrh	r3, [r4, #12]
 8005a5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a66:	81a3      	strh	r3, [r4, #12]
 8005a68:	4632      	mov	r2, r6
 8005a6a:	463b      	mov	r3, r7
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a72:	f000 b817 	b.w	8005aa4 <_write_r>

08005a76 <__sseek>:
 8005a76:	b510      	push	{r4, lr}
 8005a78:	460c      	mov	r4, r1
 8005a7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a7e:	f000 f855 	bl	8005b2c <_lseek_r>
 8005a82:	1c43      	adds	r3, r0, #1
 8005a84:	89a3      	ldrh	r3, [r4, #12]
 8005a86:	bf15      	itete	ne
 8005a88:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a92:	81a3      	strheq	r3, [r4, #12]
 8005a94:	bf18      	it	ne
 8005a96:	81a3      	strhne	r3, [r4, #12]
 8005a98:	bd10      	pop	{r4, pc}

08005a9a <__sclose>:
 8005a9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a9e:	f000 b813 	b.w	8005ac8 <_close_r>
	...

08005aa4 <_write_r>:
 8005aa4:	b538      	push	{r3, r4, r5, lr}
 8005aa6:	4d07      	ldr	r5, [pc, #28]	; (8005ac4 <_write_r+0x20>)
 8005aa8:	4604      	mov	r4, r0
 8005aaa:	4608      	mov	r0, r1
 8005aac:	4611      	mov	r1, r2
 8005aae:	2200      	movs	r2, #0
 8005ab0:	602a      	str	r2, [r5, #0]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	f7fb fab5 	bl	8001022 <_write>
 8005ab8:	1c43      	adds	r3, r0, #1
 8005aba:	d102      	bne.n	8005ac2 <_write_r+0x1e>
 8005abc:	682b      	ldr	r3, [r5, #0]
 8005abe:	b103      	cbz	r3, 8005ac2 <_write_r+0x1e>
 8005ac0:	6023      	str	r3, [r4, #0]
 8005ac2:	bd38      	pop	{r3, r4, r5, pc}
 8005ac4:	200001ac 	.word	0x200001ac

08005ac8 <_close_r>:
 8005ac8:	b538      	push	{r3, r4, r5, lr}
 8005aca:	4d06      	ldr	r5, [pc, #24]	; (8005ae4 <_close_r+0x1c>)
 8005acc:	2300      	movs	r3, #0
 8005ace:	4604      	mov	r4, r0
 8005ad0:	4608      	mov	r0, r1
 8005ad2:	602b      	str	r3, [r5, #0]
 8005ad4:	f7fb fac1 	bl	800105a <_close>
 8005ad8:	1c43      	adds	r3, r0, #1
 8005ada:	d102      	bne.n	8005ae2 <_close_r+0x1a>
 8005adc:	682b      	ldr	r3, [r5, #0]
 8005ade:	b103      	cbz	r3, 8005ae2 <_close_r+0x1a>
 8005ae0:	6023      	str	r3, [r4, #0]
 8005ae2:	bd38      	pop	{r3, r4, r5, pc}
 8005ae4:	200001ac 	.word	0x200001ac

08005ae8 <_fstat_r>:
 8005ae8:	b538      	push	{r3, r4, r5, lr}
 8005aea:	4d07      	ldr	r5, [pc, #28]	; (8005b08 <_fstat_r+0x20>)
 8005aec:	2300      	movs	r3, #0
 8005aee:	4604      	mov	r4, r0
 8005af0:	4608      	mov	r0, r1
 8005af2:	4611      	mov	r1, r2
 8005af4:	602b      	str	r3, [r5, #0]
 8005af6:	f7fb fabc 	bl	8001072 <_fstat>
 8005afa:	1c43      	adds	r3, r0, #1
 8005afc:	d102      	bne.n	8005b04 <_fstat_r+0x1c>
 8005afe:	682b      	ldr	r3, [r5, #0]
 8005b00:	b103      	cbz	r3, 8005b04 <_fstat_r+0x1c>
 8005b02:	6023      	str	r3, [r4, #0]
 8005b04:	bd38      	pop	{r3, r4, r5, pc}
 8005b06:	bf00      	nop
 8005b08:	200001ac 	.word	0x200001ac

08005b0c <_isatty_r>:
 8005b0c:	b538      	push	{r3, r4, r5, lr}
 8005b0e:	4d06      	ldr	r5, [pc, #24]	; (8005b28 <_isatty_r+0x1c>)
 8005b10:	2300      	movs	r3, #0
 8005b12:	4604      	mov	r4, r0
 8005b14:	4608      	mov	r0, r1
 8005b16:	602b      	str	r3, [r5, #0]
 8005b18:	f7fb fabb 	bl	8001092 <_isatty>
 8005b1c:	1c43      	adds	r3, r0, #1
 8005b1e:	d102      	bne.n	8005b26 <_isatty_r+0x1a>
 8005b20:	682b      	ldr	r3, [r5, #0]
 8005b22:	b103      	cbz	r3, 8005b26 <_isatty_r+0x1a>
 8005b24:	6023      	str	r3, [r4, #0]
 8005b26:	bd38      	pop	{r3, r4, r5, pc}
 8005b28:	200001ac 	.word	0x200001ac

08005b2c <_lseek_r>:
 8005b2c:	b538      	push	{r3, r4, r5, lr}
 8005b2e:	4d07      	ldr	r5, [pc, #28]	; (8005b4c <_lseek_r+0x20>)
 8005b30:	4604      	mov	r4, r0
 8005b32:	4608      	mov	r0, r1
 8005b34:	4611      	mov	r1, r2
 8005b36:	2200      	movs	r2, #0
 8005b38:	602a      	str	r2, [r5, #0]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	f7fb fab4 	bl	80010a8 <_lseek>
 8005b40:	1c43      	adds	r3, r0, #1
 8005b42:	d102      	bne.n	8005b4a <_lseek_r+0x1e>
 8005b44:	682b      	ldr	r3, [r5, #0]
 8005b46:	b103      	cbz	r3, 8005b4a <_lseek_r+0x1e>
 8005b48:	6023      	str	r3, [r4, #0]
 8005b4a:	bd38      	pop	{r3, r4, r5, pc}
 8005b4c:	200001ac 	.word	0x200001ac

08005b50 <__malloc_lock>:
 8005b50:	4801      	ldr	r0, [pc, #4]	; (8005b58 <__malloc_lock+0x8>)
 8005b52:	f7ff bb1d 	b.w	8005190 <__retarget_lock_acquire_recursive>
 8005b56:	bf00      	nop
 8005b58:	200001a0 	.word	0x200001a0

08005b5c <__malloc_unlock>:
 8005b5c:	4801      	ldr	r0, [pc, #4]	; (8005b64 <__malloc_unlock+0x8>)
 8005b5e:	f7ff bb18 	b.w	8005192 <__retarget_lock_release_recursive>
 8005b62:	bf00      	nop
 8005b64:	200001a0 	.word	0x200001a0

08005b68 <_read_r>:
 8005b68:	b538      	push	{r3, r4, r5, lr}
 8005b6a:	4d07      	ldr	r5, [pc, #28]	; (8005b88 <_read_r+0x20>)
 8005b6c:	4604      	mov	r4, r0
 8005b6e:	4608      	mov	r0, r1
 8005b70:	4611      	mov	r1, r2
 8005b72:	2200      	movs	r2, #0
 8005b74:	602a      	str	r2, [r5, #0]
 8005b76:	461a      	mov	r2, r3
 8005b78:	f7fb fa36 	bl	8000fe8 <_read>
 8005b7c:	1c43      	adds	r3, r0, #1
 8005b7e:	d102      	bne.n	8005b86 <_read_r+0x1e>
 8005b80:	682b      	ldr	r3, [r5, #0]
 8005b82:	b103      	cbz	r3, 8005b86 <_read_r+0x1e>
 8005b84:	6023      	str	r3, [r4, #0]
 8005b86:	bd38      	pop	{r3, r4, r5, pc}
 8005b88:	200001ac 	.word	0x200001ac

08005b8c <_init>:
 8005b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b8e:	bf00      	nop
 8005b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b92:	bc08      	pop	{r3}
 8005b94:	469e      	mov	lr, r3
 8005b96:	4770      	bx	lr

08005b98 <_fini>:
 8005b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b9a:	bf00      	nop
 8005b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b9e:	bc08      	pop	{r3}
 8005ba0:	469e      	mov	lr, r3
 8005ba2:	4770      	bx	lr
